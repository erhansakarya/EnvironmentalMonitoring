
stm32f1_FreeRtos_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007cb0  08007cb0  00017cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e20  08007e20  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007e20  08007e20  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e20  08007e20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018c8  20000074  08007e9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000193c  08007e9c  0002193c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ab7  00000000  00000000  00042561  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  00046018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  00047498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193b8  00000000  00000000  00048780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131d3  00000000  00000000  00061b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000819bc  00000000  00000000  00074d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f66c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b00  00000000  00000000  000f6744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c98 	.word	0x08007c98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007c98 	.word	0x08007c98

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <ENVMNTR_init>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void Error_Handler(void);

uint8_t ENVMNTR_init(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010c2:	f000 ff6f 	bl	8001fa4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80010c6:	f000 f855 	bl	8001174 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ca:	f000 f8ed 	bl	80012a8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80010ce:	f000 f8c1 	bl	8001254 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80010d2:	f000 f891 	bl	80011f8 <MX_I2C1_Init>

	error = TSL2561_init();
 80010d6:	f000 fc75 	bl	80019c4 <TSL2561_init>
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	error = TTP223B_init();
 80010de:	f000 ff19 	bl	8001f14 <TTP223B_init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	error = HTU21D_init();
 80010e6:	f000 f965 	bl	80013b4 <HTU21D_init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]

	return error;
 80010ee:	79fb      	ldrb	r3, [r7, #7]

}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <ENVMNTR_createTasks>:

uint8_t ENVMNTR_createTasks(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8

	uint8_t error = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]

	NVIC_SetPriorityGrouping(0);	/* NOTE: For Segger Systemview */
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ffb4 	bl	8001070 <NVIC_SetPriorityGrouping>

	/* NOTE: Start Segger SysView */
	SEGGER_SYSVIEW_Conf();
 8001108:	f003 f928 	bl	800435c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800110c:	f003 ff7a 	bl	8005004 <SEGGER_SYSVIEW_Start>

	/* NOTE: Create TSL2561 task */
	if(pdPASS != xTaskCreate(TSL2561_handler, "TSL2561_handler",
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2306      	movs	r3, #6
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <ENVMNTR_createTasks+0x64>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	4910      	ldr	r1, [pc, #64]	; (8001160 <ENVMNTR_createTasks+0x68>)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <ENVMNTR_createTasks+0x6c>)
 8001120:	f004 fd4b 	bl	8005bba <xTaskCreate>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <ENVMNTR_createTasks+0x36>
					configMINIMAL_STACK_SIZE, (void *)&envmonitor.sensor.tsl2561.lux,
					configMAX_PRIORITIES - 1, NULL)){

		  return -1;
 800112a:	23ff      	movs	r3, #255	; 0xff
 800112c:	e011      	b.n	8001152 <ENVMNTR_createTasks+0x5a>
	}

	/* NOTE: Create HTU21D task */
	if(pdPASS != xTaskCreate(HTU21D_handler, "HTU21D_handler",
 800112e:	2300      	movs	r3, #0
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2306      	movs	r3, #6
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <ENVMNTR_createTasks+0x70>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	490c      	ldr	r1, [pc, #48]	; (800116c <ENVMNTR_createTasks+0x74>)
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <ENVMNTR_createTasks+0x78>)
 800113e:	f004 fd3c 	bl	8005bba <xTaskCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d001      	beq.n	800114c <ENVMNTR_createTasks+0x54>
					configMINIMAL_STACK_SIZE, (void *)&envmonitor.sensor.htu21d,
					configMAX_PRIORITIES - 1, NULL)){

		  return -1;
 8001148:	23ff      	movs	r3, #255	; 0xff
 800114a:	e002      	b.n	8001152 <ENVMNTR_createTasks+0x5a>
	}

	/* Start the scheduler so the tasks start executing. */
	vTaskStartScheduler();
 800114c:	f004 fe84 	bl	8005e58 <vTaskStartScheduler>

	return error;
 8001150:	79fb      	ldrb	r3, [r7, #7]

}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000098 	.word	0x20000098
 8001160:	08007cb0 	.word	0x08007cb0
 8001164:	08001aa1 	.word	0x08001aa1
 8001168:	20000090 	.word	0x20000090
 800116c:	08007cc0 	.word	0x08007cc0
 8001170:	080014c5 	.word	0x080014c5

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b090      	sub	sp, #64	; 0x40
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	2228      	movs	r2, #40	; 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f005 fd56 	bl	8006c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119a:	2301      	movs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119e:	2310      	movs	r3, #16
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 f8f3 	bl	80033a0 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x50>
  {

	  Error_Handler();
 80011c0:	f000 f8f2 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fb42 	bl	8003868 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011ea:	f000 f8dd 	bl	80013a8 <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3740      	adds	r7, #64	; 0x40
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f001 f973 	bl	8002520 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 f8b2 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200017bc 	.word	0x200017bc
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f002 fecc 	bl	8004028 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f887 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20001810 	.word	0x20001810
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_GPIO_Init+0xcc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_GPIO_Init+0xcc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <MX_GPIO_Init+0xcc>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_GPIO_Init+0xcc>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2120      	movs	r1, #32
 8001320:	4815      	ldr	r0, [pc, #84]	; (8001378 <MX_GPIO_Init+0xd0>)
 8001322:	f001 f8cd 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_GPIO_Init+0xd4>)
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <MX_GPIO_Init+0xd8>)
 800133c:	f000 ff62 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001340:	2320      	movs	r3, #32
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2302      	movs	r3, #2
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <MX_GPIO_Init+0xd0>)
 8001358:	f000 ff54 	bl	8002204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2105      	movs	r1, #5
 8001360:	2028      	movs	r0, #40	; 0x28
 8001362:	f000 ff24 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001366:	2028      	movs	r0, #40	; 0x28
 8001368:	f000 ff3d 	bl	80021e6 <HAL_NVIC_EnableIRQ>

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010800 	.word	0x40010800
 800137c:	10110000 	.word	0x10110000
 8001380:	40011000 	.word	0x40011000

08001384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001396:	f000 fe1b 	bl	8001fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012c00 	.word	0x40012c00

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HTU21D_init>:
static uint8_t HTU21D_softReset(void);
static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes);
static void calculateTempHum(uint16_t *rawValues, void *htu21d);
static void Error_Handler(void);

uint8_t HTU21D_init(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]

	HTU21D_softReset();
 80013be:	f000 f809 	bl	80013d4 <HTU21D_softReset>
	HTU21D_configUserRegister(RH12TEMP14);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f82a 	bl	800141c <HTU21D_configUserRegister>

	return error;
 80013c8:	79fb      	ldrb	r3, [r7, #7]

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HTU21D_softReset>:

static uint8_t HTU21D_softReset(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8

	uint8_t error = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
	uint8_t pData = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	71bb      	strb	r3, [r7, #6]

	HAL_Delay(15);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 fe10 	bl	8002008 <HAL_Delay>

	/* NOTE: Send soft reset command */
	pData = HTU21D_SOFT_RESET;
 80013e8:	23fe      	movs	r3, #254	; 0xfe
 80013ea:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, &pData,
 80013ec:	1dba      	adds	r2, r7, #6
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <HTU21D_softReset+0x44>)
 80013fa:	f001 f995 	bl	8002728 <HAL_I2C_Master_Transmit>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HTU21D_softReset+0x34>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001404:	f000 f966 	bl	80016d4 <Error_Handler>
	}

	HAL_Delay(15);
 8001408:	200f      	movs	r0, #15
 800140a:	f000 fdfd 	bl	8002008 <HAL_Delay>

	return error;
 800140e:	79fb      	ldrb	r3, [r7, #7]

}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200017bc 	.word	0x200017bc

0800141c <HTU21D_configUserRegister>:

static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	uint8_t status = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
	uint8_t pData[2];

	/* NOTE: Send Read User Register Command */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2202      	movs	r2, #2
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f005 fbfe 	bl	8006c34 <memset>
	pData[0] = HTU21D_RD_USRREG;
 8001438:	23e7      	movs	r3, #231	; 0xe7
 800143a:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	481d      	ldr	r0, [pc, #116]	; (80014c0 <HTU21D_configUserRegister+0xa4>)
 800144c:	f001 f96c 	bl	8002728 <HAL_I2C_Master_Transmit>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HTU21D_configUserRegister+0x3e>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001456:	f000 f93d 	bl	80016d4 <Error_Handler>
	}

	/* NOTE: Read User Register */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2202      	movs	r2, #2
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f005 fbe6 	bl	8006c34 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, &pData[1],
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <HTU21D_configUserRegister+0xa4>)
 800147a:	f001 fa63 	bl	8002944 <HAL_I2C_Master_Receive>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HTU21D_configUserRegister+0x6c>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001484:	f000 f926 	bl	80016d4 <Error_Handler>
	}

	/* NOTE: Manipulate User Register Value */
	pData[1] |= measRes;
 8001488:	7b7a      	ldrb	r2, [r7, #13]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	737b      	strb	r3, [r7, #13]

	/* NOTE: Send Write User Register Command and Write Manipulated Value */
	pData[0] = HTU21D_WR_USRREG;
 8001492:	23e6      	movs	r3, #230	; 0xe6
 8001494:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2302      	movs	r3, #2
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <HTU21D_configUserRegister+0xa4>)
 80014a6:	f001 f93f 	bl	8002728 <HAL_I2C_Master_Transmit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HTU21D_configUserRegister+0x98>
					2, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80014b0:	f000 f910 	bl	80016d4 <Error_Handler>
	}

	/* NOTE: Read again user register value for verify */

	return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]

}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200017bc 	.word	0x200017bc

080014c4 <HTU21D_handler>:

void HTU21D_handler(void *htu21d){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]

	if(htu21d == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HTU21D_handler+0x12>
		Error_Handler();
 80014d2:	f000 f8ff 	bl	80016d4 <Error_Handler>
	uint8_t pData[2];
	uint8_t temp[3];
	uint8_t hum[3];
	uint16_t rawValues[2];

	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2202      	movs	r2, #2
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 fba8 	bl	8006c34 <memset>
	memset(temp, 0, sizeof(temp) / sizeof(temp[0]));
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2203      	movs	r2, #3
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 fba1 	bl	8006c34 <memset>
	memset(hum, 0, sizeof(hum) / sizeof(hum[0]));
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2203      	movs	r2, #3
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fb9a 	bl	8006c34 <memset>
	memset(rawValues, 0, sizeof(rawValues) / sizeof(uint8_t));
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2204      	movs	r2, #4
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fb93 	bl	8006c34 <memset>

	for(;;){

		HAL_Delay(50);
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f000 fd7a 	bl	8002008 <HAL_Delay>

		/* NOTE: Send Trigger temperature measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2202      	movs	r2, #2
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f005 fb89 	bl	8006c34 <memset>
		pData[0] = HTU21D_TEMP_HOLD;
 8001522:	23e3      	movs	r3, #227	; 0xe3
 8001524:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8001526:	f107 0214 	add.w	r2, r7, #20
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	482f      	ldr	r0, [pc, #188]	; (80015f4 <HTU21D_handler+0x130>)
 8001536:	f001 f8f7 	bl	8002728 <HAL_I2C_Master_Transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HTU21D_handler+0x80>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001540:	f000 f8c8 	bl	80016d4 <Error_Handler>
		}

		/* NOTE: Read Temperature(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, temp,
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2303      	movs	r3, #3
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	4828      	ldr	r0, [pc, #160]	; (80015f4 <HTU21D_handler+0x130>)
 8001554:	f001 f9f6 	bl	8002944 <HAL_I2C_Master_Receive>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HTU21D_handler+0x9e>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 800155e:	f000 f8b9 	bl	80016d4 <Error_Handler>
		}

		rawValues[0] = (temp[0] << 8) | (temp[1] & ~0x03);
 8001562:	7c3b      	ldrb	r3, [r7, #16]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7c7b      	ldrb	r3, [r7, #17]
 800156a:	b21b      	sxth	r3, r3
 800156c:	f023 0303 	bic.w	r3, r3, #3
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21b      	sxth	r3, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	813b      	strh	r3, [r7, #8]

		HAL_Delay(20);
 800157a:	2014      	movs	r0, #20
 800157c:	f000 fd44 	bl	8002008 <HAL_Delay>

		/* NOTE: Send Trigger humidity measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2202      	movs	r2, #2
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fb53 	bl	8006c34 <memset>
		pData[0] = HTU21D_HUM_HOLD;
 800158e:	23e5      	movs	r3, #229	; 0xe5
 8001590:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8001592:	f107 0214 	add.w	r2, r7, #20
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <HTU21D_handler+0x130>)
 80015a2:	f001 f8c1 	bl	8002728 <HAL_I2C_Master_Transmit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HTU21D_handler+0xec>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 80015ac:	f000 f892 	bl	80016d4 <Error_Handler>
		}

		/* NOTE: Read Humidity(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, hum,
 80015b0:	f107 020c 	add.w	r2, r7, #12
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2303      	movs	r3, #3
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <HTU21D_handler+0x130>)
 80015c0:	f001 f9c0 	bl	8002944 <HAL_I2C_Master_Receive>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HTU21D_handler+0x10a>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 80015ca:	f000 f883 	bl	80016d4 <Error_Handler>
		}

		rawValues[1] = (hum[0] << 8) | (hum[1] & ~0x03);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7b7b      	ldrb	r3, [r7, #13]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	817b      	strh	r3, [r7, #10]

		calculateTempHum(rawValues, htu21d);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f803 	bl	80015f8 <calculateTempHum>
		HAL_Delay(50);
 80015f2:	e78c      	b.n	800150e <HTU21D_handler+0x4a>
 80015f4:	200017bc 	.word	0x200017bc

080015f8 <calculateTempHum>:

	vTaskDelete(NULL);

}

static void calculateTempHum(uint16_t *rawValues, void *htu21d){
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]

	if(rawValues == NULL || htu21d == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <calculateTempHum+0x16>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <calculateTempHum+0x1a>
		Error_Handler();
 800160e:	f000 f861 	bl	80016d4 <Error_Handler>

	htu21d_s *HTU21D_temporary = (htu21d_s *) htu21d;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	60fb      	str	r3, [r7, #12]

	HTU21D_temporary->temperature = ( -46.85 + (175.72 * (rawValues[0] / pow(2, 16))) );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe feea 	bl	80003f4 <__aeabi_i2d>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <calculateTempHum+0xd0>)
 8001626:	f7ff f879 	bl	800071c <__aeabi_ddiv>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	a321      	add	r3, pc, #132	; (adr r3, 80016b8 <calculateTempHum+0xc0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ff46 	bl	80004c8 <__aeabi_dmul>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4618      	mov	r0, r3
 8001642:	4621      	mov	r1, r4
 8001644:	a31e      	add	r3, pc, #120	; (adr r3, 80016c0 <calculateTempHum+0xc8>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe fd85 	bl	8000158 <__aeabi_dsub>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	4618      	mov	r0, r3
 8001654:	4621      	mov	r1, r4
 8001656:	f7ff f9e7 	bl	8000a28 <__aeabi_d2f>
 800165a:	4602      	mov	r2, r0
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]
	HTU21D_temporary->humidity = ( -6 + (125 * (rawValues[1] / pow(2, 16))) );
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3302      	adds	r3, #2
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fec4 	bl	80003f4 <__aeabi_i2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <calculateTempHum+0xd0>)
 8001672:	f7ff f853 	bl	800071c <__aeabi_ddiv>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <calculateTempHum+0xd4>)
 8001684:	f7fe ff20 	bl	80004c8 <__aeabi_dmul>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	4618      	mov	r0, r3
 800168e:	4621      	mov	r1, r4
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <calculateTempHum+0xd8>)
 8001696:	f7fe fd5f 	bl	8000158 <__aeabi_dsub>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f7ff f9c1 	bl	8000a28 <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	605a      	str	r2, [r3, #4]

}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	f3af 8000 	nop.w
 80016b8:	3d70a3d7 	.word	0x3d70a3d7
 80016bc:	4065f70a 	.word	0x4065f70a
 80016c0:	cccccccd 	.word	0xcccccccd
 80016c4:	40476ccc 	.word	0x40476ccc
 80016c8:	40f00000 	.word	0x40f00000
 80016cc:	405f4000 	.word	0x405f4000
 80016d0:	40180000 	.word	0x40180000

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

	DWT->CTRL |= (1 << 0);	/* NOTE: Enable cycle counter register for timestamp */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <main+0x1c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <main+0x1c>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

	ENVMNTR_init();
 80016f0:	f7ff fce2 	bl	80010b8 <ENVMNTR_init>

	ENVMNTR_createTasks();
 80016f4:	f7ff fd00 	bl	80010f8 <ENVMNTR_createTasks>

	for(;;);
 80016f8:	e7fe      	b.n	80016f8 <main+0x18>
 80016fa:	bf00      	nop
 80016fc:	e0001000 	.word	0xe0001000

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_MspInit+0x5c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x5c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x5c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x5c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_MspInit+0x60>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_MspInit+0x60>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_I2C_MspInit+0x70>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d123      	bne.n	80017cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179c:	23c0      	movs	r3, #192	; 0xc0
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <HAL_I2C_MspInit+0x78>)
 80017b0:	f000 fd28 	bl	8002204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	61d3      	str	r3, [r2, #28]
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_I2C_MspInit+0x74>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010c00 	.word	0x40010c00

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <HAL_UART_MspInit+0x70>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d123      	bne.n	8001848 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_UART_MspInit+0x74>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a13      	ldr	r2, [pc, #76]	; (8001854 <HAL_UART_MspInit+0x74>)
 8001806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_UART_MspInit+0x74>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_UART_MspInit+0x74>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_UART_MspInit+0x74>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_UART_MspInit+0x74>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001830:	230c      	movs	r3, #12
 8001832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_UART_MspInit+0x78>)
 8001844:	f000 fcde 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40004400 	.word	0x40004400
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	2019      	movs	r0, #25
 8001872:	f000 fc9c 	bl	80021ae <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001876:	2019      	movs	r0, #25
 8001878:	f000 fcb5 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_InitTick+0x9c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_InitTick+0x9c>)
 8001882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_InitTick+0x9c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001894:	f107 0210 	add.w	r2, r7, #16
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 f982 	bl	8003ba8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018a4:	f002 f96c 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80018a8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_InitTick+0xa0>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3b01      	subs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0xa4>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_InitTick+0xa8>)
 80018bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_InitTick+0xa4>)
 80018c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_InitTick+0xa4>)
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_InitTick+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_InitTick+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <HAL_InitTick+0xa4>)
 80018da:	f002 f9b3 	bl	8003c44 <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <HAL_InitTick+0xa4>)
 80018e6:	f002 f9e1 	bl	8003cac <HAL_TIM_Base_Start_IT>
 80018ea:	4603      	mov	r3, r0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	20001850 	.word	0x20001850
 8001904:	40012c00 	.word	0x40012c00

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <HardFault_Handler+0x4>

0800191a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <BusFault_Handler+0x4>

08001926 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <UsageFault_Handler+0x4>

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM1_UP_IRQHandler+0x10>)
 800193e:	f002 f9cf 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20001850 	.word	0x20001850

0800194c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001954:	f000 fdcc 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <SystemInit+0x5c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <SystemInit+0x5c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <SystemInit+0x5c>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4911      	ldr	r1, [pc, #68]	; (80019b8 <SystemInit+0x5c>)
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <SystemInit+0x60>)
 8001974:	4013      	ands	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <SystemInit+0x5c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <SystemInit+0x5c>)
 800197e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <SystemInit+0x5c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SystemInit+0x5c>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <SystemInit+0x5c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <SystemInit+0x5c>)
 800199a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800199e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SystemInit+0x5c>)
 80019a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SystemInit+0x64>)
 80019aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	f8ff0000 	.word	0xf8ff0000
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <TSL2561_init>:
#include "tsl2561.h"

static uint8_t TSL2561_calculateLux(uint16_t *adcData, float *luxVal);
static void Error_Handler(void);

uint8_t TSL2561_init(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af02      	add	r7, sp, #8

	uint8_t pData[2];
	uint8_t error = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2202      	movs	r2, #2
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f005 f92d 	bl	8006c34 <memset>

	/* NOTE: Power up the device */
	pData[0] = TSL2561_COMMAND_REG | TSL2561_CONTROL;
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	713b      	strb	r3, [r7, #4]
	pData[1] = TSL2561_POWER_UP;
 80019de:	2303      	movs	r3, #3
 80019e0:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80019e2:	1d3a      	adds	r2, r7, #4
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	2172      	movs	r1, #114	; 0x72
 80019ee:	482b      	ldr	r0, [pc, #172]	; (8001a9c <TSL2561_init+0xd8>)
 80019f0:	f000 fe9a 	bl	8002728 <HAL_I2C_Master_Transmit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <TSL2561_init+0x3a>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 80019fa:	f000 fa85 	bl	8001f08 <Error_Handler>
//		error = 1;
//
//	}

	/* NOTE: Get Device ID */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2202      	movs	r2, #2
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 f915 	bl	8006c34 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_ID;
 8001a0a:	238a      	movs	r3, #138	; 0x8a
 8001a0c:	713b      	strb	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001a0e:	1d3a      	adds	r2, r7, #4
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	2172      	movs	r1, #114	; 0x72
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <TSL2561_init+0xd8>)
 8001a1c:	f000 fe84 	bl	8002728 <HAL_I2C_Master_Transmit>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <TSL2561_init+0x66>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001a26:	f000 fa6f 	bl	8001f08 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f005 f8ff 	bl	8006c34 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001a36:	1d3a      	adds	r2, r7, #4
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2172      	movs	r1, #114	; 0x72
 8001a42:	4816      	ldr	r0, [pc, #88]	; (8001a9c <TSL2561_init+0xd8>)
 8001a44:	f000 ff7e 	bl	8002944 <HAL_I2C_Master_Receive>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <TSL2561_init+0x8e>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8001a4e:	f000 fa5b 	bl	8001f08 <Error_Handler>
	}

	if((pData[0] & 0xF0) != TSL2561_DEV_ID){
 8001a52:	793b      	ldrb	r3, [r7, #4]
 8001a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a58:	2b50      	cmp	r3, #80	; 0x50
 8001a5a:	d001      	beq.n	8001a60 <TSL2561_init+0x9c>
		error = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
	}

	/* NOTE: Configure Timing Register */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2202      	movs	r2, #2
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 f8e4 	bl	8006c34 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_TIMING;
 8001a6c:	2381      	movs	r3, #129	; 0x81
 8001a6e:	713b      	strb	r3, [r7, #4]
	pData[1] = 0x00;	/* NOTE: integration time is 13.7ms and 16x gain */
 8001a70:	2300      	movs	r3, #0
 8001a72:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001a74:	1d3a      	adds	r2, r7, #4
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	2172      	movs	r1, #114	; 0x72
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <TSL2561_init+0xd8>)
 8001a82:	f000 fe51 	bl	8002728 <HAL_I2C_Master_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <TSL2561_init+0xcc>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 8001a8c:	f000 fa3c 	bl	8001f08 <Error_Handler>
	/* NOTE: Configure Interrupt Threshold registers */


	/* NOTE: Set interrupt control register */

	return error;
 8001a90:	79fb      	ldrb	r3, [r7, #7]

}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200017bc 	.word	0x200017bc

08001aa0 <TSL2561_handler>:

void TSL2561_handler(void *lux){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]

	if(lux == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <TSL2561_handler+0x12>
		Error_Handler();
 8001aae:	f000 fa2b 	bl	8001f08 <Error_Handler>
	for(;;){

		uint8_t pData[2];
		uint16_t adcData[2];

		memset(adcData, 0, 4);
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 f8ba 	bl	8006c34 <memset>

		HAL_Delay(500);	/* NOTE: Wait for integration time */
 8001ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ac4:	f000 faa0 	bl	8002008 <HAL_Delay>

		/* NOTE: Get ADC channel 0 lower and higher bytes */
		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2202      	movs	r2, #2
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 f8af 	bl	8006c34 <memset>
		pData[0] = (TSL2561_COMMAND_REG | (0x01 << 4) ) | TSL2561_DATA0LOW;
 8001ad6:	239c      	movs	r3, #156	; 0x9c
 8001ad8:	733b      	strb	r3, [r7, #12]
		if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001ada:	f107 020c 	add.w	r2, r7, #12
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2172      	movs	r1, #114	; 0x72
 8001ae8:	484e      	ldr	r0, [pc, #312]	; (8001c24 <TSL2561_handler+0x184>)
 8001aea:	f000 fe1d 	bl	8002728 <HAL_I2C_Master_Transmit>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <TSL2561_handler+0x58>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001af4:	f000 fa08 	bl	8001f08 <Error_Handler>
		}

		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2202      	movs	r2, #2
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 f897 	bl	8006c34 <memset>
		if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001b06:	f107 020c 	add.w	r2, r7, #12
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	2172      	movs	r1, #114	; 0x72
 8001b14:	4843      	ldr	r0, [pc, #268]	; (8001c24 <TSL2561_handler+0x184>)
 8001b16:	f000 ff15 	bl	8002944 <HAL_I2C_Master_Receive>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <TSL2561_handler+0x84>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001b20:	f000 f9f2 	bl	8001f08 <Error_Handler>
		}

		adcData[0] |= pData[0];
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	813b      	strh	r3, [r7, #8]

		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2202      	movs	r2, #2
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 f87b 	bl	8006c34 <memset>
		if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	2172      	movs	r1, #114	; 0x72
 8001b4c:	4835      	ldr	r0, [pc, #212]	; (8001c24 <TSL2561_handler+0x184>)
 8001b4e:	f000 fef9 	bl	8002944 <HAL_I2C_Master_Receive>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <TSL2561_handler+0xbc>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001b58:	f000 f9d6 	bl	8001f08 <Error_Handler>
		}

		adcData[0] |= pData[0] << 8;
 8001b5c:	893b      	ldrh	r3, [r7, #8]
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	7b3b      	ldrb	r3, [r7, #12]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	813b      	strh	r3, [r7, #8]

		/* NOTE: Get ADC channel 1 lower and higher bytes */
		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2202      	movs	r2, #2
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 f85c 	bl	8006c34 <memset>
		pData[0] = (TSL2561_COMMAND_REG | (0x01 << 4) ) | TSL2561_DATA1LOW;
 8001b7c:	239e      	movs	r3, #158	; 0x9e
 8001b7e:	733b      	strb	r3, [r7, #12]
		if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001b80:	f107 020c 	add.w	r2, r7, #12
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2172      	movs	r1, #114	; 0x72
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <TSL2561_handler+0x184>)
 8001b90:	f000 fdca 	bl	8002728 <HAL_I2C_Master_Transmit>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <TSL2561_handler+0xfe>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001b9a:	f000 f9b5 	bl	8001f08 <Error_Handler>
		}

		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 f844 	bl	8006c34 <memset>
		if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001bac:	f107 020c 	add.w	r2, r7, #12
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2172      	movs	r1, #114	; 0x72
 8001bba:	481a      	ldr	r0, [pc, #104]	; (8001c24 <TSL2561_handler+0x184>)
 8001bbc:	f000 fec2 	bl	8002944 <HAL_I2C_Master_Receive>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <TSL2561_handler+0x12a>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001bc6:	f000 f99f 	bl	8001f08 <Error_Handler>
		}

		adcData[1] |= pData[0];
 8001bca:	897a      	ldrh	r2, [r7, #10]
 8001bcc:	7b3b      	ldrb	r3, [r7, #12]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	817b      	strh	r3, [r7, #10]

		memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2202      	movs	r2, #2
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 f828 	bl	8006c34 <memset>
		if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001be4:	f107 020c 	add.w	r2, r7, #12
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	2172      	movs	r1, #114	; 0x72
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <TSL2561_handler+0x184>)
 8001bf4:	f000 fea6 	bl	8002944 <HAL_I2C_Master_Receive>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <TSL2561_handler+0x162>
				1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8001bfe:	f000 f983 	bl	8001f08 <Error_Handler>
		}

		adcData[1] |= pData[0] << 8;
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	7b3b      	ldrb	r3, [r7, #12]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	817b      	strh	r3, [r7, #10]

		TSL2561_calculateLux(adcData, (float *)lux);
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f804 	bl	8001c28 <TSL2561_calculateLux>
	for(;;){
 8001c20:	e747      	b.n	8001ab2 <TSL2561_handler+0x12>
 8001c22:	bf00      	nop
 8001c24:	200017bc 	.word	0x200017bc

08001c28 <TSL2561_calculateLux>:

	vTaskDelete(NULL);

}

static uint8_t TSL2561_calculateLux(uint16_t *adcData, float *luxVal){
 8001c28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]

	if(adcData == NULL || luxVal == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <TSL2561_calculateLux+0x18>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <TSL2561_calculateLux+0x1c>
		Error_Handler();
 8001c40:	f000 f962 	bl	8001f08 <Error_Handler>

	float divAdcData = ((float)adcData[1] / (float)adcData[0]);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3302      	adds	r3, #2
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fff2 	bl	8000c34 <__aeabi_ui2f>
 8001c50:	4604      	mov	r4, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ffec 	bl	8000c34 <__aeabi_ui2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff f8f3 	bl	8000e4c <__aeabi_fdiv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	60bb      	str	r3, [r7, #8]
	uint8_t error = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]

	if( (0.00 < divAdcData) && (divAdcData <= 0.50) ){
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f7ff f9f2 	bl	800105c <__aeabi_fcmpgt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d041      	beq.n	8001d02 <TSL2561_calculateLux+0xda>
 8001c7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c82:	68b8      	ldr	r0, [r7, #8]
 8001c84:	f7ff f9d6 	bl	8001034 <__aeabi_fcmple>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d039      	beq.n	8001d02 <TSL2561_calculateLux+0xda>

		*luxVal = (0.0304 * adcData[0]) - (0.062 * adcData[0] * pow(divAdcData, 1.4));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fbae 	bl	80003f4 <__aeabi_i2d>
 8001c98:	a383      	add	r3, pc, #524	; (adr r3, 8001ea8 <TSL2561_calculateLux+0x280>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fc13 	bl	80004c8 <__aeabi_dmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	4625      	mov	r5, r4
 8001ca8:	461c      	mov	r4, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fba0 	bl	80003f4 <__aeabi_i2d>
 8001cb4:	a37e      	add	r3, pc, #504	; (adr r3, 8001eb0 <TSL2561_calculateLux+0x288>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc05 	bl	80004c8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4690      	mov	r8, r2
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	68b8      	ldr	r0, [r7, #8]
 8001cc8:	f7fe fba6 	bl	8000418 <__aeabi_f2d>
 8001ccc:	a37a      	add	r3, pc, #488	; (adr r3, 8001eb8 <TSL2561_calculateLux+0x290>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f004 ffb7 	bl	8006c44 <pow>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4640      	mov	r0, r8
 8001cdc:	4649      	mov	r1, r9
 8001cde:	f7fe fbf3 	bl	80004c8 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fa35 	bl	8000158 <__aeabi_dsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	f7fe fe97 	bl	8000a28 <__aeabi_d2f>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e0cb      	b.n	8001e9a <TSL2561_calculateLux+0x272>

	}else if( (0.50 < divAdcData) && (divAdcData <= 0.61) ){
 8001d02:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d06:	68b8      	ldr	r0, [r7, #8]
 8001d08:	f7ff f9a8 	bl	800105c <__aeabi_fcmpgt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d033      	beq.n	8001d7a <TSL2561_calculateLux+0x152>
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f7fe fb80 	bl	8000418 <__aeabi_f2d>
 8001d18:	a369      	add	r3, pc, #420	; (adr r3, 8001ec0 <TSL2561_calculateLux+0x298>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fe4f 	bl	80009c0 <__aeabi_dcmple>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d028      	beq.n	8001d7a <TSL2561_calculateLux+0x152>

		*luxVal = (0.0224 * adcData[0]) - (0.031 * adcData[1]);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fb61 	bl	80003f4 <__aeabi_i2d>
 8001d32:	a365      	add	r3, pc, #404	; (adr r3, 8001ec8 <TSL2561_calculateLux+0x2a0>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fbc6 	bl	80004c8 <__aeabi_dmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4625      	mov	r5, r4
 8001d42:	461c      	mov	r4, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3302      	adds	r3, #2
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fb52 	bl	80003f4 <__aeabi_i2d>
 8001d50:	a35f      	add	r3, pc, #380	; (adr r3, 8001ed0 <TSL2561_calculateLux+0x2a8>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fbb7 	bl	80004c8 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	f7fe f9f9 	bl	8000158 <__aeabi_dsub>
 8001d66:	4603      	mov	r3, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	f7fe fe5b 	bl	8000a28 <__aeabi_d2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e08f      	b.n	8001e9a <TSL2561_calculateLux+0x272>

	}else if( (0.61 < divAdcData) && (divAdcData <= 0.80) ){
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7fe fb4c 	bl	8000418 <__aeabi_f2d>
 8001d80:	a34f      	add	r3, pc, #316	; (adr r3, 8001ec0 <TSL2561_calculateLux+0x298>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fe2f 	bl	80009e8 <__aeabi_dcmpgt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d033      	beq.n	8001df8 <TSL2561_calculateLux+0x1d0>
 8001d90:	68b8      	ldr	r0, [r7, #8]
 8001d92:	f7fe fb41 	bl	8000418 <__aeabi_f2d>
 8001d96:	a350      	add	r3, pc, #320	; (adr r3, 8001ed8 <TSL2561_calculateLux+0x2b0>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fe10 	bl	80009c0 <__aeabi_dcmple>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <TSL2561_calculateLux+0x1d0>

		*luxVal = (0.0128 * adcData[0]) - (0.0153 * adcData[1]);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb22 	bl	80003f4 <__aeabi_i2d>
 8001db0:	a34b      	add	r3, pc, #300	; (adr r3, 8001ee0 <TSL2561_calculateLux+0x2b8>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fb87 	bl	80004c8 <__aeabi_dmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	4625      	mov	r5, r4
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb13 	bl	80003f4 <__aeabi_i2d>
 8001dce:	a346      	add	r3, pc, #280	; (adr r3, 8001ee8 <TSL2561_calculateLux+0x2c0>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fb78 	bl	80004c8 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe f9ba 	bl	8000158 <__aeabi_dsub>
 8001de4:	4603      	mov	r3, r0
 8001de6:	460c      	mov	r4, r1
 8001de8:	4618      	mov	r0, r3
 8001dea:	4621      	mov	r1, r4
 8001dec:	f7fe fe1c 	bl	8000a28 <__aeabi_d2f>
 8001df0:	4602      	mov	r2, r0
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e050      	b.n	8001e9a <TSL2561_calculateLux+0x272>

	}else if( (0.80 < divAdcData) && (divAdcData <= 1.30) ){
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f7fe fb0d 	bl	8000418 <__aeabi_f2d>
 8001dfe:	a336      	add	r3, pc, #216	; (adr r3, 8001ed8 <TSL2561_calculateLux+0x2b0>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fdf0 	bl	80009e8 <__aeabi_dcmpgt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d033      	beq.n	8001e76 <TSL2561_calculateLux+0x24e>
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	f7fe fb02 	bl	8000418 <__aeabi_f2d>
 8001e14:	a336      	add	r3, pc, #216	; (adr r3, 8001ef0 <TSL2561_calculateLux+0x2c8>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fdd1 	bl	80009c0 <__aeabi_dcmple>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d028      	beq.n	8001e76 <TSL2561_calculateLux+0x24e>

		*luxVal = (0.00146 * adcData[0]) - (0.00112 * adcData[1]);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fae3 	bl	80003f4 <__aeabi_i2d>
 8001e2e:	a332      	add	r3, pc, #200	; (adr r3, 8001ef8 <TSL2561_calculateLux+0x2d0>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fb48 	bl	80004c8 <__aeabi_dmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	4625      	mov	r5, r4
 8001e3e:	461c      	mov	r4, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3302      	adds	r3, #2
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fad4 	bl	80003f4 <__aeabi_i2d>
 8001e4c:	a32c      	add	r3, pc, #176	; (adr r3, 8001f00 <TSL2561_calculateLux+0x2d8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fb39 	bl	80004c8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe f97b 	bl	8000158 <__aeabi_dsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	4618      	mov	r0, r3
 8001e68:	4621      	mov	r1, r4
 8001e6a:	f7fe fddd 	bl	8000a28 <__aeabi_d2f>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e011      	b.n	8001e9a <TSL2561_calculateLux+0x272>

	}else if( divAdcData > 1.30 ){
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	f7fe face 	bl	8000418 <__aeabi_f2d>
 8001e7c:	a31c      	add	r3, pc, #112	; (adr r3, 8001ef0 <TSL2561_calculateLux+0x2c8>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fdb1 	bl	80009e8 <__aeabi_dcmpgt>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <TSL2561_calculateLux+0x26e>

		*luxVal = 0;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e001      	b.n	8001e9a <TSL2561_calculateLux+0x272>

	}else{

		// error
		error = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]

	}

	return error;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]

}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ea6:	bf00      	nop
 8001ea8:	77318fc5 	.word	0x77318fc5
 8001eac:	3f9f212d 	.word	0x3f9f212d
 8001eb0:	c8b43958 	.word	0xc8b43958
 8001eb4:	3fafbe76 	.word	0x3fafbe76
 8001eb8:	66666666 	.word	0x66666666
 8001ebc:	3ff66666 	.word	0x3ff66666
 8001ec0:	b851eb85 	.word	0xb851eb85
 8001ec4:	3fe3851e 	.word	0x3fe3851e
 8001ec8:	8db8bac7 	.word	0x8db8bac7
 8001ecc:	3f96f006 	.word	0x3f96f006
 8001ed0:	c8b43958 	.word	0xc8b43958
 8001ed4:	3f9fbe76 	.word	0x3f9fbe76
 8001ed8:	9999999a 	.word	0x9999999a
 8001edc:	3fe99999 	.word	0x3fe99999
 8001ee0:	eb1c432d 	.word	0xeb1c432d
 8001ee4:	3f8a36e2 	.word	0x3f8a36e2
 8001ee8:	3d07c84b 	.word	0x3d07c84b
 8001eec:	3f8f559b 	.word	0x3f8f559b
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	3ff4cccc 	.word	0x3ff4cccc
 8001ef8:	102363b2 	.word	0x102363b2
 8001efc:	3f57ebaf 	.word	0x3f57ebaf
 8001f00:	d7c6fbd2 	.word	0xd7c6fbd2
 8001f04:	3f52599e 	.word	0x3f52599e

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <TTP223B_init>:
#include "envmonitor.h"
#include "ttp223b.h"

uint8_t TTP223B_init(void){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <TTP223B_init+0x48>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <TTP223B_init+0x48>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	6193      	str	r3, [r2, #24]
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <TTP223B_init+0x48>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f36:	2301      	movs	r3, #1
 8001f38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <TTP223B_init+0x4c>)
 8001f3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <TTP223B_init+0x50>)
 8001f48:	f000 f95c 	bl	8002204 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f4c:	2006      	movs	r0, #6
 8001f4e:	f000 f94a 	bl	80021e6 <HAL_NVIC_EnableIRQ>

	return error;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]

}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40011000 	.word	0x40011000

08001f68 <EXTI0_IRQHandler>:

/* NOTE: This is IRQHandler */
void EXTI0_IRQHandler(void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);	/* NOTE: This calls HAL_GPIO_EXTI_Callback function */
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f000 fabf 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_EXTI_Callback>:

/* NOTE: This determines the GPIO_Pin, occuring interrupt */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_GPIO_EXTI_Callback+0x1e>

		envmonitor.sensor.ttp223b.touchState ^= 1;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001f94:	731a      	strb	r2, [r3, #12]

	}

}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000090 	.word	0x20000090

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_Init+0x28>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <HAL_Init+0x28>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f000 f8ef 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fc4e 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc0:	f7ff fb9e 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000

08001fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x1c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	20001890 	.word	0x20001890

08001ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_GetTick+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20001890 	.word	0x20001890

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_Delay+0x40>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffe0 	bl	8001ff4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000004 	.word	0x20000004

0800204c <NVIC_SetPriorityGrouping>:
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4906      	ldr	r1, [pc, #24]	; (80020dc <NVIC_EnableIRQ+0x2c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0b      	bge.n	800210c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <NVIC_SetPriority+0x4c>)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	3b04      	subs	r3, #4
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210a:	e009      	b.n	8002120 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <NVIC_SetPriority+0x50>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00
 8002130:	e000e100 	.word	0xe000e100

08002134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f1c3 0307 	rsb	r3, r3, #7
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf28      	it	cs
 8002152:	2304      	movcs	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	2b06      	cmp	r3, #6
 800215c:	d902      	bls.n	8002164 <NVIC_EncodePriority+0x30>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3b03      	subs	r3, #3
 8002162:	e000      	b.n	8002166 <NVIC_EncodePriority+0x32>
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	401a      	ands	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43d9      	mvns	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	4313      	orrs	r3, r2
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff53 	bl	800204c <NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff68 	bl	8002094 <NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ffb2 	bl	8002134 <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff81 	bl	80020e0 <NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5b 	bl	80020b0 <NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e127      	b.n	8002478 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002228:	2201      	movs	r2, #1
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8116 	bne.w	8002472 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b12      	cmp	r3, #18
 800224c:	d034      	beq.n	80022b8 <HAL_GPIO_Init+0xb4>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d80d      	bhi.n	800226e <HAL_GPIO_Init+0x6a>
 8002252:	2b02      	cmp	r3, #2
 8002254:	d02b      	beq.n	80022ae <HAL_GPIO_Init+0xaa>
 8002256:	2b02      	cmp	r3, #2
 8002258:	d804      	bhi.n	8002264 <HAL_GPIO_Init+0x60>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d031      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
 800225e:	2b01      	cmp	r3, #1
 8002260:	d01c      	beq.n	800229c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002262:	e048      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002264:	2b03      	cmp	r3, #3
 8002266:	d043      	beq.n	80022f0 <HAL_GPIO_Init+0xec>
 8002268:	2b11      	cmp	r3, #17
 800226a:	d01b      	beq.n	80022a4 <HAL_GPIO_Init+0xa0>
          break;
 800226c:	e043      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_GPIO_Init+0x288>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d026      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
 8002274:	4a85      	ldr	r2, [pc, #532]	; (800248c <HAL_GPIO_Init+0x288>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d806      	bhi.n	8002288 <HAL_GPIO_Init+0x84>
 800227a:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_GPIO_Init+0x28c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d020      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
 8002280:	4a84      	ldr	r2, [pc, #528]	; (8002494 <HAL_GPIO_Init+0x290>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
          break;
 8002286:	e036      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002288:	4a83      	ldr	r2, [pc, #524]	; (8002498 <HAL_GPIO_Init+0x294>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
 800228e:	4a83      	ldr	r2, [pc, #524]	; (800249c <HAL_GPIO_Init+0x298>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d016      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
 8002294:	4a82      	ldr	r2, [pc, #520]	; (80024a0 <HAL_GPIO_Init+0x29c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0xbe>
          break;
 800229a:	e02c      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e028      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	3304      	adds	r3, #4
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e023      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e01e      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	330c      	adds	r3, #12
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e019      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ca:	2304      	movs	r3, #4
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e012      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	611a      	str	r2, [r3, #16]
          break;
 80022e2:	e008      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	615a      	str	r2, [r3, #20]
          break;
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d801      	bhi.n	8002300 <HAL_GPIO_Init+0xfc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	e001      	b.n	8002304 <HAL_GPIO_Init+0x100>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d802      	bhi.n	8002312 <HAL_GPIO_Init+0x10e>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x114>
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3b08      	subs	r3, #8
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	210f      	movs	r1, #15
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	6a39      	ldr	r1, [r7, #32]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8096 	beq.w	8002472 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4a56      	ldr	r2, [pc, #344]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6193      	str	r3, [r2, #24]
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_GPIO_Init+0x2a0>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800235e:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_GPIO_Init+0x2a8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1ae>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <HAL_GPIO_Init+0x2ac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1aa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <HAL_GPIO_Init+0x2b0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1a6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2b4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1a2>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x1b0>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x1b0>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x1b0>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x1b0>
 80023b2:	2300      	movs	r3, #0
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	f002 0203 	and.w	r2, r2, #3
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80023c4:	4938      	ldr	r1, [pc, #224]	; (80024a8 <HAL_GPIO_Init+0x2a4>)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	4931      	ldr	r1, [pc, #196]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	492c      	ldr	r1, [pc, #176]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002414:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	43db      	mvns	r3, r3
 800241c:	4927      	ldr	r1, [pc, #156]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800241e:	4013      	ands	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	43db      	mvns	r3, r3
 8002444:	491d      	ldr	r1, [pc, #116]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002446:	4013      	ands	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	4918      	ldr	r1, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	60cb      	str	r3, [r1, #12]
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	43db      	mvns	r3, r3
 800246c:	4913      	ldr	r1, [pc, #76]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800246e:	4013      	ands	r3, r2
 8002470:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	3301      	adds	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	2b0f      	cmp	r3, #15
 800247c:	f67f aed4 	bls.w	8002228 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002480:	bf00      	nop
 8002482:	372c      	adds	r7, #44	; 0x2c
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	10210000 	.word	0x10210000
 8002490:	10110000 	.word	0x10110000
 8002494:	10120000 	.word	0x10120000
 8002498:	10310000 	.word	0x10310000
 800249c:	10320000 	.word	0x10320000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40010800 	.word	0x40010800
 80024b0:	40010c00 	.word	0x40010c00
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40011400 	.word	0x40011400
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fd32 	bl	8001f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff f908 	bl	8001764 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800256c:	f001 faf4 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8002570:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_I2C_Init+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d807      	bhi.n	800258c <HAL_I2C_Init+0x6c>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_I2C_Init+0x1f8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e006      	b.n	800259a <HAL_I2C_Init+0x7a>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4a63      	ldr	r2, [pc, #396]	; (800271c <HAL_I2C_Init+0x1fc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0b3      	b.n	800270a <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <HAL_I2C_Init+0x200>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_I2C_Init+0x1f4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d802      	bhi.n	80025c6 <HAL_I2C_Init+0xa6>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3301      	adds	r3, #1
 80025c4:	e009      	b.n	80025da <HAL_I2C_Init+0xba>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	4a54      	ldr	r2, [pc, #336]	; (8002724 <HAL_I2C_Init+0x204>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	3301      	adds	r3, #1
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_I2C_Init+0x1f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d80d      	bhi.n	8002606 <HAL_I2C_Init+0xe6>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf38      	it	cc
 8002602:	2304      	movcc	r3, #4
 8002604:	e04f      	b.n	80026a6 <HAL_I2C_Init+0x186>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d111      	bne.n	8002632 <HAL_I2C_Init+0x112>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1e59      	subs	r1, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e012      	b.n	8002658 <HAL_I2C_Init+0x138>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1e59      	subs	r1, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009a      	lsls	r2, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Init+0x140>
 800265c:	2301      	movs	r3, #1
 800265e:	e022      	b.n	80026a6 <HAL_I2C_Init+0x186>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10e      	bne.n	8002686 <HAL_I2C_Init+0x166>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	fbb1 f3f3 	udiv	r3, r1, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002684:	e00f      	b.n	80026a6 <HAL_I2C_Init+0x186>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1e59      	subs	r1, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	009a      	lsls	r2, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	fbb1 f3f3 	udiv	r3, r1, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6919      	ldr	r1, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6959      	ldr	r1, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	460b      	mov	r3, r1
 8002736:	817b      	strh	r3, [r7, #10]
 8002738:	4613      	mov	r3, r2
 800273a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002740:	f7ff fc58 	bl	8001ff4 <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	f040 80ee 	bne.w	8002930 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2319      	movs	r3, #25
 800275a:	2201      	movs	r2, #1
 800275c:	4977      	ldr	r1, [pc, #476]	; (800293c <HAL_I2C_Master_Transmit+0x214>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fc74 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	e0e1      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_I2C_Master_Transmit+0x54>
 8002778:	2302      	movs	r3, #2
 800277a:	e0da      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d007      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2210      	movs	r2, #16
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_I2C_Master_Transmit+0x218>)
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e4:	8979      	ldrh	r1, [r7, #10]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fae4 	bl	8002db8 <I2C_MasterRequestWrite>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d105      	bne.n	800280a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e093      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e08d      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800282c:	e066      	b.n	80028fc <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	6a39      	ldr	r1, [r7, #32]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fcc9 	bl	80031ca <I2C_WaitOnTXEFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b04      	cmp	r3, #4
 8002844:	d109      	bne.n	800285a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002854:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06b      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e069      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6251      	str	r1, [r2, #36]	; 0x24
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d119      	bne.n	80028cc <HAL_I2C_Master_Transmit+0x1a4>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c59      	adds	r1, r3, #1
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6251      	str	r1, [r2, #36]	; 0x24
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fcb7 	bl	8003244 <I2C_WaitOnBTFFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d109      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01c      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e01a      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d194      	bne.n	800282e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	00100002 	.word	0x00100002
 8002940:	ffff0000 	.word	0xffff0000

08002944 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800295c:	f7ff fb4a 	bl	8001ff4 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	f040 821d 	bne.w	8002daa <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2319      	movs	r3, #25
 8002976:	2201      	movs	r2, #1
 8002978:	4987      	ldr	r1, [pc, #540]	; (8002b98 <HAL_I2C_Master_Receive+0x254>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb66 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e210      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2C_Master_Receive+0x54>
 8002994:	2302      	movs	r3, #2
 8002996:	e209      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d007      	beq.n	80029be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2222      	movs	r2, #34	; 0x22
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2210      	movs	r2, #16
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	893a      	ldrh	r2, [r7, #8]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_I2C_Master_Receive+0x258>)
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa58 	bl	8002ebc <I2C_MasterRequestRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00f      	beq.n	8002a32 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d105      	bne.n	8002a26 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c2      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1bc      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e190      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d11d      	bne.n	8002aa6 <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
 8002aa4:	e16e      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d11d      	bne.n	8002aea <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002abc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002abe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae6:	b662      	cpsie	i
 8002ae8:	e14c      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8002b10:	e138      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	f200 80ef 	bhi.w	8002cfa <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d127      	bne.n	8002b74 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fbc8 	bl	80032be <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e135      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e133      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6918      	ldr	r0, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	6251      	str	r1, [r2, #36]	; 0x24
 8002b54:	b2c2      	uxtb	r2, r0
 8002b56:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b72:	e107      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d14c      	bne.n	8002c16 <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	2200      	movs	r2, #0
 8002b84:	4906      	ldr	r1, [pc, #24]	; (8002ba0 <HAL_I2C_Master_Receive+0x25c>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa60 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e10a      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
 8002b96:	bf00      	nop
 8002b98:	00100002 	.word	0x00100002
 8002b9c:	ffff0000 	.word	0xffff0000
 8002ba0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6918      	ldr	r0, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c59      	adds	r1, r3, #1
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6251      	str	r1, [r2, #36]	; 0x24
 8002bc6:	b2c2      	uxtb	r2, r0
 8002bc8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6918      	ldr	r0, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c59      	adds	r1, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6251      	str	r1, [r2, #36]	; 0x24
 8002bf6:	b2c2      	uxtb	r2, r0
 8002bf8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c14:	e0b6      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4965      	ldr	r1, [pc, #404]	; (8002db4 <HAL_I2C_Master_Receive+0x470>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa13 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0bd      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6918      	ldr	r0, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c59      	adds	r1, r3, #1
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6251      	str	r1, [r2, #36]	; 0x24
 8002c52:	b2c2      	uxtb	r2, r0
 8002c54:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	2200      	movs	r2, #0
 8002c78:	494e      	ldr	r1, [pc, #312]	; (8002db4 <HAL_I2C_Master_Receive+0x470>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9e6 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e090      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c98:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6918      	ldr	r0, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6251      	str	r1, [r2, #36]	; 0x24
 8002caa:	b2c2      	uxtb	r2, r0
 8002cac:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6918      	ldr	r0, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c59      	adds	r1, r3, #1
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	6251      	str	r1, [r2, #36]	; 0x24
 8002cda:	b2c2      	uxtb	r2, r0
 8002cdc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cf8:	e044      	b.n	8002d84 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fadd 	bl	80032be <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d101      	bne.n	8002d16 <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04a      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e048      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6918      	ldr	r0, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6251      	str	r1, [r2, #36]	; 0x24
 8002d2a:	b2c2      	uxtb	r2, r0
 8002d2c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d116      	bne.n	8002d84 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6918      	ldr	r0, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c59      	adds	r1, r3, #1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6251      	str	r1, [r2, #36]	; 0x24
 8002d66:	b2c2      	uxtb	r2, r0
 8002d68:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f aec2 	bne.w	8002b12 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3728      	adds	r7, #40	; 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	00010004 	.word	0x00010004

08002db8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d006      	beq.n	8002de2 <I2C_MasterRequestWrite+0x2a>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d003      	beq.n	8002de2 <I2C_MasterRequestWrite+0x2a>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de0:	d108      	bne.n	8002df4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e00b      	b.n	8002e0c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	2b12      	cmp	r3, #18
 8002dfa:	d107      	bne.n	8002e0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f917 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e041      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e30:	d108      	bne.n	8002e44 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e021      	b.n	8002e88 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	11db      	asrs	r3, r3, #7
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0306 	and.w	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f063 030f 	orn	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4914      	ldr	r1, [pc, #80]	; (8002eb4 <I2C_MasterRequestWrite+0xfc>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f943 	bl	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d101      	bne.n	8002e7a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e018      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e016      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <I2C_MasterRequestWrite+0x100>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f92d 	bl	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d101      	bne.n	8002ea6 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e002      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e000      	b.n	8002eac <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00010008 	.word	0x00010008
 8002eb8:	00010002 	.word	0x00010002

08002ebc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d006      	beq.n	8002ef6 <I2C_MasterRequestRead+0x3a>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d003      	beq.n	8002ef6 <I2C_MasterRequestRead+0x3a>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef4:	d108      	bne.n	8002f08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00b      	b.n	8002f20 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d107      	bne.n	8002f20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f88d 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e07f      	b.n	800303c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f44:	d108      	bne.n	8002f58 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e05f      	b.n	8003018 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	11db      	asrs	r3, r3, #7
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0306 	and.w	r3, r3, #6
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f063 030f 	orn	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4933      	ldr	r1, [pc, #204]	; (8003044 <I2C_MasterRequestRead+0x188>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8b9 	bl	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d101      	bne.n	8002f8e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e056      	b.n	800303c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e054      	b.n	800303c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4929      	ldr	r1, [pc, #164]	; (8003048 <I2C_MasterRequestRead+0x18c>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f8a3 	bl	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d101      	bne.n	8002fba <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e040      	b.n	800303c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e03e      	b.n	800303c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f82b 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e01d      	b.n	800303c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	11db      	asrs	r3, r3, #7
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 030e 	orn	r3, r3, #14
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	490a      	ldr	r1, [pc, #40]	; (8003048 <I2C_MasterRequestRead+0x18c>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f865 	bl	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d101      	bne.n	8003036 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e002      	b.n	800303c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e000      	b.n	800303c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	00010008 	.word	0x00010008
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800305c:	e01f      	b.n	800309e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d01b      	beq.n	800309e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 800306c:	f7fe ffc2 	bl	8001ff4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d210      	bcs.n	800309e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e023      	b.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10d      	bne.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0x78>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	e00c      	b.n	80030de <I2C_WaitOnFlagUntilTimeout+0x92>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d0bc      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fc:	e040      	b.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d11c      	bne.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003126:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2204      	movs	r2, #4
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e03c      	b.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d017      	beq.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8003156:	f7fe ff4d 	bl	8001ff4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d20c      	bcs.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e020      	b.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10c      	bne.n	80031a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	43da      	mvns	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e00b      	b.n	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d19e      	bne.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d6:	e029      	b.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8ba 	bl	8003352 <I2C_IsAcknowledgeFailed>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e029      	b.n	800323c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d01d      	beq.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031f6:	f7fe fefd 	bl	8001ff4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d212      	bcs.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e007      	b.n	800323c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d1ce      	bne.n	80031d8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003250:	e029      	b.n	80032a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f87d 	bl	8003352 <I2C_IsAcknowledgeFailed>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e029      	b.n	80032b6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d01d      	beq.n	80032a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003270:	f7fe fec0 	bl	8001ff4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d212      	bcs.n	80032a6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e007      	b.n	80032b6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d1ce      	bne.n	8003252 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ca:	e036      	b.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d114      	bne.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0210 	mvn.w	r2, #16
 80032e2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e022      	b.n	800334a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800330a:	f7fe fe73 	bl	8001ff4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20f      	bcs.n	800333a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e007      	b.n	800334a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d1c1      	bne.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003368:	d114      	bne.n	8003394 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003372:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2204      	movs	r2, #4
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8087 	beq.w	80034c8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033ba:	4b92      	ldr	r3, [pc, #584]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d00c      	beq.n	80033e0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c6:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d112      	bne.n	80033f8 <HAL_RCC_OscConfig+0x58>
 80033d2:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d10b      	bne.n	80033f8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d06c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x126>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d168      	bne.n	80034c6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e22d      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d106      	bne.n	8003410 <HAL_RCC_OscConfig+0x70>
 8003402:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7f      	ldr	r2, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e02e      	b.n	800346e <HAL_RCC_OscConfig+0xce>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x92>
 8003418:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a79      	ldr	r2, [pc, #484]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b77      	ldr	r3, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a76      	ldr	r2, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	e01d      	b.n	800346e <HAL_RCC_OscConfig+0xce>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800343a:	d10c      	bne.n	8003456 <HAL_RCC_OscConfig+0xb6>
 800343c:	4b71      	ldr	r3, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a70      	ldr	r2, [pc, #448]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6d      	ldr	r2, [pc, #436]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0xce>
 8003456:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6a      	ldr	r2, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a67      	ldr	r2, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d013      	beq.n	800349e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fdbd 	bl	8001ff4 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347e:	f7fe fdb9 	bl	8001ff4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	; 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1e1      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003490:	4b5c      	ldr	r3, [pc, #368]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0xde>
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fda9 	bl	8001ff4 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a6:	f7fe fda5 	bl	8001ff4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	; 0x64
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1cd      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b8:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x106>
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d063      	beq.n	800359c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034d4:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d11c      	bne.n	8003526 <HAL_RCC_OscConfig+0x186>
 80034ec:	4b45      	ldr	r3, [pc, #276]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_OscConfig+0x170>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e1a1      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b3c      	ldr	r3, [pc, #240]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4939      	ldr	r1, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003524:	e03a      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x268>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe fd5e 	bl	8001ff4 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe fd5a 	bl	8001ff4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e182      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4926      	ldr	r1, [pc, #152]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_RCC_OscConfig+0x268>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe fd3d 	bl	8001ff4 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357e:	f7fe fd39 	bl	8001ff4 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e161      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d039      	beq.n	800361c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d019      	beq.n	80035e4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fd1d 	bl	8001ff4 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fd19 	bl	8001ff4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e141      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCC_OscConfig+0x264>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80035dc:	2001      	movs	r0, #1
 80035de:	f000 fb13 	bl	8003c08 <RCC_Delay>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x26c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fd03 	bl	8001ff4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fe fcff 	bl	8001ff4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e127      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
 8003604:	40021000 	.word	0x40021000
 8003608:	42420000 	.word	0x42420000
 800360c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a6 	beq.w	8003776 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b8b      	ldr	r3, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a87      	ldr	r2, [pc, #540]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCC_OscConfig+0x4c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b7f      	ldr	r3, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x4c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7e      	ldr	r2, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x4c0>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fe fcc1 	bl	8001ff4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fe fcbd 	bl	8001ff4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0e5      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b75      	ldr	r3, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x4c0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x30a>
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e02d      	b.n	8003706 <HAL_RCC_OscConfig+0x366>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x32c>
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	e01c      	b.n	8003706 <HAL_RCC_OscConfig+0x366>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d10c      	bne.n	80036ee <HAL_RCC_OscConfig+0x34e>
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a60      	ldr	r2, [pc, #384]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	e00b      	b.n	8003706 <HAL_RCC_OscConfig+0x366>
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d015      	beq.n	800373a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fe fc71 	bl	8001ff4 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe fc6d 	bl	8001ff4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e093      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ee      	beq.n	8003716 <HAL_RCC_OscConfig+0x376>
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7fe fc5b 	bl	8001ff4 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fc57 	bl	8001ff4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e07d      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ee      	bne.n	8003742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d069      	beq.n	8003852 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d061      	beq.n	800384e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d146      	bne.n	8003820 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fc2c 	bl	8001ff4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fc28 	bl	8001ff4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e050      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d108      	bne.n	80037da <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4921      	ldr	r1, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a19      	ldr	r1, [r3, #32]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	430b      	orrs	r3, r1
 80037ec:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fbfc 	bl	8001ff4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fbf8 	bl	8001ff4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e020      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x460>
 800381e:	e018      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe fbe5 	bl	8001ff4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe fbe1 	bl	8001ff4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e009      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x4bc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x48e>
 800384c:	e001      	b.n	8003852 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	42420060 	.word	0x42420060

08003868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003876:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d910      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003884:	4b7a      	ldr	r3, [pc, #488]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 0207 	bic.w	r2, r3, #7
 800388c:	4978      	ldr	r1, [pc, #480]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003894:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0e0      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038be:	4b6d      	ldr	r3, [pc, #436]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a6c      	ldr	r2, [pc, #432]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038c4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038c8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d6:	4b67      	ldr	r3, [pc, #412]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4a66      	ldr	r2, [pc, #408]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038dc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038e0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e2:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4961      	ldr	r1, [pc, #388]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d06a      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d115      	bne.n	8003940 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0a7      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	4b54      	ldr	r3, [pc, #336]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e09b      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e093      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003940:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 0203 	bic.w	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4949      	ldr	r1, [pc, #292]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003952:	f7fe fb4f 	bl	8001ff4 <HAL_GetTick>
 8003956:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d112      	bne.n	8003986 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003962:	f7fe fb47 	bl	8001ff4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e077      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003978:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	d1ee      	bne.n	8003962 <HAL_RCC_ClockConfig+0xfa>
 8003984:	e027      	b.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d11d      	bne.n	80039ca <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fe fb30 	bl	8001ff4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e060      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a6:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d1ee      	bne.n	8003990 <HAL_RCC_ClockConfig+0x128>
 80039b2:	e010      	b.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fb1e 	bl	8001ff4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04e      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ee      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80039d6:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d210      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e4:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 0207 	bic.w	r2, r3, #7
 80039ec:	4920      	ldr	r1, [pc, #128]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCC_ClockConfig+0x208>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e030      	b.n	8003a68 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a12:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	4915      	ldr	r1, [pc, #84]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	490d      	ldr	r1, [pc, #52]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a44:	f000 f81c 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x20c>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_RCC_ClockConfig+0x210>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_RCC_ClockConfig+0x214>)
 8003a5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7fd fefb 	bl	800185c <HAL_InitTick>
  
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08007dac 	.word	0x08007dac
 8003a7c:	20000000 	.word	0x20000000

08003a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a80:	b490      	push	{r4, r7}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a88:	1d3c      	adds	r4, r7, #4
 8003a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8003abe:	e02d      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	e02d      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	0c9b      	lsrs	r3, r3, #18
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ad8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0c5b      	lsrs	r3, r3, #17
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003af2:	4413      	add	r3, r2
 8003af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003af8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003afe:	fb02 f203 	mul.w	r2, r2, r3
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e004      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	623b      	str	r3, [r7, #32]
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b1e:	623b      	str	r3, [r7, #32]
      break;
 8003b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b22:	6a3b      	ldr	r3, [r7, #32]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3728      	adds	r7, #40	; 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc90      	pop	{r4, r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	08007cd0 	.word	0x08007cd0
 8003b34:	08007ce0 	.word	0x08007ce0
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	007a1200 	.word	0x007a1200
 8003b40:	003d0900 	.word	0x003d0900

08003b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b48:	4b02      	ldr	r3, [pc, #8]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	20000000 	.word	0x20000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff2 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08007dbc 	.word	0x08007dbc

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffde 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0adb      	lsrs	r3, r3, #11
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08007dbc 	.word	0x08007dbc

08003ba8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_GetClockConfig+0x58>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_RCC_GetClockConfig+0x58>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_GetClockConfig+0x58>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_GetClockConfig+0x58>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0207 	and.w	r2, r3, #7
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40022000 	.word	0x40022000

08003c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <RCC_Delay+0x34>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <RCC_Delay+0x38>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a5b      	lsrs	r3, r3, #9
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003c24:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f9      	bne.n	8003c24 <RCC_Delay+0x1c>
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e01d      	b.n	8003c92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f815 	bl	8003c9a <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 f958 	bl	8003f38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0202 	mvn.w	r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8ed 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8e0 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8ef 	bl	8003f14 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8c3 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8b6 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8c5 	bl	8003f14 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0208 	mvn.w	r2, #8
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2204      	movs	r2, #4
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f899 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f88c 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f89b 	bl	8003f14 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0210 	mvn.w	r2, #16
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f86f 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f862 	bl	8003ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f871 	bl	8003f14 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0201 	mvn.w	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fa90 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8c3 	bl	8004016 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f835 	bl	8003f26 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0220 	mvn.w	r2, #32
 8003ee0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f88e 	bl	8004004 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <TIM_Base_SetConfig+0xc0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0x34>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0x34>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <TIM_Base_SetConfig+0xc4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x34>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a26      	ldr	r2, [pc, #152]	; (8004000 <TIM_Base_SetConfig+0xc8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d108      	bne.n	8003f7e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <TIM_Base_SetConfig+0xc0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_Base_SetConfig+0x66>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0x66>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <TIM_Base_SetConfig+0xc4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0x66>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <TIM_Base_SetConfig+0xc8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <TIM_Base_SetConfig+0xc0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e03f      	b.n	80040ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fbc6 	bl	80017e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800406a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f829 	bl	80040c4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004090:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004106:	f023 030c 	bic.w	r3, r3, #12
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	430b      	orrs	r3, r1
 8004112:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6f      	ldr	r2, [pc, #444]	; (80042ec <UART_SetConfig+0x228>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d16b      	bne.n	800420c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004134:	f7ff fd24 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8004138:	4602      	mov	r2, r0
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009a      	lsls	r2, r3, #2
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	4a68      	ldr	r2, [pc, #416]	; (80042f0 <UART_SetConfig+0x22c>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	011c      	lsls	r4, r3, #4
 8004158:	f7ff fd12 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 800415c:	4602      	mov	r2, r0
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	009a      	lsls	r2, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004172:	f7ff fd05 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8004176:	4602      	mov	r2, r0
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009a      	lsls	r2, r3, #2
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <UART_SetConfig+0x22c>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2264      	movs	r2, #100	; 0x64
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	1aeb      	subs	r3, r5, r3
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	3332      	adds	r3, #50	; 0x32
 80041a0:	4a53      	ldr	r2, [pc, #332]	; (80042f0 <UART_SetConfig+0x22c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	441c      	add	r4, r3
 80041ae:	f7ff fce7 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80041c8:	f7ff fcda 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	009a      	lsls	r2, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a43      	ldr	r2, [pc, #268]	; (80042f0 <UART_SetConfig+0x22c>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	2264      	movs	r2, #100	; 0x64
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	1aeb      	subs	r3, r5, r3
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	3332      	adds	r3, #50	; 0x32
 80041f6:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <UART_SetConfig+0x22c>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4422      	add	r2, r4
 8004208:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800420a:	e06a      	b.n	80042e2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800420c:	f7ff fca4 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8004210:	4602      	mov	r2, r0
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009a      	lsls	r2, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	4a32      	ldr	r2, [pc, #200]	; (80042f0 <UART_SetConfig+0x22c>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	011c      	lsls	r4, r3, #4
 8004230:	f7ff fc92 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8004234:	4602      	mov	r2, r0
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009a      	lsls	r2, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	fbb2 f5f3 	udiv	r5, r2, r3
 800424a:	f7ff fc85 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 800424e:	4602      	mov	r2, r0
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <UART_SetConfig+0x22c>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2264      	movs	r2, #100	; 0x64
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	1aeb      	subs	r3, r5, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <UART_SetConfig+0x22c>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	441c      	add	r4, r3
 8004286:	f7ff fc67 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 800428a:	4602      	mov	r2, r0
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009a      	lsls	r2, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fbb2 f5f3 	udiv	r5, r2, r3
 80042a0:	f7ff fc5a 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009a      	lsls	r2, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <UART_SetConfig+0x22c>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	2264      	movs	r2, #100	; 0x64
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	1aeb      	subs	r3, r5, r3
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	3332      	adds	r3, #50	; 0x32
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <UART_SetConfig+0x22c>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	f003 020f 	and.w	r2, r3, #15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4422      	add	r2, r4
 80042e0:	609a      	str	r2, [r3, #8]
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40013800 	.word	0x40013800
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80042f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80042f6:	e003      	b.n	8004300 <LoopCopyDataInit>

080042f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80042fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80042fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80042fe:	3104      	adds	r1, #4

08004300 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004300:	480a      	ldr	r0, [pc, #40]	; (800432c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004304:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004306:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004308:	d3f6      	bcc.n	80042f8 <CopyDataInit>
  ldr r2, =_sbss
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800430c:	e002      	b.n	8004314 <LoopFillZerobss>

0800430e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800430e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004310:	f842 3b04 	str.w	r3, [r2], #4

08004314 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004316:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004318:	d3f9      	bcc.n	800430e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800431a:	f7fd fb1f 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800431e:	f002 fc4b 	bl	8006bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004322:	f7fd f9dd 	bl	80016e0 <main>
  bx lr
 8004326:	4770      	bx	lr
  ldr r3, =_sidata
 8004328:	08007e28 	.word	0x08007e28
  ldr r0, =_sdata
 800432c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004330:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8004334:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8004338:	2000193c 	.word	0x2000193c

0800433c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800433c:	e7fe      	b.n	800433c <ADC1_2_IRQHandler>
	...

08004340 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004344:	4803      	ldr	r0, [pc, #12]	; (8004354 <_cbSendSystemDesc+0x14>)
 8004346:	f001 f8d3 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800434a:	4803      	ldr	r0, [pc, #12]	; (8004358 <_cbSendSystemDesc+0x18>)
 800434c:	f001 f8d0 	bl	80054f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}
 8004354:	08007ce4 	.word	0x08007ce4
 8004358:	08007d1c 	.word	0x08007d1c

0800435c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <SEGGER_SYSVIEW_Conf+0x20>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <SEGGER_SYSVIEW_Conf+0x20>)
 8004366:	6819      	ldr	r1, [r3, #0]
 8004368:	4b05      	ldr	r3, [pc, #20]	; (8004380 <SEGGER_SYSVIEW_Conf+0x24>)
 800436a:	4a06      	ldr	r2, [pc, #24]	; (8004384 <SEGGER_SYSVIEW_Conf+0x28>)
 800436c:	f000 fd4a 	bl	8004e04 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004370:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004374:	f000 fd84 	bl	8004e80 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000000 	.word	0x20000000
 8004380:	08004341 	.word	0x08004341
 8004384:	08007dc4 	.word	0x08007dc4

08004388 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	b085      	sub	sp, #20
 800438c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	e034      	b.n	80043fe <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004394:	491e      	ldr	r1, [pc, #120]	; (8004410 <_cbSendTaskList+0x88>)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	491a      	ldr	r1, [pc, #104]	; (8004410 <_cbSendTaskList+0x88>)
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3304      	adds	r3, #4
 80043b4:	681c      	ldr	r4, [r3, #0]
 80043b6:	4916      	ldr	r1, [pc, #88]	; (8004410 <_cbSendTaskList+0x88>)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3308      	adds	r3, #8
 80043c6:	681d      	ldr	r5, [r3, #0]
 80043c8:	4911      	ldr	r1, [pc, #68]	; (8004410 <_cbSendTaskList+0x88>)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	330c      	adds	r3, #12
 80043d8:	681e      	ldr	r6, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <_cbSendTaskList+0x88>)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3310      	adds	r3, #16
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4633      	mov	r3, r6
 80043f0:	462a      	mov	r2, r5
 80043f2:	4621      	mov	r1, r4
 80043f4:	f000 f8b4 	bl	8004560 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3301      	adds	r3, #1
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_cbSendTaskList+0x8c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d3c5      	bcc.n	8004394 <_cbSendTaskList+0xc>
  }
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004410:	200000a0 	.word	0x200000a0
 8004414:	20000140 	.word	0x20000140

08004418 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800441e:	f001 fe1f 	bl	8006060 <xTaskGetTickCountFromISR>
 8004422:	4603      	mov	r3, r0
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800442c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004430:	462b      	mov	r3, r5
 8004432:	4634      	mov	r4, r6
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	0162      	lsls	r2, r4, #5
 800443e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	460b      	mov	r3, r1
 8004446:	4614      	mov	r4, r2
 8004448:	1b5b      	subs	r3, r3, r5
 800444a:	eb64 0406 	sbc.w	r4, r4, r6
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	00a2      	lsls	r2, r4, #2
 8004458:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800445c:	0099      	lsls	r1, r3, #2
 800445e:	460b      	mov	r3, r1
 8004460:	4614      	mov	r4, r2
 8004462:	195b      	adds	r3, r3, r5
 8004464:	eb44 0406 	adc.w	r4, r4, r6
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	00e2      	lsls	r2, r4, #3
 8004472:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004476:	00d9      	lsls	r1, r3, #3
 8004478:	460b      	mov	r3, r1
 800447a:	4614      	mov	r4, r2
 800447c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004480:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004484:	4618      	mov	r0, r3
 8004486:	4621      	mov	r1, r4
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004490 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800449e:	2205      	movs	r2, #5
 80044a0:	492b      	ldr	r1, [pc, #172]	; (8004550 <SYSVIEW_AddTask+0xc0>)
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f002 fbac 	bl	8006c00 <memcmp>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04b      	beq.n	8004546 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b07      	cmp	r3, #7
 80044b4:	d903      	bls.n	80044be <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80044b6:	4828      	ldr	r0, [pc, #160]	; (8004558 <SYSVIEW_AddTask+0xc8>)
 80044b8:	f001 faac 	bl	8005a14 <SEGGER_SYSVIEW_Warn>
    return;
 80044bc:	e044      	b.n	8004548 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4926      	ldr	r1, [pc, #152]	; (800455c <SYSVIEW_AddTask+0xcc>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4921      	ldr	r1, [pc, #132]	; (800455c <SYSVIEW_AddTask+0xcc>)
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3304      	adds	r3, #4
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	491b      	ldr	r1, [pc, #108]	; (800455c <SYSVIEW_AddTask+0xcc>)
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3308      	adds	r3, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4916      	ldr	r1, [pc, #88]	; (800455c <SYSVIEW_AddTask+0xcc>)
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	330c      	adds	r3, #12
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4910      	ldr	r1, [pc, #64]	; (800455c <SYSVIEW_AddTask+0xcc>)
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3310      	adds	r3, #16
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <SYSVIEW_AddTask+0xc4>)
 8004532:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f80e 	bl	8004560 <SYSVIEW_SendTaskInfo>
 8004544:	e000      	b.n	8004548 <SYSVIEW_AddTask+0xb8>
    return;
 8004546:	bf00      	nop

}
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	08007d2c 	.word	0x08007d2c
 8004554:	20000140 	.word	0x20000140
 8004558:	08007d34 	.word	0x08007d34
 800455c:	200000a0 	.word	0x200000a0

08004560 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	2214      	movs	r2, #20
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f002 fb5c 	bl	8006c34 <memset>
  TaskInfo.TaskID     = TaskID;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4618      	mov	r0, r3
 8004596:	f000 feb1 	bl	80052fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800459a:	bf00      	nop
 800459c:	3728      	adds	r7, #40	; 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <_DoInit+0x8c>)
 80045ac:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2203      	movs	r2, #3
 80045b2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2203      	movs	r2, #3
 80045b8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <_DoInit+0x90>)
 80045be:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <_DoInit+0x94>)
 80045c4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <_DoInit+0x90>)
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a14      	ldr	r2, [pc, #80]	; (800463c <_DoInit+0x98>)
 80045ea:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2210      	movs	r2, #16
 80045f0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3307      	adds	r3, #7
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <_DoInit+0x9c>)
 800460a:	6810      	ldr	r0, [r2, #0]
 800460c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <_DoInit+0xa0>)
 8004612:	6810      	ldr	r0, [r2, #0]
 8004614:	6018      	str	r0, [r3, #0]
 8004616:	8891      	ldrh	r1, [r2, #4]
 8004618:	7992      	ldrb	r2, [r2, #6]
 800461a:	8099      	strh	r1, [r3, #4]
 800461c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	719a      	strb	r2, [r3, #6]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20001894 	.word	0x20001894
 8004634:	08007d84 	.word	0x08007d84
 8004638:	20000144 	.word	0x20000144
 800463c:	20000544 	.word	0x20000544
 8004640:	08007d90 	.word	0x08007d90
 8004644:	08007d94 	.word	0x08007d94

08004648 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8004654:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <SEGGER_RTT_ReadNoLock+0x100>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <SEGGER_RTT_ReadNoLock+0x18>
 800465c:	f7ff ffa2 	bl	80045a4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	3360      	adds	r3, #96	; 0x60
 800466c:	4a36      	ldr	r2, [pc, #216]	; (8004748 <SEGGER_RTT_ReadNoLock+0x100>)
 800466e:	4413      	add	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004686:	6a3a      	ldr	r2, [r7, #32]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d92a      	bls.n	80046e4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4293      	cmp	r3, r2
 800469e:	bf28      	it	cs
 80046a0:	4613      	movcs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	4413      	add	r3, r2
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4619      	mov	r1, r3
 80046b0:	69f8      	ldr	r0, [r7, #28]
 80046b2:	f002 fab4 	bl	8006c1e <memcpy>
    NumBytesRead += NumBytesRem;
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d101      	bne.n	80046e4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bf28      	it	cs
 80046f4:	4613      	movcs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d018      	beq.n	8004730 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	4413      	add	r3, r2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4619      	mov	r1, r3
 800470a:	69f8      	ldr	r0, [r7, #28]
 800470c:	f002 fa87 	bl	8006c1e <memcpy>
    NumBytesRead += NumBytesRem;
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4413      	add	r3, r2
 800471e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004728:	6a3a      	ldr	r2, [r7, #32]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20001894 	.word	0x20001894

0800474c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4a3f      	ldr	r2, [pc, #252]	; (8004868 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800476a:	4413      	add	r3, r2
 800476c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	429a      	cmp	r2, r3
 8004780:	d854      	bhi.n	800482c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d30f      	bcc.n	80047b6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 fa3b 	bl	8006c1e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	441a      	add	r2, r3
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e054      	b.n	8004860 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d34b      	bcc.n	800485e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d90e      	bls.n	80047f6 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 fa1a 	bl	8006c1e <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	441a      	add	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e018      	b.n	8004828 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4413      	add	r3, r2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004802:	4618      	mov	r0, r3
 8004804:	f002 fa0b 	bl	8006c1e <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	6858      	ldr	r0, [r3, #4]
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	18d1      	adds	r1, r2, r3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	461a      	mov	r2, r3
 800481a:	f002 fa00 	bl	8006c1e <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8004828:	2301      	movs	r3, #1
 800482a:	e019      	b.n	8004860 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d30f      	bcc.n	800485e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4413      	add	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800484a:	4618      	mov	r0, r3
 800484c:	f002 f9e7 	bl	8006c1e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	441a      	add	r2, r3
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	; 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20001894 	.word	0x20001894

0800486c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004882:	f7ff fe8f 	bl	80045a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4293      	cmp	r3, r2
 8004890:	d24c      	bcs.n	800492c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8004892:	f3ef 8311 	mrs	r3, BASEPRI
 8004896:	f04f 0120 	mov.w	r1, #32
 800489a:	f381 8811 	msr	BASEPRI, r1
 800489e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d032      	beq.n	800490c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80048a6:	4925      	ldr	r1, [pc, #148]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	440b      	add	r3, r1
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80048ba:	4920      	ldr	r1, [pc, #128]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	3304      	adds	r3, #4
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048d0:	491a      	ldr	r1, [pc, #104]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	440b      	add	r3, r1
 80048de:	3320      	adds	r3, #32
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80048e4:	4915      	ldr	r1, [pc, #84]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	3328      	adds	r3, #40	; 0x28
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80048f8:	4910      	ldr	r1, [pc, #64]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800490c:	490b      	ldr	r1, [pc, #44]	; (800493c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	440b      	add	r3, r1
 800491a:	332c      	adds	r3, #44	; 0x2c
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e002      	b.n	8004932 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
 8004930:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004932:	697b      	ldr	r3, [r7, #20]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20001894 	.word	0x20001894

08004940 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8004956:	f7ff fe25 	bl	80045a4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800495a:	4b2d      	ldr	r3, [pc, #180]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4293      	cmp	r3, r2
 8004964:	d24b      	bcs.n	80049fe <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8004966:	f3ef 8311 	mrs	r3, BASEPRI
 800496a:	f04f 0120 	mov.w	r1, #32
 800496e:	f381 8811 	msr	BASEPRI, r1
 8004972:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d031      	beq.n	80049de <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800497a:	4925      	ldr	r1, [pc, #148]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4613      	mov	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	440b      	add	r3, r1
 8004988:	3360      	adds	r3, #96	; 0x60
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800498e:	4920      	ldr	r1, [pc, #128]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	3364      	adds	r3, #100	; 0x64
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80049a2:	491b      	ldr	r1, [pc, #108]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	440b      	add	r3, r1
 80049b0:	3368      	adds	r3, #104	; 0x68
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80049b6:	4916      	ldr	r1, [pc, #88]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	3370      	adds	r3, #112	; 0x70
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80049ca:	4911      	ldr	r1, [pc, #68]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4613      	mov	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	336c      	adds	r3, #108	; 0x6c
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80049de:	490c      	ldr	r1, [pc, #48]	; (8004a10 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	440b      	add	r3, r1
 80049ec:	3374      	adds	r3, #116	; 0x74
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e002      	b.n	8004a04 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004a04:	697b      	ldr	r3, [r7, #20]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20001894 	.word	0x20001894

08004a14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004a24:	e002      	b.n	8004a2c <_EncodeStr+0x18>
    Len++;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f6      	bne.n	8004a26 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d901      	bls.n	8004a44 <_EncodeStr+0x30>
    Len = Limit;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2bfe      	cmp	r3, #254	; 0xfe
 8004a48:	d806      	bhi.n	8004a58 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e011      	b.n	8004a7c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	60fa      	str	r2, [r7, #12]
 8004a5e:	22ff      	movs	r2, #255	; 0xff
 8004a60:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	60fa      	str	r2, [r7, #12]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	0a19      	lsrs	r1, r3, #8
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	60fa      	str	r2, [r7, #12]
 8004a78:	b2ca      	uxtb	r2, r1
 8004a7a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a80:	e00a      	b.n	8004a98 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	1c53      	adds	r3, r2, #1
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	60f9      	str	r1, [r7, #12]
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	701a      	strb	r2, [r3, #0]
    n++;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3f0      	bcc.n	8004a82 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr

08004ac2 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ac8:	1cfb      	adds	r3, r7, #3
 8004aca:	2201      	movs	r2, #1
 8004acc:	4619      	mov	r1, r3
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f7ff fdba 	bl	8004648 <SEGGER_RTT_ReadNoLock>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	dd44      	ble.n	8004b68 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d01a      	beq.n	8004b1a <_HandleIncomingPacket+0x58>
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	dc06      	bgt.n	8004af6 <_HandleIncomingPacket+0x34>
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d010      	beq.n	8004b0e <_HandleIncomingPacket+0x4c>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	dc11      	bgt.n	8004b14 <_HandleIncomingPacket+0x52>
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d009      	beq.n	8004b08 <_HandleIncomingPacket+0x46>
 8004af4:	e02d      	b.n	8004b52 <_HandleIncomingPacket+0x90>
 8004af6:	2b06      	cmp	r3, #6
 8004af8:	d015      	beq.n	8004b26 <_HandleIncomingPacket+0x64>
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	db10      	blt.n	8004b20 <_HandleIncomingPacket+0x5e>
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d014      	beq.n	8004b2c <_HandleIncomingPacket+0x6a>
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d015      	beq.n	8004b32 <_HandleIncomingPacket+0x70>
 8004b06:	e024      	b.n	8004b52 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b08:	f000 fa7c 	bl	8005004 <SEGGER_SYSVIEW_Start>
      break;
 8004b0c:	e031      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b0e:	f000 fb35 	bl	800517c <SEGGER_SYSVIEW_Stop>
      break;
 8004b12:	e02e      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b14:	f000 fd10 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b18:	e02b      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004b1a:	f000 fcd5 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004b1e:	e028      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004b20:	f000 fb52 	bl	80051c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004b24:	e025      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004b26:	f000 ff37 	bl	8005998 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004b2a:	e022      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004b2c:	f000 ff16 	bl	800595c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004b30:	e01f      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b32:	1cfb      	adds	r3, r7, #3
 8004b34:	2201      	movs	r2, #1
 8004b36:	4619      	mov	r1, r3
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7ff fd85 	bl	8004648 <SEGGER_RTT_ReadNoLock>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dd11      	ble.n	8004b6c <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fe86 	bl	800585c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004b50:	e00c      	b.n	8004b6c <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da0a      	bge.n	8004b70 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b5a:	1cfb      	adds	r3, r7, #3
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7ff fd71 	bl	8004648 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b66:	e003      	b.n	8004b70 <_HandleIncomingPacket+0xae>
    }
  }
 8004b68:	bf00      	nop
 8004b6a:	e002      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
      break;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <_HandleIncomingPacket+0xb0>
      break;
 8004b70:	bf00      	nop
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b82:	2301      	movs	r3, #1
 8004b84:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	3301      	adds	r3, #1
 8004b8a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	e00b      	b.n	8004bb0 <_TrySendOverflowPacket+0x34>
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	1c59      	adds	r1, r3, #1
 8004ba0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	09db      	lsrs	r3, r3, #7
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb4:	d8f0      	bhi.n	8004b98 <_TrySendOverflowPacket+0x1c>
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <_TrySendOverflowPacket+0xdc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	e00b      	b.n	8004bf8 <_TrySendOverflowPacket+0x7c>
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	6279      	str	r1, [r7, #36]	; 0x24
 8004bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfc:	d8f0      	bhi.n	8004be0 <_TrySendOverflowPacket+0x64>
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	627a      	str	r2, [r7, #36]	; 0x24
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7ff fd96 	bl	800474c <SEGGER_RTT_WriteSkipNoLock>
 8004c20:	4603      	mov	r3, r0
 8004c22:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e004      	b.n	8004c48 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <_TrySendOverflowPacket+0xd8>)
 8004c46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004c48:	693b      	ldr	r3, [r7, #16]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3730      	adds	r7, #48	; 0x30
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000095c 	.word	0x2000095c
 8004c58:	e0001004 	.word	0xe0001004

08004c5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c68:	4b63      	ldr	r3, [pc, #396]	; (8004df8 <_SendPacket+0x19c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d010      	beq.n	8004c92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c70:	4b61      	ldr	r3, [pc, #388]	; (8004df8 <_SendPacket+0x19c>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80a1 	beq.w	8004dbc <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c7a:	4b5f      	ldr	r3, [pc, #380]	; (8004df8 <_SendPacket+0x19c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d109      	bne.n	8004c96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c82:	f7ff ff7b 	bl	8004b7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c86:	4b5c      	ldr	r3, [pc, #368]	; (8004df8 <_SendPacket+0x19c>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f040 8098 	bne.w	8004dc0 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004c90:	e001      	b.n	8004c96 <_SendPacket+0x3a>
    goto Send;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <_SendPacket+0x3c>
Send:
 8004c96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b1f      	cmp	r3, #31
 8004c9c:	d809      	bhi.n	8004cb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c9e:	4b56      	ldr	r3, [pc, #344]	; (8004df8 <_SendPacket+0x19c>)
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 8089 	bne.w	8004dc4 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b17      	cmp	r3, #23
 8004cb6:	d807      	bhi.n	8004cc8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e03d      	b.n	8004d44 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d912      	bls.n	8004cfc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	09da      	lsrs	r2, r3, #7
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	3a01      	subs	r2, #1
 8004cee:	60fa      	str	r2, [r7, #12]
 8004cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e006      	b.n	8004d0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0e:	d912      	bls.n	8004d36 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	09da      	lsrs	r2, r3, #7
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	3a01      	subs	r2, #1
 8004d28:	60fa      	str	r2, [r7, #12]
 8004d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e006      	b.n	8004d44 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <_SendPacket+0x1a0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d4a:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <_SendPacket+0x19c>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	e00b      	b.n	8004d76 <_SendPacket+0x11a>
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	6279      	str	r1, [r7, #36]	; 0x24
 8004d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7a:	d8f0      	bhi.n	8004d5e <_SendPacket+0x102>
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	627a      	str	r2, [r7, #36]	; 0x24
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	2001      	movs	r0, #1
 8004d98:	f7ff fcd8 	bl	800474c <SEGGER_RTT_WriteSkipNoLock>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004da6:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <_SendPacket+0x19c>)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	60d3      	str	r3, [r2, #12]
 8004dac:	e00b      	b.n	8004dc6 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <_SendPacket+0x19c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <_SendPacket+0x19c>)
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e004      	b.n	8004dc6 <_SendPacket+0x16a>
    goto SendDone;
 8004dbc:	bf00      	nop
 8004dbe:	e002      	b.n	8004dc6 <_SendPacket+0x16a>
      goto SendDone;
 8004dc0:	bf00      	nop
 8004dc2:	e000      	b.n	8004dc6 <_SendPacket+0x16a>
      goto SendDone;
 8004dc4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <_SendPacket+0x1a4>)
 8004dc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <_SendPacket+0x1a4>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d00b      	beq.n	8004dee <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <_SendPacket+0x19c>)
 8004dd8:	789b      	ldrb	r3, [r3, #2]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <_SendPacket+0x19c>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004de4:	f7ff fe6d 	bl	8004ac2 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <_SendPacket+0x19c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004dee:	bf00      	nop
 8004df0:	3728      	adds	r7, #40	; 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000095c 	.word	0x2000095c
 8004dfc:	e0001004 	.word	0xe0001004
 8004e00:	20001894 	.word	0x20001894

08004e04 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <SEGGER_SYSVIEW_Init+0x68>)
 8004e1c:	4914      	ldr	r1, [pc, #80]	; (8004e70 <SEGGER_SYSVIEW_Init+0x6c>)
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f7ff fd24 	bl	800486c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e24:	2300      	movs	r3, #0
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2308      	movs	r3, #8
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <SEGGER_SYSVIEW_Init+0x70>)
 8004e2c:	4910      	ldr	r1, [pc, #64]	; (8004e70 <SEGGER_SYSVIEW_Init+0x6c>)
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f7ff fd86 	bl	8004940 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <SEGGER_SYSVIEW_Init+0x78>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e42:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e44:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e4a:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <SEGGER_SYSVIEW_Init+0x74>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000554 	.word	0x20000554
 8004e70:	08007d9c 	.word	0x08007d9c
 8004e74:	20000954 	.word	0x20000954
 8004e78:	2000095c 	.word	0x2000095c
 8004e7c:	e0001004 	.word	0xe0001004

08004e80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e88:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6113      	str	r3, [r2, #16]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	2000095c 	.word	0x2000095c

08004e9c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea8:	f04f 0120 	mov.w	r1, #32
 8004eac:	f381 8811 	msr	BASEPRI, r1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	4808      	ldr	r0, [pc, #32]	; (8004ed4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004eb4:	f7ff fdfa 	bl	8004aac <_PreparePacket>
 8004eb8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	f7ff fecc 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f383 8811 	msr	BASEPRI, r3
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000098c 	.word	0x2000098c

08004ed8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	f04f 0120 	mov.w	r1, #32
 8004eea:	f381 8811 	msr	BASEPRI, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	4816      	ldr	r0, [pc, #88]	; (8004f4c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ef2:	f7ff fddb 	bl	8004aac <_PreparePacket>
 8004ef6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	61f9      	str	r1, [r7, #28]
 8004f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	61fa      	str	r2, [r7, #28]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6938      	ldr	r0, [r7, #16]
 8004f3a:	f7ff fe8f 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f383 8811 	msr	BASEPRI, r3
}
 8004f44:	bf00      	nop
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	2000098c 	.word	0x2000098c

08004f50 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f60:	f04f 0120 	mov.w	r1, #32
 8004f64:	f381 8811 	msr	BASEPRI, r1
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	4825      	ldr	r0, [pc, #148]	; (8005000 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f6c:	f7ff fd9e 	bl	8004aac <_PreparePacket>
 8004f70:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	e00b      	b.n	8004f98 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	09db      	lsrs	r3, r3, #7
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f9c:	d8f0      	bhi.n	8004f80 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	e00b      	b.n	8004fd0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	09db      	lsrs	r3, r3, #7
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd4:	d8f0      	bhi.n	8004fb8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	627a      	str	r2, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69b8      	ldr	r0, [r7, #24]
 8004fec:	f7ff fe36 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f383 8811 	msr	BASEPRI, r3
}
 8004ff6:	bf00      	nop
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	2000098c 	.word	0x2000098c

08005004 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	; 0x30
 8005008:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800500a:	4b59      	ldr	r3, [pc, #356]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 80aa 	bne.w	8005168 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8005014:	4b56      	ldr	r3, [pc, #344]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800501a:	f3ef 8311 	mrs	r3, BASEPRI
 800501e:	f04f 0120 	mov.w	r1, #32
 8005022:	f381 8811 	msr	BASEPRI, r1
 8005026:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005028:	220a      	movs	r2, #10
 800502a:	4952      	ldr	r1, [pc, #328]	; (8005174 <SEGGER_SYSVIEW_Start+0x170>)
 800502c:	2001      	movs	r0, #1
 800502e:	f7ff fb8d 	bl	800474c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005038:	200a      	movs	r0, #10
 800503a:	f7ff ff2f 	bl	8004e9c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800503e:	f3ef 8311 	mrs	r3, BASEPRI
 8005042:	f04f 0120 	mov.w	r1, #32
 8005046:	f381 8811 	msr	BASEPRI, r1
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	484a      	ldr	r0, [pc, #296]	; (8005178 <SEGGER_SYSVIEW_Start+0x174>)
 800504e:	f7ff fd2d 	bl	8004aac <_PreparePacket>
 8005052:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505c:	4b44      	ldr	r3, [pc, #272]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	e00b      	b.n	800507c <SEGGER_SYSVIEW_Start+0x78>
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	1c59      	adds	r1, r3, #1
 800506c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800506e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	09db      	lsrs	r3, r3, #7
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	2b7f      	cmp	r3, #127	; 0x7f
 8005080:	d8f0      	bhi.n	8005064 <SEGGER_SYSVIEW_Start+0x60>
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
 8005096:	4b36      	ldr	r3, [pc, #216]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	e00b      	b.n	80050b6 <SEGGER_SYSVIEW_Start+0xb2>
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	1c59      	adds	r1, r3, #1
 80050a6:	6279      	str	r1, [r7, #36]	; 0x24
 80050a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	09db      	lsrs	r3, r3, #7
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ba:	d8f0      	bhi.n	800509e <SEGGER_SYSVIEW_Start+0x9a>
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	627a      	str	r2, [r7, #36]	; 0x24
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e00b      	b.n	80050f0 <SEGGER_SYSVIEW_Start+0xec>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	61f9      	str	r1, [r7, #28]
 80050e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	09db      	lsrs	r3, r3, #7
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b7f      	cmp	r3, #127	; 0x7f
 80050f4:	d8f0      	bhi.n	80050d8 <SEGGER_SYSVIEW_Start+0xd4>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	2302      	movs	r3, #2
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e00b      	b.n	8005128 <SEGGER_SYSVIEW_Start+0x124>
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	6179      	str	r1, [r7, #20]
 800511a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b7f      	cmp	r3, #127	; 0x7f
 800512c:	d8f0      	bhi.n	8005110 <SEGGER_SYSVIEW_Start+0x10c>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	617a      	str	r2, [r7, #20]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800513e:	2218      	movs	r2, #24
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fd8a 	bl	8004c5c <_SendPacket>
      RECORD_END();
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <SEGGER_SYSVIEW_Start+0x16c>)
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800515c:	f000 f9ec 	bl	8005538 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005160:	f000 f9b2 	bl	80054c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005164:	f000 fc18 	bl	8005998 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8005168:	bf00      	nop
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	2000095c 	.word	0x2000095c
 8005174:	08007dcc 	.word	0x08007dcc
 8005178:	2000098c 	.word	0x2000098c

0800517c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	480b      	ldr	r0, [pc, #44]	; (80051c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005192:	f7ff fc8b 	bl	8004aac <_PreparePacket>
 8005196:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051a0:	220b      	movs	r2, #11
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6838      	ldr	r0, [r7, #0]
 80051a6:	f7ff fd59 	bl	8004c5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f383 8811 	msr	BASEPRI, r3
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	2000098c 	.word	0x2000098c
 80051c4:	2000095c 	.word	0x2000095c

080051c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	; 0x30
 80051cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051ce:	f3ef 8311 	mrs	r3, BASEPRI
 80051d2:	f04f 0120 	mov.w	r1, #32
 80051d6:	f381 8811 	msr	BASEPRI, r1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	4845      	ldr	r0, [pc, #276]	; (80052f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051de:	f7ff fc65 	bl	8004aac <_PreparePacket>
 80051e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	e00b      	b.n	800520c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	09db      	lsrs	r3, r3, #7
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b7f      	cmp	r3, #127	; 0x7f
 8005210:	d8f0      	bhi.n	80051f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	e00b      	b.n	8005246 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	6279      	str	r1, [r7, #36]	; 0x24
 8005238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	09db      	lsrs	r3, r3, #7
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b7f      	cmp	r3, #127	; 0x7f
 800524a:	d8f0      	bhi.n	800522e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	627a      	str	r2, [r7, #36]	; 0x24
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	61f9      	str	r1, [r7, #28]
 8005272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b7f      	cmp	r3, #127	; 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	61fa      	str	r2, [r7, #28]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	2302      	movs	r3, #2
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e00b      	b.n	80052b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	6179      	str	r1, [r7, #20]
 80052aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	09db      	lsrs	r3, r3, #7
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	d8f0      	bhi.n	80052a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	617a      	str	r2, [r7, #20]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052ce:	2218      	movs	r2, #24
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68b8      	ldr	r0, [r7, #8]
 80052d4:	f7ff fcc2 	bl	8004c5c <_SendPacket>
  RECORD_END();
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	4798      	blx	r3
  }
}
 80052ec:	bf00      	nop
 80052ee:	3730      	adds	r7, #48	; 0x30
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	2000098c 	.word	0x2000098c
 80052f8:	2000095c 	.word	0x2000095c

080052fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b092      	sub	sp, #72	; 0x48
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005304:	f3ef 8311 	mrs	r3, BASEPRI
 8005308:	f04f 0120 	mov.w	r1, #32
 800530c:	f381 8811 	msr	BASEPRI, r1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	486b      	ldr	r0, [pc, #428]	; (80054c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005314:	f7ff fbca 	bl	8004aac <_PreparePacket>
 8005318:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	647b      	str	r3, [r7, #68]	; 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	089b      	lsrs	r3, r3, #2
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	e00b      	b.n	800534a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	6479      	str	r1, [r7, #68]	; 0x44
 800533c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	643b      	str	r3, [r7, #64]	; 0x40
 800534a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534c:	2b7f      	cmp	r3, #127	; 0x7f
 800534e:	d8f0      	bhi.n	8005332 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	647a      	str	r2, [r7, #68]	; 0x44
 8005356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800538a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	4619      	mov	r1, r3
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fb36 	bl	8004a14 <_EncodeStr>
 80053a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053aa:	2209      	movs	r2, #9
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f7ff fc54 	bl	8004c5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	089b      	lsrs	r3, r3, #2
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
 80053ca:	e00b      	b.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	6379      	str	r1, [r7, #52]	; 0x34
 80053d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b7f      	cmp	r3, #127	; 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	637a      	str	r2, [r7, #52]	; 0x34
 80053f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
 8005404:	e00b      	b.n	800541e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b7f      	cmp	r3, #127	; 0x7f
 8005422:	d8f0      	bhi.n	8005406 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	e00b      	b.n	8005458 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1c59      	adds	r1, r3, #1
 8005448:	6279      	str	r1, [r7, #36]	; 0x24
 800544a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	09db      	lsrs	r3, r3, #7
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b7f      	cmp	r3, #127	; 0x7f
 800545c:	d8f0      	bhi.n	8005440 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	627a      	str	r2, [r7, #36]	; 0x24
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	61fb      	str	r3, [r7, #28]
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e00b      	b.n	8005490 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	61f9      	str	r1, [r7, #28]
 8005482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b7f      	cmp	r3, #127	; 0x7f
 8005494:	d8f0      	bhi.n	8005478 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	61fa      	str	r2, [r7, #28]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054a6:	2215      	movs	r2, #21
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f7ff fbd6 	bl	8004c5c <_SendPacket>
  RECORD_END();
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f383 8811 	msr	BASEPRI, r3
}
 80054b6:	bf00      	nop
 80054b8:	3748      	adds	r7, #72	; 0x48
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2000098c 	.word	0x2000098c
 80054c4:	2000095c 	.word	0x2000095c

080054c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054de:	4b03      	ldr	r3, [pc, #12]	; (80054ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4798      	blx	r3
  }
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000095c 	.word	0x2000095c

080054f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054f8:	f3ef 8311 	mrs	r3, BASEPRI
 80054fc:	f04f 0120 	mov.w	r1, #32
 8005500:	f381 8811 	msr	BASEPRI, r1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	480b      	ldr	r0, [pc, #44]	; (8005534 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005508:	f7ff fad0 	bl	8004aac <_PreparePacket>
 800550c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800550e:	2280      	movs	r2, #128	; 0x80
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7ff fa7e 	bl	8004a14 <_EncodeStr>
 8005518:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800551a:	220e      	movs	r2, #14
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f7ff fb9c 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f383 8811 	msr	BASEPRI, r3
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	2000098c 	.word	0x2000098c

08005538 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d014      	beq.n	800557a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4798      	blx	r3
 8005558:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800555c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800555e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	0013      	movs	r3, r2
 800556c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800556e:	461a      	mov	r2, r3
 8005570:	4601      	mov	r1, r0
 8005572:	200d      	movs	r0, #13
 8005574:	f7ff fcec 	bl	8004f50 <SEGGER_SYSVIEW_RecordU32x2>
 8005578:	e005      	b.n	8005586 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	200c      	movs	r0, #12
 8005582:	f7ff fca9 	bl	8004ed8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	bf00      	nop
 8005590:	2000095c 	.word	0x2000095c
 8005594:	e0001004 	.word	0xe0001004

08005598 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800559e:	f3ef 8311 	mrs	r3, BASEPRI
 80055a2:	f04f 0120 	mov.w	r1, #32
 80055a6:	f381 8811 	msr	BASEPRI, r1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	4819      	ldr	r0, [pc, #100]	; (8005614 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055ae:	f7ff fa7d 	bl	8004aac <_PreparePacket>
 80055b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055b8:	4b17      	ldr	r3, [pc, #92]	; (8005618 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e00b      	b.n	80055e4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	1c59      	adds	r1, r3, #1
 80055d4:	6179      	str	r1, [r7, #20]
 80055d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	09db      	lsrs	r3, r3, #7
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b7f      	cmp	r3, #127	; 0x7f
 80055e8:	d8f0      	bhi.n	80055cc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	617a      	str	r2, [r7, #20]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055fa:	2202      	movs	r2, #2
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f7ff fb2c 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f383 8811 	msr	BASEPRI, r3
}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	2000098c 	.word	0x2000098c
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005622:	f3ef 8311 	mrs	r3, BASEPRI
 8005626:	f04f 0120 	mov.w	r1, #32
 800562a:	f381 8811 	msr	BASEPRI, r1
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	4807      	ldr	r0, [pc, #28]	; (8005650 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005632:	f7ff fa3b 	bl	8004aac <_PreparePacket>
 8005636:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005638:	2203      	movs	r2, #3
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6838      	ldr	r0, [r7, #0]
 800563e:	f7ff fb0d 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f383 8811 	msr	BASEPRI, r3
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	2000098c 	.word	0x2000098c

08005654 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800565a:	f3ef 8311 	mrs	r3, BASEPRI
 800565e:	f04f 0120 	mov.w	r1, #32
 8005662:	f381 8811 	msr	BASEPRI, r1
 8005666:	607b      	str	r3, [r7, #4]
 8005668:	4807      	ldr	r0, [pc, #28]	; (8005688 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800566a:	f7ff fa1f 	bl	8004aac <_PreparePacket>
 800566e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005670:	2212      	movs	r2, #18
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6838      	ldr	r0, [r7, #0]
 8005676:	f7ff faf1 	bl	8004c5c <_SendPacket>
  RECORD_END();
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f383 8811 	msr	BASEPRI, r3
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	2000098c 	.word	0x2000098c

0800568c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005692:	f3ef 8311 	mrs	r3, BASEPRI
 8005696:	f04f 0120 	mov.w	r1, #32
 800569a:	f381 8811 	msr	BASEPRI, r1
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	4807      	ldr	r0, [pc, #28]	; (80056c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056a2:	f7ff fa03 	bl	8004aac <_PreparePacket>
 80056a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056a8:	2211      	movs	r2, #17
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6838      	ldr	r0, [r7, #0]
 80056ae:	f7ff fad5 	bl	8004c5c <_SendPacket>
  RECORD_END();
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f383 8811 	msr	BASEPRI, r3
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	2000098c 	.word	0x2000098c

080056c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056cc:	f3ef 8311 	mrs	r3, BASEPRI
 80056d0:	f04f 0120 	mov.w	r1, #32
 80056d4:	f381 8811 	msr	BASEPRI, r1
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	481a      	ldr	r0, [pc, #104]	; (8005744 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80056dc:	f7ff f9e6 	bl	8004aac <_PreparePacket>
 80056e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e00b      	b.n	8005714 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	61f9      	str	r1, [r7, #28]
 8005706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	09db      	lsrs	r3, r3, #7
 8005712:	61bb      	str	r3, [r7, #24]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b7f      	cmp	r3, #127	; 0x7f
 8005718:	d8f0      	bhi.n	80056fc <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	61fa      	str	r2, [r7, #28]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800572a:	2208      	movs	r2, #8
 800572c:	68f9      	ldr	r1, [r7, #12]
 800572e:	6938      	ldr	r0, [r7, #16]
 8005730:	f7ff fa94 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f383 8811 	msr	BASEPRI, r3
}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2000098c 	.word	0x2000098c
 8005748:	2000095c 	.word	0x2000095c

0800574c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005754:	f3ef 8311 	mrs	r3, BASEPRI
 8005758:	f04f 0120 	mov.w	r1, #32
 800575c:	f381 8811 	msr	BASEPRI, r1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	481a      	ldr	r0, [pc, #104]	; (80057cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005764:	f7ff f9a2 	bl	8004aac <_PreparePacket>
 8005768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e00b      	b.n	800579c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	61f9      	str	r1, [r7, #28]
 800578e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	09db      	lsrs	r3, r3, #7
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b7f      	cmp	r3, #127	; 0x7f
 80057a0:	d8f0      	bhi.n	8005784 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	61fa      	str	r2, [r7, #28]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057b2:	2204      	movs	r2, #4
 80057b4:	68f9      	ldr	r1, [r7, #12]
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f7ff fa50 	bl	8004c5c <_SendPacket>
  RECORD_END();
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f383 8811 	msr	BASEPRI, r3
}
 80057c2:	bf00      	nop
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	2000098c 	.word	0x2000098c
 80057d0:	2000095c 	.word	0x2000095c

080057d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057dc:	f3ef 8311 	mrs	r3, BASEPRI
 80057e0:	f04f 0120 	mov.w	r1, #32
 80057e4:	f381 8811 	msr	BASEPRI, r1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	481a      	ldr	r0, [pc, #104]	; (8005854 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80057ec:	f7ff f95e 	bl	8004aac <_PreparePacket>
 80057f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	61f9      	str	r1, [r7, #28]
 8005816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800583a:	2206      	movs	r2, #6
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	6938      	ldr	r0, [r7, #16]
 8005840:	f7ff fa0c 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f383 8811 	msr	BASEPRI, r3
}
 800584a:	bf00      	nop
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	2000098c 	.word	0x2000098c
 8005858:	2000095c 	.word	0x2000095c

0800585c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005866:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d06d      	beq.n	800594a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800586e:	4b39      	ldr	r3, [pc, #228]	; (8005954 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005874:	2300      	movs	r3, #0
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
 8005878:	e008      	b.n	800588c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	3301      	adds	r3, #1
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005890:	429a      	cmp	r2, r3
 8005892:	d3f2      	bcc.n	800587a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005894:	e000      	b.n	8005898 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005896:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d055      	beq.n	800594a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800589e:	f3ef 8311 	mrs	r3, BASEPRI
 80058a2:	f04f 0120 	mov.w	r1, #32
 80058a6:	f381 8811 	msr	BASEPRI, r1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	482a      	ldr	r0, [pc, #168]	; (8005958 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058ae:	f7ff f8fd 	bl	8004aac <_PreparePacket>
 80058b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	623b      	str	r3, [r7, #32]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_SendModule+0x7e>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	6279      	str	r1, [r7, #36]	; 0x24
 80058cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b7f      	cmp	r3, #127	; 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	627a      	str	r2, [r7, #36]	; 0x24
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e00b      	b.n	8005914 <SEGGER_SYSVIEW_SendModule+0xb8>
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	61f9      	str	r1, [r7, #28]
 8005906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	09db      	lsrs	r3, r3, #7
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b7f      	cmp	r3, #127	; 0x7f
 8005918:	d8f0      	bhi.n	80058fc <SEGGER_SYSVIEW_SendModule+0xa0>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	61fa      	str	r2, [r7, #28]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2280      	movs	r2, #128	; 0x80
 8005930:	4619      	mov	r1, r3
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff f86e 	bl	8004a14 <_EncodeStr>
 8005938:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800593a:	2216      	movs	r2, #22
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	6938      	ldr	r0, [r7, #16]
 8005940:	f7ff f98c 	bl	8004c5c <_SendPacket>
      RECORD_END();
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800594a:	bf00      	nop
 800594c:	3730      	adds	r7, #48	; 0x30
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000984 	.word	0x20000984
 8005958:	2000098c 	.word	0x2000098c

0800595c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f2      	bne.n	8005970 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000984 	.word	0x20000984

08005998 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800599e:	f3ef 8311 	mrs	r3, BASEPRI
 80059a2:	f04f 0120 	mov.w	r1, #32
 80059a6:	f381 8811 	msr	BASEPRI, r1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	4817      	ldr	r0, [pc, #92]	; (8005a0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059ae:	f7ff f87d 	bl	8004aac <_PreparePacket>
 80059b2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	4b14      	ldr	r3, [pc, #80]	; (8005a10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e00b      	b.n	80059dc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	6179      	str	r1, [r7, #20]
 80059ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	09db      	lsrs	r3, r3, #7
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b7f      	cmp	r3, #127	; 0x7f
 80059e0:	d8f0      	bhi.n	80059c4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	617a      	str	r2, [r7, #20]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059f2:	221b      	movs	r2, #27
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68b8      	ldr	r0, [r7, #8]
 80059f8:	f7ff f930 	bl	8004c5c <_SendPacket>
  RECORD_END();
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f383 8811 	msr	BASEPRI, r3
}
 8005a02:	bf00      	nop
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000098c 	.word	0x2000098c
 8005a10:	20000988 	.word	0x20000988

08005a14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	4827      	ldr	r0, [pc, #156]	; (8005ac8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a2c:	f7ff f83e 	bl	8004aac <_PreparePacket>
 8005a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	6938      	ldr	r0, [r7, #16]
 8005a38:	f7fe ffec 	bl	8004a14 <_EncodeStr>
 8005a3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
 8005a42:	2301      	movs	r3, #1
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	e00b      	b.n	8005a60 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	6279      	str	r1, [r7, #36]	; 0x24
 8005a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	09db      	lsrs	r3, r3, #7
 8005a5e:	623b      	str	r3, [r7, #32]
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b7f      	cmp	r3, #127	; 0x7f
 8005a64:	d8f0      	bhi.n	8005a48 <SEGGER_SYSVIEW_Warn+0x34>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	e00b      	b.n	8005a98 <SEGGER_SYSVIEW_Warn+0x84>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	61f9      	str	r1, [r7, #28]
 8005a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	09db      	lsrs	r3, r3, #7
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9c:	d8f0      	bhi.n	8005a80 <SEGGER_SYSVIEW_Warn+0x6c>
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	61fa      	str	r2, [r7, #28]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005aae:	221a      	movs	r2, #26
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	6938      	ldr	r0, [r7, #16]
 8005ab4:	f7ff f8d2 	bl	8004c5c <_SendPacket>
  RECORD_END();
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bf00      	nop
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000098c 	.word	0x2000098c

08005acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f103 0208 	add.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 0208 	add.w	r2, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f103 0208 	add.w	r2, r3, #8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d103      	bne.n	8005b9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08c      	sub	sp, #48	; 0x30
 8005bbe:	af04      	add	r7, sp, #16
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fe18 	bl	8006804 <pvPortMalloc>
 8005bd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00e      	beq.n	8005bfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bdc:	2054      	movs	r0, #84	; 0x54
 8005bde:	f000 fe11 	bl	8006804 <pvPortMalloc>
 8005be2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf0:	e005      	b.n	8005bfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f000 fec8 	bl	8006988 <vPortFree>
 8005bf8:	e001      	b.n	8005bfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f80e 	bl	8005c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c20:	69f8      	ldr	r0, [r7, #28]
 8005c22:	f000 f891 	bl	8005d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e002      	b.n	8005c32 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c32:	69bb      	ldr	r3, [r7, #24]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c54:	3b01      	subs	r3, #1
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e7fe      	b.n	8005c80 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01f      	beq.n	8005cc8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e012      	b.n	8005cb4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	7819      	ldrb	r1, [r3, #0]
 8005c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3334      	adds	r3, #52	; 0x34
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d006      	beq.n	8005cbc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d9e9      	bls.n	8005c8e <prvInitialiseNewTask+0x52>
 8005cba:	e000      	b.n	8005cbe <prvInitialiseNewTask+0x82>
			{
				break;
 8005cbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cc6:	e003      	b.n	8005cd0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d901      	bls.n	8005cda <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	2200      	movs	r2, #0
 8005cea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff ff0a 	bl	8005b0a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ff05 	bl	8005b0a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	f1c3 0207 	rsb	r2, r3, #7
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2200      	movs	r2, #0
 8005d1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	69b8      	ldr	r0, [r7, #24]
 8005d2a:	f000 fb83 	bl	8006434 <pxPortInitialiseStack>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d40:	bf00      	nop
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d48:	b5b0      	push	{r4, r5, r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d50:	f000 fc5a 	bl	8006608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <prvAddNewTaskToReadyList+0xf4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <prvAddNewTaskToReadyList+0xf4>)
 8005d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d5e:	4b38      	ldr	r3, [pc, #224]	; (8005e40 <prvAddNewTaskToReadyList+0xf8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d66:	4a36      	ldr	r2, [pc, #216]	; (8005e40 <prvAddNewTaskToReadyList+0xf8>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d6c:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <prvAddNewTaskToReadyList+0xf4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d110      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d74:	f000 fac2 	bl	80062fc <prvInitialiseTaskLists>
 8005d78:	e00d      	b.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d7a:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <prvAddNewTaskToReadyList+0xfc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <prvAddNewTaskToReadyList+0xf8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d802      	bhi.n	8005d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <prvAddNewTaskToReadyList+0xf8>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d96:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <prvAddNewTaskToReadyList+0x100>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <prvAddNewTaskToReadyList+0x100>)
 8005d9e:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d016      	beq.n	8005dd4 <prvAddNewTaskToReadyList+0x8c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fc8b 	bl	80056c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461c      	mov	r4, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	1ae3      	subs	r3, r4, r3
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	462b      	mov	r3, r5
 8005dd0:	f7fe fb5e 	bl	8004490 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fcfc 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	2201      	movs	r2, #1
 8005de2:	409a      	lsls	r2, r3
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <prvAddNewTaskToReadyList+0x104>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <prvAddNewTaskToReadyList+0x104>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <prvAddNewTaskToReadyList+0x108>)
 8005dfc:	441a      	add	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f7ff fe8c 	bl	8005b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e0a:	f000 fc2b 	bl	8006664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <prvAddNewTaskToReadyList+0xfc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <prvAddNewTaskToReadyList+0xf8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d207      	bcs.n	8005e34 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <prvAddNewTaskToReadyList+0x10c>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3c:	20000b70 	.word	0x20000b70
 8005e40:	20000a70 	.word	0x20000a70
 8005e44:	20000b7c 	.word	0x20000b7c
 8005e48:	20000b8c 	.word	0x20000b8c
 8005e4c:	20000b78 	.word	0x20000b78
 8005e50:	20000a74 	.word	0x20000a74
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <vTaskStartScheduler+0x90>)
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2300      	movs	r3, #0
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	4920      	ldr	r1, [pc, #128]	; (8005eec <vTaskStartScheduler+0x94>)
 8005e6c:	4820      	ldr	r0, [pc, #128]	; (8005ef0 <vTaskStartScheduler+0x98>)
 8005e6e:	f7ff fea4 	bl	8005bba <xTaskCreate>
 8005e72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d123      	bne.n	8005ec2 <vTaskStartScheduler+0x6a>
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e8c:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <vTaskStartScheduler+0x9c>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <vTaskStartScheduler+0xa0>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <vTaskStartScheduler+0xa4>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <vTaskStartScheduler+0xa8>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <vTaskStartScheduler+0x90>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d102      	bne.n	8005eb2 <vTaskStartScheduler+0x5a>
 8005eac:	f7ff fbee 	bl	800568c <SEGGER_SYSVIEW_OnIdle>
 8005eb0:	e004      	b.n	8005ebc <vTaskStartScheduler+0x64>
 8005eb2:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <vTaskStartScheduler+0xa8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fc48 	bl	800574c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ebc:	f000 fb34 	bl	8006528 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ec0:	e00d      	b.n	8005ede <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d109      	bne.n	8005ede <vTaskStartScheduler+0x86>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	e7fe      	b.n	8005edc <vTaskStartScheduler+0x84>
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000b94 	.word	0x20000b94
 8005eec:	08007da4 	.word	0x08007da4
 8005ef0:	080062cd 	.word	0x080062cd
 8005ef4:	20000b90 	.word	0x20000b90
 8005ef8:	20000b7c 	.word	0x20000b7c
 8005efc:	20000b74 	.word	0x20000b74
 8005f00:	20000a70 	.word	0x20000a70

08005f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <vTaskSuspendAll+0x18>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <vTaskSuspendAll+0x18>)
 8005f10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000b98 	.word	0x20000b98

08005f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2e:	4b43      	ldr	r3, [pc, #268]	; (800603c <xTaskResumeAll+0x11c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <xTaskResumeAll+0x2a>
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	e7fe      	b.n	8005f48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f4a:	f000 fb5d 	bl	8006608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <xTaskResumeAll+0x11c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	4a39      	ldr	r2, [pc, #228]	; (800603c <xTaskResumeAll+0x11c>)
 8005f56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b38      	ldr	r3, [pc, #224]	; (800603c <xTaskResumeAll+0x11c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d165      	bne.n	800602c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f60:	4b37      	ldr	r3, [pc, #220]	; (8006040 <xTaskResumeAll+0x120>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d061      	beq.n	800602c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f68:	e032      	b.n	8005fd0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <xTaskResumeAll+0x124>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3318      	adds	r3, #24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fdf6 	bl	8005b68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fdf1 	bl	8005b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fc23 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	2201      	movs	r2, #1
 8005f94:	409a      	lsls	r2, r3
 8005f96:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <xTaskResumeAll+0x128>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	; (8006048 <xTaskResumeAll+0x128>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <xTaskResumeAll+0x12c>)
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7ff fdb3 	bl	8005b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	4b23      	ldr	r3, [pc, #140]	; (8006050 <xTaskResumeAll+0x130>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005fca:	4b22      	ldr	r3, [pc, #136]	; (8006054 <xTaskResumeAll+0x134>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <xTaskResumeAll+0x124>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1c8      	bne.n	8005f6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fde:	f000 fa09 	bl	80063f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fe2:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <xTaskResumeAll+0x138>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fee:	f000 f849 	bl	8006084 <xTaskIncrementTick>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005ff8:	4b16      	ldr	r3, [pc, #88]	; (8006054 <xTaskResumeAll+0x134>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3b01      	subs	r3, #1
 8006002:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f1      	bne.n	8005fee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <xTaskResumeAll+0x138>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <xTaskResumeAll+0x134>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d009      	beq.n	800602c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <xTaskResumeAll+0x13c>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800602c:	f000 fb1a 	bl	8006664 <vPortExitCritical>

	return xAlreadyYielded;
 8006030:	68bb      	ldr	r3, [r7, #8]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000b98 	.word	0x20000b98
 8006040:	20000b70 	.word	0x20000b70
 8006044:	20000b30 	.word	0x20000b30
 8006048:	20000b78 	.word	0x20000b78
 800604c:	20000a74 	.word	0x20000a74
 8006050:	20000a70 	.word	0x20000a70
 8006054:	20000b84 	.word	0x20000b84
 8006058:	20000b80 	.word	0x20000b80
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006066:	f000 fb91 	bl	800678c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800606a:	2300      	movs	r3, #0
 800606c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800606e:	4b04      	ldr	r3, [pc, #16]	; (8006080 <xTaskGetTickCountFromISR+0x20>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006074:	683b      	ldr	r3, [r7, #0]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000b74 	.word	0x20000b74

08006084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800608e:	4b50      	ldr	r3, [pc, #320]	; (80061d0 <xTaskIncrementTick+0x14c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 808b 	bne.w	80061ae <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006098:	4b4e      	ldr	r3, [pc, #312]	; (80061d4 <xTaskIncrementTick+0x150>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060a0:	4a4c      	ldr	r2, [pc, #304]	; (80061d4 <xTaskIncrementTick+0x150>)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d11f      	bne.n	80060ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80060ac:	4b4a      	ldr	r3, [pc, #296]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <xTaskIncrementTick+0x46>
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	e7fe      	b.n	80060c8 <xTaskIncrementTick+0x44>
 80060ca:	4b43      	ldr	r3, [pc, #268]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	4b42      	ldr	r3, [pc, #264]	; (80061dc <xTaskIncrementTick+0x158>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a40      	ldr	r2, [pc, #256]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4a40      	ldr	r2, [pc, #256]	; (80061dc <xTaskIncrementTick+0x158>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <xTaskIncrementTick+0x15c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a3e      	ldr	r2, [pc, #248]	; (80061e0 <xTaskIncrementTick+0x15c>)
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	f000 f984 	bl	80063f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ec:	4b3d      	ldr	r3, [pc, #244]	; (80061e4 <xTaskIncrementTick+0x160>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d34c      	bcc.n	8006190 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f6:	4b38      	ldr	r3, [pc, #224]	; (80061d8 <xTaskIncrementTick+0x154>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006100:	4b38      	ldr	r3, [pc, #224]	; (80061e4 <xTaskIncrementTick+0x160>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	601a      	str	r2, [r3, #0]
					break;
 8006108:	e042      	b.n	8006190 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <xTaskIncrementTick+0x154>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	429a      	cmp	r2, r3
 8006120:	d203      	bcs.n	800612a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006122:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <xTaskIncrementTick+0x160>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006128:	e032      	b.n	8006190 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	3304      	adds	r3, #4
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fd1a 	bl	8005b68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	3318      	adds	r3, #24
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fd11 	bl	8005b68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fb43 	bl	80057d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	2201      	movs	r2, #1
 8006154:	409a      	lsls	r2, r3
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <xTaskIncrementTick+0x164>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4313      	orrs	r3, r2
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <xTaskIncrementTick+0x164>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <xTaskIncrementTick+0x168>)
 800616e:	441a      	add	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7ff fcd3 	bl	8005b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <xTaskIncrementTick+0x16c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	429a      	cmp	r2, r3
 8006188:	d3b5      	bcc.n	80060f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618e:	e7b2      	b.n	80060f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <xTaskIncrementTick+0x16c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006196:	4915      	ldr	r1, [pc, #84]	; (80061ec <xTaskIncrementTick+0x168>)
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d907      	bls.n	80061b8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e004      	b.n	80061b8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061ae:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <xTaskIncrementTick+0x170>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a0f      	ldr	r2, [pc, #60]	; (80061f4 <xTaskIncrementTick+0x170>)
 80061b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <xTaskIncrementTick+0x174>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061c4:	697b      	ldr	r3, [r7, #20]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000b98 	.word	0x20000b98
 80061d4:	20000b74 	.word	0x20000b74
 80061d8:	20000b28 	.word	0x20000b28
 80061dc:	20000b2c 	.word	0x20000b2c
 80061e0:	20000b88 	.word	0x20000b88
 80061e4:	20000b90 	.word	0x20000b90
 80061e8:	20000b78 	.word	0x20000b78
 80061ec:	20000a74 	.word	0x20000a74
 80061f0:	20000a70 	.word	0x20000a70
 80061f4:	20000b80 	.word	0x20000b80
 80061f8:	20000b84 	.word	0x20000b84

080061fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006202:	4b2c      	ldr	r3, [pc, #176]	; (80062b4 <vTaskSwitchContext+0xb8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800620a:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <vTaskSwitchContext+0xbc>)
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006210:	e04c      	b.n	80062ac <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8006212:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <vTaskSwitchContext+0xbc>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006218:	4b28      	ldr	r3, [pc, #160]	; (80062bc <vTaskSwitchContext+0xc0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	fab3 f383 	clz	r3, r3
 8006224:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	f1c3 031f 	rsb	r3, r3, #31
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	4924      	ldr	r1, [pc, #144]	; (80062c0 <vTaskSwitchContext+0xc4>)
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	e7fe      	b.n	8006254 <vTaskSwitchContext+0x58>
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <vTaskSwitchContext+0xc4>)
 8006262:	4413      	add	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	3308      	adds	r3, #8
 8006278:	429a      	cmp	r2, r3
 800627a:	d104      	bne.n	8006286 <vTaskSwitchContext+0x8a>
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a0d      	ldr	r2, [pc, #52]	; (80062c4 <vTaskSwitchContext+0xc8>)
 800628e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006290:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <vTaskSwitchContext+0xc8>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <vTaskSwitchContext+0xcc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d102      	bne.n	80062a2 <vTaskSwitchContext+0xa6>
 800629c:	f7ff f9f6 	bl	800568c <SEGGER_SYSVIEW_OnIdle>
}
 80062a0:	e004      	b.n	80062ac <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80062a2:	4b08      	ldr	r3, [pc, #32]	; (80062c4 <vTaskSwitchContext+0xc8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fa50 	bl	800574c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000b98 	.word	0x20000b98
 80062b8:	20000b84 	.word	0x20000b84
 80062bc:	20000b78 	.word	0x20000b78
 80062c0:	20000a74 	.word	0x20000a74
 80062c4:	20000a70 	.word	0x20000a70
 80062c8:	20000b94 	.word	0x20000b94

080062cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062d4:	f000 f852 	bl	800637c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <prvIdleTask+0x28>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d9f9      	bls.n	80062d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <prvIdleTask+0x2c>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062f0:	e7f0      	b.n	80062d4 <prvIdleTask+0x8>
 80062f2:	bf00      	nop
 80062f4:	20000a74 	.word	0x20000a74
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	e00c      	b.n	8006322 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <prvInitialiseTaskLists+0x60>)
 8006314:	4413      	add	r3, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fbd8 	bl	8005acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3301      	adds	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b06      	cmp	r3, #6
 8006326:	d9ef      	bls.n	8006308 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006328:	480d      	ldr	r0, [pc, #52]	; (8006360 <prvInitialiseTaskLists+0x64>)
 800632a:	f7ff fbcf 	bl	8005acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800632e:	480d      	ldr	r0, [pc, #52]	; (8006364 <prvInitialiseTaskLists+0x68>)
 8006330:	f7ff fbcc 	bl	8005acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006334:	480c      	ldr	r0, [pc, #48]	; (8006368 <prvInitialiseTaskLists+0x6c>)
 8006336:	f7ff fbc9 	bl	8005acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800633a:	480c      	ldr	r0, [pc, #48]	; (800636c <prvInitialiseTaskLists+0x70>)
 800633c:	f7ff fbc6 	bl	8005acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006340:	480b      	ldr	r0, [pc, #44]	; (8006370 <prvInitialiseTaskLists+0x74>)
 8006342:	f7ff fbc3 	bl	8005acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <prvInitialiseTaskLists+0x78>)
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <prvInitialiseTaskLists+0x64>)
 800634a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <prvInitialiseTaskLists+0x7c>)
 800634e:	4a05      	ldr	r2, [pc, #20]	; (8006364 <prvInitialiseTaskLists+0x68>)
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000a74 	.word	0x20000a74
 8006360:	20000b00 	.word	0x20000b00
 8006364:	20000b14 	.word	0x20000b14
 8006368:	20000b30 	.word	0x20000b30
 800636c:	20000b44 	.word	0x20000b44
 8006370:	20000b5c 	.word	0x20000b5c
 8006374:	20000b28 	.word	0x20000b28
 8006378:	20000b2c 	.word	0x20000b2c

0800637c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006382:	e019      	b.n	80063b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006384:	f000 f940 	bl	8006608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <prvCheckTasksWaitingTermination+0x4c>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fbe7 	bl	8005b68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <prvCheckTasksWaitingTermination+0x50>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3b01      	subs	r3, #1
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <prvCheckTasksWaitingTermination+0x50>)
 80063a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ae:	f000 f959 	bl	8006664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f80e 	bl	80063d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e1      	bne.n	8006384 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20000b44 	.word	0x20000b44
 80063cc:	20000b70 	.word	0x20000b70
 80063d0:	20000b58 	.word	0x20000b58

080063d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fad1 	bl	8006988 <vPortFree>
			vPortFree( pxTCB );
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 face 	bl	8006988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <prvResetNextTaskUnblockTime+0x38>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvResetNextTaskUnblockTime+0x3c>)
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800640c:	e008      	b.n	8006420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640e:	4b07      	ldr	r3, [pc, #28]	; (800642c <prvResetNextTaskUnblockTime+0x38>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a04      	ldr	r2, [pc, #16]	; (8006430 <prvResetNextTaskUnblockTime+0x3c>)
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000b28 	.word	0x20000b28
 8006430:	20000b90 	.word	0x20000b90

08006434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b04      	subs	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800644c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b04      	subs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006464:	4a08      	ldr	r2, [pc, #32]	; (8006488 <pxPortInitialiseStack+0x54>)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b14      	subs	r3, #20
 800646e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3b20      	subs	r3, #32
 800647a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800647c:	68fb      	ldr	r3, [r7, #12]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	0800648d 	.word	0x0800648d

0800648c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006492:	2300      	movs	r3, #0
 8006494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <prvTaskExitError+0x4c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d009      	beq.n	80064b4 <prvTaskExitError+0x28>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	e7fe      	b.n	80064b2 <prvTaskExitError+0x26>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064c6:	bf00      	nop
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0fc      	beq.n	80064c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	20000008 	.word	0x20000008
 80064dc:	00000000 	.word	0x00000000

080064e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <pxCurrentTCBConst2>)
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	6808      	ldr	r0, [r1, #0]
 80064e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064ea:	f380 8809 	msr	PSP, r0
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80064fe:	4770      	bx	lr

08006500 <pxCurrentTCBConst2>:
 8006500:	20000a70 	.word	0x20000a70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006508:	4806      	ldr	r0, [pc, #24]	; (8006524 <prvPortStartFirstTask+0x1c>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	6800      	ldr	r0, [r0, #0]
 800650e:	f380 8808 	msr	MSP, r0
 8006512:	b662      	cpsie	i
 8006514:	b661      	cpsie	f
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	df00      	svc	0
 8006520:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006522:	bf00      	nop
 8006524:	e000ed08 	.word	0xe000ed08

08006528 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <xPortStartScheduler+0xcc>)
 8006530:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	22ff      	movs	r2, #255	; 0xff
 800653e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <xPortStartScheduler+0xd0>)
 8006554:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006556:	4b29      	ldr	r3, [pc, #164]	; (80065fc <xPortStartScheduler+0xd4>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800655c:	e009      	b.n	8006572 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800655e:	4b27      	ldr	r3, [pc, #156]	; (80065fc <xPortStartScheduler+0xd4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3b01      	subs	r3, #1
 8006564:	4a25      	ldr	r2, [pc, #148]	; (80065fc <xPortStartScheduler+0xd4>)
 8006566:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d0ef      	beq.n	800655e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <xPortStartScheduler+0xd4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1c3 0307 	rsb	r3, r3, #7
 8006586:	2b04      	cmp	r3, #4
 8006588:	d009      	beq.n	800659e <xPortStartScheduler+0x76>
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	e7fe      	b.n	800659c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <xPortStartScheduler+0xd4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <xPortStartScheduler+0xd4>)
 80065a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a8:	4b14      	ldr	r3, [pc, #80]	; (80065fc <xPortStartScheduler+0xd4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b0:	4a12      	ldr	r2, [pc, #72]	; (80065fc <xPortStartScheduler+0xd4>)
 80065b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065bc:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xPortStartScheduler+0xd8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <xPortStartScheduler+0xd8>)
 80065c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065c8:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <xPortStartScheduler+0xd8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a0c      	ldr	r2, [pc, #48]	; (8006600 <xPortStartScheduler+0xd8>)
 80065ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065d4:	f000 f8b8 	bl	8006748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <xPortStartScheduler+0xdc>)
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065de:	f7ff ff93 	bl	8006508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065e2:	f7ff fe0b 	bl	80061fc <vTaskSwitchContext>
	prvTaskExitError();
 80065e6:	f7ff ff51 	bl	800648c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	e000e400 	.word	0xe000e400
 80065f8:	20000b9c 	.word	0x20000b9c
 80065fc:	20000ba0 	.word	0x20000ba0
 8006600:	e000ed20 	.word	0xe000ed20
 8006604:	20000008 	.word	0x20000008

08006608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <vPortEnterCritical+0x54>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	4a0d      	ldr	r2, [pc, #52]	; (800665c <vPortEnterCritical+0x54>)
 8006628:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800662a:	4b0c      	ldr	r3, [pc, #48]	; (800665c <vPortEnterCritical+0x54>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10e      	bne.n	8006650 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <vPortEnterCritical+0x58>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <vPortEnterCritical+0x48>
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	e7fe      	b.n	800664e <vPortEnterCritical+0x46>
	}
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000008 	.word	0x20000008
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <vPortExitCritical+0x48>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <vPortExitCritical+0x22>
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	e7fe      	b.n	8006684 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <vPortExitCritical+0x48>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3b01      	subs	r3, #1
 800668c:	4a07      	ldr	r2, [pc, #28]	; (80066ac <vPortExitCritical+0x48>)
 800668e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <vPortExitCritical+0x48>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <vPortExitCritical+0x3e>
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bc80      	pop	{r7}
 80066aa:	4770      	bx	lr
 80066ac:	20000008 	.word	0x20000008

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066ca:	f380 8811 	msr	BASEPRI, r0
 80066ce:	f7ff fd95 	bl	80061fc <vTaskSwitchContext>
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066e6:	f380 8809 	msr	PSP, r0
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	4770      	bx	lr

080066f0 <pxCurrentTCBConst>:
 80066f0:	20000a70 	.word	0x20000a70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8006710:	f7fe ff42 	bl	8005598 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006714:	f7ff fcb6 	bl	8006084 <xTaskIncrementTick>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d006      	beq.n	800672c <SysTick_Handler+0x34>
		{
      traceISR_EXIT_TO_SCHEDULER();
 800671e:	f7fe ff99 	bl	8005654 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <SysTick_Handler+0x4c>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e001      	b.n	8006730 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800672c:	f7fe ff76 	bl	800561c <SEGGER_SYSVIEW_RecordExitISR>
 8006730:	2300      	movs	r3, #0
 8006732:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortSetupTimerInterrupt+0x30>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006752:	4b0a      	ldr	r3, [pc, #40]	; (800677c <vPortSetupTimerInterrupt+0x34>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006758:	4b09      	ldr	r3, [pc, #36]	; (8006780 <vPortSetupTimerInterrupt+0x38>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	099b      	lsrs	r3, r3, #6
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <vPortSetupTimerInterrupt+0x40>)
 8006766:	3b01      	subs	r3, #1
 8006768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <vPortSetupTimerInterrupt+0x30>)
 800676c:	2207      	movs	r2, #7
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	e000e010 	.word	0xe000e010
 800677c:	e000e018 	.word	0xe000e018
 8006780:	20000000 	.word	0x20000000
 8006784:	10624dd3 	.word	0x10624dd3
 8006788:	e000e014 	.word	0xe000e014

0800678c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006792:	f3ef 8305 	mrs	r3, IPSR
 8006796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d913      	bls.n	80067c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800679e:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <vPortValidateInterruptPriority+0x68>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <vPortValidateInterruptPriority+0x6c>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	7afa      	ldrb	r2, [r7, #11]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d209      	bcs.n	80067c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e7fe      	b.n	80067c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <vPortValidateInterruptPriority+0x70>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <vPortValidateInterruptPriority+0x74>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d909      	bls.n	80067ea <vPortValidateInterruptPriority+0x5e>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	e7fe      	b.n	80067e8 <vPortValidateInterruptPriority+0x5c>
	}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	e000e3f0 	.word	0xe000e3f0
 80067f8:	20000b9c 	.word	0x20000b9c
 80067fc:	e000ed0c 	.word	0xe000ed0c
 8006800:	20000ba0 	.word	0x20000ba0

08006804 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006810:	f7ff fb78 	bl	8005f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <pvPortMalloc+0x170>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800681c:	f000 f90c 	bl	8006a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006820:	4b55      	ldr	r3, [pc, #340]	; (8006978 <pvPortMalloc+0x174>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 808c 	bne.w	8006946 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006834:	2208      	movs	r2, #8
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f023 0307 	bic.w	r3, r3, #7
 800684c:	3308      	adds	r3, #8
 800684e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <pvPortMalloc+0x6a>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e7fe      	b.n	800686c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d068      	beq.n	8006946 <pvPortMalloc+0x142>
 8006874:	4b41      	ldr	r3, [pc, #260]	; (800697c <pvPortMalloc+0x178>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d863      	bhi.n	8006946 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800687e:	4b40      	ldr	r3, [pc, #256]	; (8006980 <pvPortMalloc+0x17c>)
 8006880:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006882:	4b3f      	ldr	r3, [pc, #252]	; (8006980 <pvPortMalloc+0x17c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006888:	e004      	b.n	8006894 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d903      	bls.n	80068a6 <pvPortMalloc+0xa2>
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f1      	bne.n	800688a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068a6:	4b33      	ldr	r3, [pc, #204]	; (8006974 <pvPortMalloc+0x170>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d04a      	beq.n	8006946 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	4413      	add	r3, r2
 80068b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	2308      	movs	r3, #8
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d91e      	bls.n	8006910 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4413      	add	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <pvPortMalloc+0xf4>
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	e7fe      	b.n	80068f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800690a:	69b8      	ldr	r0, [r7, #24]
 800690c:	f000 f8f6 	bl	8006afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <pvPortMalloc+0x178>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	4a18      	ldr	r2, [pc, #96]	; (800697c <pvPortMalloc+0x178>)
 800691c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <pvPortMalloc+0x178>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b18      	ldr	r3, [pc, #96]	; (8006984 <pvPortMalloc+0x180>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d203      	bcs.n	8006932 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <pvPortMalloc+0x178>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a15      	ldr	r2, [pc, #84]	; (8006984 <pvPortMalloc+0x180>)
 8006930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <pvPortMalloc+0x174>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	431a      	orrs	r2, r3
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006946:	f7ff faeb 	bl	8005f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	2b00      	cmp	r3, #0
 8006952:	d009      	beq.n	8006968 <pvPortMalloc+0x164>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e7fe      	b.n	8006966 <pvPortMalloc+0x162>
	return pvReturn;
 8006968:	69fb      	ldr	r3, [r7, #28]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	200017ac 	.word	0x200017ac
 8006978:	200017b8 	.word	0x200017b8
 800697c:	200017b0 	.word	0x200017b0
 8006980:	200017a4 	.word	0x200017a4
 8006984:	200017b4 	.word	0x200017b4

08006988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d046      	beq.n	8006a28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800699a:	2308      	movs	r3, #8
 800699c:	425b      	negs	r3, r3
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <vPortFree+0xa8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <vPortFree+0x42>
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	e7fe      	b.n	80069c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <vPortFree+0x5e>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	e7fe      	b.n	80069e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <vPortFree+0xa8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4013      	ands	r3, r2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d019      	beq.n	8006a28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d115      	bne.n	8006a28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortFree+0xa8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	401a      	ands	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a0c:	f7ff fa7a 	bl	8005f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <vPortFree+0xac>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4413      	add	r3, r2
 8006a1a:	4a06      	ldr	r2, [pc, #24]	; (8006a34 <vPortFree+0xac>)
 8006a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f000 f86c 	bl	8006afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a24:	f7ff fa7c 	bl	8005f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200017b8 	.word	0x200017b8
 8006a34:	200017b0 	.word	0x200017b0

08006a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a44:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <prvHeapInit+0xac>)
 8006a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <prvHeapInit+0xac>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <prvHeapInit+0xb0>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <prvHeapInit+0xb0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a15      	ldr	r2, [pc, #84]	; (8006aec <prvHeapInit+0xb4>)
 8006a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <prvHeapInit+0xb4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <prvHeapInit+0xb4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <prvHeapInit+0xb4>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <prvHeapInit+0xb8>)
 8006ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <prvHeapInit+0xbc>)
 8006ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <prvHeapInit+0xc0>)
 8006ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bc80      	pop	{r7}
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000ba4 	.word	0x20000ba4
 8006ae8:	200017a4 	.word	0x200017a4
 8006aec:	200017ac 	.word	0x200017ac
 8006af0:	200017b4 	.word	0x200017b4
 8006af4:	200017b0 	.word	0x200017b0
 8006af8:	200017b8 	.word	0x200017b8

08006afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <prvInsertBlockIntoFreeList+0xa8>)
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e002      	b.n	8006b10 <prvInsertBlockIntoFreeList+0x14>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d8f7      	bhi.n	8006b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d108      	bne.n	8006b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	441a      	add	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d118      	bne.n	8006b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d00d      	beq.n	8006b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	441a      	add	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e008      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <prvInsertBlockIntoFreeList+0xac>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e003      	b.n	8006b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	200017a4 	.word	0x200017a4
 8006ba8:	200017ac 	.word	0x200017ac

08006bac <__errno>:
 8006bac:	4b01      	ldr	r3, [pc, #4]	; (8006bb4 <__errno+0x8>)
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	2000000c 	.word	0x2000000c

08006bb8 <__libc_init_array>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	2500      	movs	r5, #0
 8006bbc:	4e0c      	ldr	r6, [pc, #48]	; (8006bf0 <__libc_init_array+0x38>)
 8006bbe:	4c0d      	ldr	r4, [pc, #52]	; (8006bf4 <__libc_init_array+0x3c>)
 8006bc0:	1ba4      	subs	r4, r4, r6
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	42a5      	cmp	r5, r4
 8006bc6:	d109      	bne.n	8006bdc <__libc_init_array+0x24>
 8006bc8:	f001 f866 	bl	8007c98 <_init>
 8006bcc:	2500      	movs	r5, #0
 8006bce:	4e0a      	ldr	r6, [pc, #40]	; (8006bf8 <__libc_init_array+0x40>)
 8006bd0:	4c0a      	ldr	r4, [pc, #40]	; (8006bfc <__libc_init_array+0x44>)
 8006bd2:	1ba4      	subs	r4, r4, r6
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	42a5      	cmp	r5, r4
 8006bd8:	d105      	bne.n	8006be6 <__libc_init_array+0x2e>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006be0:	4798      	blx	r3
 8006be2:	3501      	adds	r5, #1
 8006be4:	e7ee      	b.n	8006bc4 <__libc_init_array+0xc>
 8006be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bea:	4798      	blx	r3
 8006bec:	3501      	adds	r5, #1
 8006bee:	e7f2      	b.n	8006bd6 <__libc_init_array+0x1e>
 8006bf0:	08007e20 	.word	0x08007e20
 8006bf4:	08007e20 	.word	0x08007e20
 8006bf8:	08007e20 	.word	0x08007e20
 8006bfc:	08007e24 	.word	0x08007e24

08006c00 <memcmp>:
 8006c00:	b530      	push	{r4, r5, lr}
 8006c02:	2400      	movs	r4, #0
 8006c04:	42a2      	cmp	r2, r4
 8006c06:	d101      	bne.n	8006c0c <memcmp+0xc>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e007      	b.n	8006c1c <memcmp+0x1c>
 8006c0c:	5d03      	ldrb	r3, [r0, r4]
 8006c0e:	3401      	adds	r4, #1
 8006c10:	190d      	adds	r5, r1, r4
 8006c12:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006c16:	42ab      	cmp	r3, r5
 8006c18:	d0f4      	beq.n	8006c04 <memcmp+0x4>
 8006c1a:	1b58      	subs	r0, r3, r5
 8006c1c:	bd30      	pop	{r4, r5, pc}

08006c1e <memcpy>:
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	1e43      	subs	r3, r0, #1
 8006c22:	440a      	add	r2, r1
 8006c24:	4291      	cmp	r1, r2
 8006c26:	d100      	bne.n	8006c2a <memcpy+0xc>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c32:	e7f7      	b.n	8006c24 <memcpy+0x6>

08006c34 <memset>:
 8006c34:	4603      	mov	r3, r0
 8006c36:	4402      	add	r2, r0
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d100      	bne.n	8006c3e <memset+0xa>
 8006c3c:	4770      	bx	lr
 8006c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c42:	e7f9      	b.n	8006c38 <memset+0x4>

08006c44 <pow>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	b08f      	sub	sp, #60	; 0x3c
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4689      	mov	r9, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	f000 f955 	bl	8006f00 <__ieee754_pow>
 8006c56:	4fa1      	ldr	r7, [pc, #644]	; (8006edc <pow+0x298>)
 8006c58:	e9cd 0100 	strd	r0, r1, [sp]
 8006c5c:	f997 3000 	ldrsb.w	r3, [r7]
 8006c60:	463e      	mov	r6, r7
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	3301      	adds	r3, #1
 8006c66:	d05f      	beq.n	8006d28 <pow+0xe4>
 8006c68:	4622      	mov	r2, r4
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7f9 fec4 	bl	80009fc <__aeabi_dcmpun>
 8006c74:	4682      	mov	sl, r0
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d156      	bne.n	8006d28 <pow+0xe4>
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 febb 	bl	80009fc <__aeabi_dcmpun>
 8006c86:	9003      	str	r0, [sp, #12]
 8006c88:	b1e8      	cbz	r0, 8006cc6 <pow+0x82>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fe81 	bl	8000998 <__aeabi_dcmpeq>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d046      	beq.n	8006d28 <pow+0xe4>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	4b8f      	ldr	r3, [pc, #572]	; (8006ee0 <pow+0x29c>)
 8006ca2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006ca6:	9305      	str	r3, [sp, #20]
 8006ca8:	4b8e      	ldr	r3, [pc, #568]	; (8006ee4 <pow+0x2a0>)
 8006caa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d031      	beq.n	8006d20 <pow+0xdc>
 8006cbc:	a804      	add	r0, sp, #16
 8006cbe:	f000 fedf 	bl	8007a80 <matherr>
 8006cc2:	bb38      	cbnz	r0, 8006d14 <pow+0xd0>
 8006cc4:	e058      	b.n	8006d78 <pow+0x134>
 8006cc6:	f04f 0a00 	mov.w	sl, #0
 8006cca:	f04f 0b00 	mov.w	fp, #0
 8006cce:	4652      	mov	r2, sl
 8006cd0:	465b      	mov	r3, fp
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7f9 fe5f 	bl	8000998 <__aeabi_dcmpeq>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d051      	beq.n	8006d82 <pow+0x13e>
 8006cde:	4652      	mov	r2, sl
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7f9 fe57 	bl	8000998 <__aeabi_dcmpeq>
 8006cea:	4606      	mov	r6, r0
 8006cec:	b308      	cbz	r0, 8006d32 <pow+0xee>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	4b7b      	ldr	r3, [pc, #492]	; (8006ee0 <pow+0x29c>)
 8006cf4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006cf8:	9305      	str	r3, [sp, #20]
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006d00:	930c      	str	r3, [sp, #48]	; 0x30
 8006d02:	9b02      	ldr	r3, [sp, #8]
 8006d04:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0d7      	beq.n	8006cbc <pow+0x78>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4b75      	ldr	r3, [pc, #468]	; (8006ee4 <pow+0x2a0>)
 8006d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d16:	b11b      	cbz	r3, 8006d20 <pow+0xdc>
 8006d18:	f7ff ff48 	bl	8006bac <__errno>
 8006d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d1e:	6003      	str	r3, [r0, #0]
 8006d20:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006d24:	e9cd 3400 	strd	r3, r4, [sp]
 8006d28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d2c:	b00f      	add	sp, #60	; 0x3c
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f000 fe9d 	bl	8007a74 <finite>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0f4      	beq.n	8006d28 <pow+0xe4>
 8006d3e:	4652      	mov	r2, sl
 8006d40:	465b      	mov	r3, fp
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fe31 	bl	80009ac <__aeabi_dcmplt>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d0ec      	beq.n	8006d28 <pow+0xe4>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	4b63      	ldr	r3, [pc, #396]	; (8006ee0 <pow+0x29c>)
 8006d54:	960c      	str	r6, [sp, #48]	; 0x30
 8006d56:	9305      	str	r3, [sp, #20]
 8006d58:	f997 3000 	ldrsb.w	r3, [r7]
 8006d5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006d60:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006d64:	b913      	cbnz	r3, 8006d6c <pow+0x128>
 8006d66:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006d6a:	e7a7      	b.n	8006cbc <pow+0x78>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	495e      	ldr	r1, [pc, #376]	; (8006ee8 <pow+0x2a4>)
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d76:	d1a1      	bne.n	8006cbc <pow+0x78>
 8006d78:	f7ff ff18 	bl	8006bac <__errno>
 8006d7c:	2321      	movs	r3, #33	; 0x21
 8006d7e:	6003      	str	r3, [r0, #0]
 8006d80:	e7c8      	b.n	8006d14 <pow+0xd0>
 8006d82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d86:	f000 fe75 	bl	8007a74 <finite>
 8006d8a:	9002      	str	r0, [sp, #8]
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d177      	bne.n	8006e80 <pow+0x23c>
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f000 fe6e 	bl	8007a74 <finite>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d071      	beq.n	8006e80 <pow+0x23c>
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f000 fe68 	bl	8007a74 <finite>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d06b      	beq.n	8006e80 <pow+0x23c>
 8006da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7f9 fe24 	bl	80009fc <__aeabi_dcmpun>
 8006db4:	f997 7000 	ldrsb.w	r7, [r7]
 8006db8:	4b49      	ldr	r3, [pc, #292]	; (8006ee0 <pow+0x29c>)
 8006dba:	b1a0      	cbz	r0, 8006de6 <pow+0x1a2>
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006dce:	2f00      	cmp	r7, #0
 8006dd0:	d0c9      	beq.n	8006d66 <pow+0x122>
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	4659      	mov	r1, fp
 8006dda:	f7f9 fc9f 	bl	800071c <__aeabi_ddiv>
 8006dde:	2f02      	cmp	r7, #2
 8006de0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006de4:	e7c7      	b.n	8006d76 <pow+0x132>
 8006de6:	2203      	movs	r2, #3
 8006de8:	900c      	str	r0, [sp, #48]	; 0x30
 8006dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	2200      	movs	r2, #0
 8006df4:	4b3d      	ldr	r3, [pc, #244]	; (8006eec <pow+0x2a8>)
 8006df6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006dfa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006dfe:	f7f9 fb63 	bl	80004c8 <__aeabi_dmul>
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	bb17      	cbnz	r7, 8006e4e <pow+0x20a>
 8006e08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006e0c:	4b38      	ldr	r3, [pc, #224]	; (8006ef0 <pow+0x2ac>)
 8006e0e:	4640      	mov	r0, r8
 8006e10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e14:	4649      	mov	r1, r9
 8006e16:	4652      	mov	r2, sl
 8006e18:	465b      	mov	r3, fp
 8006e1a:	f7f9 fdc7 	bl	80009ac <__aeabi_dcmplt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d054      	beq.n	8006ecc <pow+0x288>
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f000 fe33 	bl	8007a90 <rint>
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	f7f9 fdb3 	bl	8000998 <__aeabi_dcmpeq>
 8006e32:	b920      	cbnz	r0, 8006e3e <pow+0x1fa>
 8006e34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006e38:	4b2e      	ldr	r3, [pc, #184]	; (8006ef4 <pow+0x2b0>)
 8006e3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e3e:	f996 3000 	ldrsb.w	r3, [r6]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d142      	bne.n	8006ecc <pow+0x288>
 8006e46:	f7ff feb1 	bl	8006bac <__errno>
 8006e4a:	2322      	movs	r3, #34	; 0x22
 8006e4c:	e797      	b.n	8006d7e <pow+0x13a>
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <pow+0x2b4>)
 8006e52:	4640      	mov	r0, r8
 8006e54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	465b      	mov	r3, fp
 8006e5e:	f7f9 fda5 	bl	80009ac <__aeabi_dcmplt>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d0eb      	beq.n	8006e3e <pow+0x1fa>
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f000 fe11 	bl	8007a90 <rint>
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	f7f9 fd91 	bl	8000998 <__aeabi_dcmpeq>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d1e1      	bne.n	8006e3e <pow+0x1fa>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <pow+0x2a4>)
 8006e7e:	e7dc      	b.n	8006e3a <pow+0x1f6>
 8006e80:	2200      	movs	r2, #0
 8006e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e86:	2300      	movs	r3, #0
 8006e88:	f7f9 fd86 	bl	8000998 <__aeabi_dcmpeq>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f af4b 	beq.w	8006d28 <pow+0xe4>
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f000 fded 	bl	8007a74 <finite>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f43f af44 	beq.w	8006d28 <pow+0xe4>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f000 fde6 	bl	8007a74 <finite>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f af3d 	beq.w	8006d28 <pow+0xe4>
 8006eae:	2304      	movs	r3, #4
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <pow+0x29c>)
 8006eb4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006eb8:	9305      	str	r3, [sp, #20]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006ec6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006eca:	e7b8      	b.n	8006e3e <pow+0x1fa>
 8006ecc:	a804      	add	r0, sp, #16
 8006ece:	f000 fdd7 	bl	8007a80 <matherr>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f47f af1e 	bne.w	8006d14 <pow+0xd0>
 8006ed8:	e7b5      	b.n	8006e46 <pow+0x202>
 8006eda:	bf00      	nop
 8006edc:	20000070 	.word	0x20000070
 8006ee0:	08007dd6 	.word	0x08007dd6
 8006ee4:	3ff00000 	.word	0x3ff00000
 8006ee8:	fff00000 	.word	0xfff00000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	47efffff 	.word	0x47efffff
 8006ef4:	c7efffff 	.word	0xc7efffff
 8006ef8:	7ff00000 	.word	0x7ff00000
 8006efc:	00000000 	.word	0x00000000

08006f00 <__ieee754_pow>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	b091      	sub	sp, #68	; 0x44
 8006f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f0a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8006f0e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006f12:	ea55 0302 	orrs.w	r3, r5, r2
 8006f16:	4607      	mov	r7, r0
 8006f18:	4688      	mov	r8, r1
 8006f1a:	f000 84b7 	beq.w	800788c <__ieee754_pow+0x98c>
 8006f1e:	4b80      	ldr	r3, [pc, #512]	; (8007120 <__ieee754_pow+0x220>)
 8006f20:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006f24:	429c      	cmp	r4, r3
 8006f26:	4689      	mov	r9, r1
 8006f28:	4682      	mov	sl, r0
 8006f2a:	dc09      	bgt.n	8006f40 <__ieee754_pow+0x40>
 8006f2c:	d103      	bne.n	8006f36 <__ieee754_pow+0x36>
 8006f2e:	b938      	cbnz	r0, 8006f40 <__ieee754_pow+0x40>
 8006f30:	42a5      	cmp	r5, r4
 8006f32:	dc0d      	bgt.n	8006f50 <__ieee754_pow+0x50>
 8006f34:	e001      	b.n	8006f3a <__ieee754_pow+0x3a>
 8006f36:	429d      	cmp	r5, r3
 8006f38:	dc02      	bgt.n	8006f40 <__ieee754_pow+0x40>
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	d10e      	bne.n	8006f5c <__ieee754_pow+0x5c>
 8006f3e:	b16a      	cbz	r2, 8006f5c <__ieee754_pow+0x5c>
 8006f40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006f44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f48:	ea54 030a 	orrs.w	r3, r4, sl
 8006f4c:	f000 849e 	beq.w	800788c <__ieee754_pow+0x98c>
 8006f50:	4874      	ldr	r0, [pc, #464]	; (8007124 <__ieee754_pow+0x224>)
 8006f52:	b011      	add	sp, #68	; 0x44
 8006f54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	f000 bd94 	b.w	8007a84 <nan>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	da53      	bge.n	800700a <__ieee754_pow+0x10a>
 8006f62:	4b71      	ldr	r3, [pc, #452]	; (8007128 <__ieee754_pow+0x228>)
 8006f64:	429d      	cmp	r5, r3
 8006f66:	dc4e      	bgt.n	8007006 <__ieee754_pow+0x106>
 8006f68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006f6c:	429d      	cmp	r5, r3
 8006f6e:	dd4c      	ble.n	800700a <__ieee754_pow+0x10a>
 8006f70:	152b      	asrs	r3, r5, #20
 8006f72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006f76:	2b14      	cmp	r3, #20
 8006f78:	dd28      	ble.n	8006fcc <__ieee754_pow+0xcc>
 8006f7a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006f7e:	fa22 f103 	lsr.w	r1, r2, r3
 8006f82:	fa01 f303 	lsl.w	r3, r1, r3
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d13f      	bne.n	800700a <__ieee754_pow+0x10a>
 8006f8a:	f001 0101 	and.w	r1, r1, #1
 8006f8e:	f1c1 0302 	rsb	r3, r1, #2
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d15c      	bne.n	8007052 <__ieee754_pow+0x152>
 8006f98:	4b61      	ldr	r3, [pc, #388]	; (8007120 <__ieee754_pow+0x220>)
 8006f9a:	429d      	cmp	r5, r3
 8006f9c:	d126      	bne.n	8006fec <__ieee754_pow+0xec>
 8006f9e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006fa2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006fa6:	ea53 030a 	orrs.w	r3, r3, sl
 8006faa:	f000 846f 	beq.w	800788c <__ieee754_pow+0x98c>
 8006fae:	4b5f      	ldr	r3, [pc, #380]	; (800712c <__ieee754_pow+0x22c>)
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	dd2c      	ble.n	800700e <__ieee754_pow+0x10e>
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	f280 846f 	bge.w	8007898 <__ieee754_pow+0x998>
 8006fba:	f04f 0b00 	mov.w	fp, #0
 8006fbe:	f04f 0c00 	mov.w	ip, #0
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	4661      	mov	r1, ip
 8006fc6:	b011      	add	sp, #68	; 0x44
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	d13e      	bne.n	800704e <__ieee754_pow+0x14e>
 8006fd0:	f1c3 0314 	rsb	r3, r3, #20
 8006fd4:	fa45 f103 	asr.w	r1, r5, r3
 8006fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	f040 8463 	bne.w	80078a8 <__ieee754_pow+0x9a8>
 8006fe2:	f001 0101 	and.w	r1, r1, #1
 8006fe6:	f1c1 0302 	rsb	r3, r1, #2
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4b50      	ldr	r3, [pc, #320]	; (8007130 <__ieee754_pow+0x230>)
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	d114      	bne.n	800701c <__ieee754_pow+0x11c>
 8006ff2:	2e00      	cmp	r6, #0
 8006ff4:	f280 8454 	bge.w	80078a0 <__ieee754_pow+0x9a0>
 8006ff8:	463a      	mov	r2, r7
 8006ffa:	4643      	mov	r3, r8
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	494c      	ldr	r1, [pc, #304]	; (8007130 <__ieee754_pow+0x230>)
 8007000:	f7f9 fb8c 	bl	800071c <__aeabi_ddiv>
 8007004:	e013      	b.n	800702e <__ieee754_pow+0x12e>
 8007006:	2302      	movs	r3, #2
 8007008:	e7c3      	b.n	8006f92 <__ieee754_pow+0x92>
 800700a:	2300      	movs	r3, #0
 800700c:	e7c1      	b.n	8006f92 <__ieee754_pow+0x92>
 800700e:	2e00      	cmp	r6, #0
 8007010:	dad3      	bge.n	8006fba <__ieee754_pow+0xba>
 8007012:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007016:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800701a:	e7d2      	b.n	8006fc2 <__ieee754_pow+0xc2>
 800701c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007020:	d108      	bne.n	8007034 <__ieee754_pow+0x134>
 8007022:	463a      	mov	r2, r7
 8007024:	4643      	mov	r3, r8
 8007026:	4638      	mov	r0, r7
 8007028:	4641      	mov	r1, r8
 800702a:	f7f9 fa4d 	bl	80004c8 <__aeabi_dmul>
 800702e:	4683      	mov	fp, r0
 8007030:	468c      	mov	ip, r1
 8007032:	e7c6      	b.n	8006fc2 <__ieee754_pow+0xc2>
 8007034:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <__ieee754_pow+0x234>)
 8007036:	429e      	cmp	r6, r3
 8007038:	d10b      	bne.n	8007052 <__ieee754_pow+0x152>
 800703a:	f1b9 0f00 	cmp.w	r9, #0
 800703e:	db08      	blt.n	8007052 <__ieee754_pow+0x152>
 8007040:	4638      	mov	r0, r7
 8007042:	4641      	mov	r1, r8
 8007044:	b011      	add	sp, #68	; 0x44
 8007046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f000 bc63 	b.w	8007914 <__ieee754_sqrt>
 800704e:	2300      	movs	r3, #0
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	4638      	mov	r0, r7
 8007054:	4641      	mov	r1, r8
 8007056:	f000 fd09 	bl	8007a6c <fabs>
 800705a:	4683      	mov	fp, r0
 800705c:	468c      	mov	ip, r1
 800705e:	f1ba 0f00 	cmp.w	sl, #0
 8007062:	d12b      	bne.n	80070bc <__ieee754_pow+0x1bc>
 8007064:	b124      	cbz	r4, 8007070 <__ieee754_pow+0x170>
 8007066:	4b32      	ldr	r3, [pc, #200]	; (8007130 <__ieee754_pow+0x230>)
 8007068:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800706c:	429a      	cmp	r2, r3
 800706e:	d125      	bne.n	80070bc <__ieee754_pow+0x1bc>
 8007070:	2e00      	cmp	r6, #0
 8007072:	da07      	bge.n	8007084 <__ieee754_pow+0x184>
 8007074:	465a      	mov	r2, fp
 8007076:	4663      	mov	r3, ip
 8007078:	2000      	movs	r0, #0
 800707a:	492d      	ldr	r1, [pc, #180]	; (8007130 <__ieee754_pow+0x230>)
 800707c:	f7f9 fb4e 	bl	800071c <__aeabi_ddiv>
 8007080:	4683      	mov	fp, r0
 8007082:	468c      	mov	ip, r1
 8007084:	f1b9 0f00 	cmp.w	r9, #0
 8007088:	da9b      	bge.n	8006fc2 <__ieee754_pow+0xc2>
 800708a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800708e:	9b00      	ldr	r3, [sp, #0]
 8007090:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007094:	4323      	orrs	r3, r4
 8007096:	d108      	bne.n	80070aa <__ieee754_pow+0x1aa>
 8007098:	465a      	mov	r2, fp
 800709a:	4663      	mov	r3, ip
 800709c:	4658      	mov	r0, fp
 800709e:	4661      	mov	r1, ip
 80070a0:	f7f9 f85a 	bl	8000158 <__aeabi_dsub>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e7aa      	b.n	8007000 <__ieee754_pow+0x100>
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d188      	bne.n	8006fc2 <__ieee754_pow+0xc2>
 80070b0:	4658      	mov	r0, fp
 80070b2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80070b6:	4683      	mov	fp, r0
 80070b8:	469c      	mov	ip, r3
 80070ba:	e782      	b.n	8006fc2 <__ieee754_pow+0xc2>
 80070bc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80070c0:	f109 33ff 	add.w	r3, r9, #4294967295
 80070c4:	930d      	str	r3, [sp, #52]	; 0x34
 80070c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070c8:	9b00      	ldr	r3, [sp, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	d104      	bne.n	80070d8 <__ieee754_pow+0x1d8>
 80070ce:	463a      	mov	r2, r7
 80070d0:	4643      	mov	r3, r8
 80070d2:	4638      	mov	r0, r7
 80070d4:	4641      	mov	r1, r8
 80070d6:	e7e3      	b.n	80070a0 <__ieee754_pow+0x1a0>
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <__ieee754_pow+0x238>)
 80070da:	429d      	cmp	r5, r3
 80070dc:	f340 80fe 	ble.w	80072dc <__ieee754_pow+0x3dc>
 80070e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80070e4:	429d      	cmp	r5, r3
 80070e6:	dd0b      	ble.n	8007100 <__ieee754_pow+0x200>
 80070e8:	4b10      	ldr	r3, [pc, #64]	; (800712c <__ieee754_pow+0x22c>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	dc0e      	bgt.n	800710c <__ieee754_pow+0x20c>
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	f6bf af63 	bge.w	8006fba <__ieee754_pow+0xba>
 80070f4:	a308      	add	r3, pc, #32	; (adr r3, 8007118 <__ieee754_pow+0x218>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	e794      	b.n	800702a <__ieee754_pow+0x12a>
 8007100:	4b0e      	ldr	r3, [pc, #56]	; (800713c <__ieee754_pow+0x23c>)
 8007102:	429c      	cmp	r4, r3
 8007104:	ddf3      	ble.n	80070ee <__ieee754_pow+0x1ee>
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <__ieee754_pow+0x230>)
 8007108:	429c      	cmp	r4, r3
 800710a:	dd19      	ble.n	8007140 <__ieee754_pow+0x240>
 800710c:	2e00      	cmp	r6, #0
 800710e:	dcf1      	bgt.n	80070f4 <__ieee754_pow+0x1f4>
 8007110:	e753      	b.n	8006fba <__ieee754_pow+0xba>
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	8800759c 	.word	0x8800759c
 800711c:	7e37e43c 	.word	0x7e37e43c
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	08007dd9 	.word	0x08007dd9
 8007128:	433fffff 	.word	0x433fffff
 800712c:	3fefffff 	.word	0x3fefffff
 8007130:	3ff00000 	.word	0x3ff00000
 8007134:	3fe00000 	.word	0x3fe00000
 8007138:	41e00000 	.word	0x41e00000
 800713c:	3feffffe 	.word	0x3feffffe
 8007140:	4661      	mov	r1, ip
 8007142:	2200      	movs	r2, #0
 8007144:	4b60      	ldr	r3, [pc, #384]	; (80072c8 <__ieee754_pow+0x3c8>)
 8007146:	4658      	mov	r0, fp
 8007148:	f7f9 f806 	bl	8000158 <__aeabi_dsub>
 800714c:	a354      	add	r3, pc, #336	; (adr r3, 80072a0 <__ieee754_pow+0x3a0>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	4604      	mov	r4, r0
 8007154:	460d      	mov	r5, r1
 8007156:	f7f9 f9b7 	bl	80004c8 <__aeabi_dmul>
 800715a:	a353      	add	r3, pc, #332	; (adr r3, 80072a8 <__ieee754_pow+0x3a8>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	4606      	mov	r6, r0
 8007162:	460f      	mov	r7, r1
 8007164:	4620      	mov	r0, r4
 8007166:	4629      	mov	r1, r5
 8007168:	f7f9 f9ae 	bl	80004c8 <__aeabi_dmul>
 800716c:	2200      	movs	r2, #0
 800716e:	4682      	mov	sl, r0
 8007170:	468b      	mov	fp, r1
 8007172:	4b56      	ldr	r3, [pc, #344]	; (80072cc <__ieee754_pow+0x3cc>)
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f9 f9a6 	bl	80004c8 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	a14b      	add	r1, pc, #300	; (adr r1, 80072b0 <__ieee754_pow+0x3b0>)
 8007182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007186:	f7f8 ffe7 	bl	8000158 <__aeabi_dsub>
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f7f9 f99b 	bl	80004c8 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	2000      	movs	r0, #0
 8007198:	494d      	ldr	r1, [pc, #308]	; (80072d0 <__ieee754_pow+0x3d0>)
 800719a:	f7f8 ffdd 	bl	8000158 <__aeabi_dsub>
 800719e:	4622      	mov	r2, r4
 80071a0:	462b      	mov	r3, r5
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	4620      	mov	r0, r4
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7f9 f98d 	bl	80004c8 <__aeabi_dmul>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4640      	mov	r0, r8
 80071b4:	4649      	mov	r1, r9
 80071b6:	f7f9 f987 	bl	80004c8 <__aeabi_dmul>
 80071ba:	a33f      	add	r3, pc, #252	; (adr r3, 80072b8 <__ieee754_pow+0x3b8>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f982 	bl	80004c8 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	f7f8 ffc4 	bl	8000158 <__aeabi_dsub>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f8 ffbe 	bl	800015c <__adddf3>
 80071e0:	2000      	movs	r0, #0
 80071e2:	468b      	mov	fp, r1
 80071e4:	4682      	mov	sl, r0
 80071e6:	4632      	mov	r2, r6
 80071e8:	463b      	mov	r3, r7
 80071ea:	f7f8 ffb5 	bl	8000158 <__aeabi_dsub>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4620      	mov	r0, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	f7f8 ffaf 	bl	8000158 <__aeabi_dsub>
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071fe:	3b01      	subs	r3, #1
 8007200:	4313      	orrs	r3, r2
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	bf0c      	ite	eq
 8007208:	4c32      	ldreq	r4, [pc, #200]	; (80072d4 <__ieee754_pow+0x3d4>)
 800720a:	4c2f      	ldrne	r4, [pc, #188]	; (80072c8 <__ieee754_pow+0x3c8>)
 800720c:	4606      	mov	r6, r0
 800720e:	e9cd 3400 	strd	r3, r4, [sp]
 8007212:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007216:	2400      	movs	r4, #0
 8007218:	460f      	mov	r7, r1
 800721a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	f7f8 ff99 	bl	8000158 <__aeabi_dsub>
 8007226:	4652      	mov	r2, sl
 8007228:	465b      	mov	r3, fp
 800722a:	f7f9 f94d 	bl	80004c8 <__aeabi_dmul>
 800722e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007232:	4680      	mov	r8, r0
 8007234:	4689      	mov	r9, r1
 8007236:	4630      	mov	r0, r6
 8007238:	4639      	mov	r1, r7
 800723a:	f7f9 f945 	bl	80004c8 <__aeabi_dmul>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f8 ff89 	bl	800015c <__adddf3>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	4680      	mov	r8, r0
 8007250:	4689      	mov	r9, r1
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 f937 	bl	80004c8 <__aeabi_dmul>
 800725a:	4604      	mov	r4, r0
 800725c:	460d      	mov	r5, r1
 800725e:	460b      	mov	r3, r1
 8007260:	4602      	mov	r2, r0
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800726a:	f7f8 ff77 	bl	800015c <__adddf3>
 800726e:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <__ieee754_pow+0x3d8>)
 8007270:	4682      	mov	sl, r0
 8007272:	4299      	cmp	r1, r3
 8007274:	460f      	mov	r7, r1
 8007276:	460e      	mov	r6, r1
 8007278:	f340 82e1 	ble.w	800783e <__ieee754_pow+0x93e>
 800727c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007280:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007284:	4303      	orrs	r3, r0
 8007286:	f000 81db 	beq.w	8007640 <__ieee754_pow+0x740>
 800728a:	a30d      	add	r3, pc, #52	; (adr r3, 80072c0 <__ieee754_pow+0x3c0>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007294:	f7f9 f918 	bl	80004c8 <__aeabi_dmul>
 8007298:	a309      	add	r3, pc, #36	; (adr r3, 80072c0 <__ieee754_pow+0x3c0>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	e6c4      	b.n	800702a <__ieee754_pow+0x12a>
 80072a0:	60000000 	.word	0x60000000
 80072a4:	3ff71547 	.word	0x3ff71547
 80072a8:	f85ddf44 	.word	0xf85ddf44
 80072ac:	3e54ae0b 	.word	0x3e54ae0b
 80072b0:	55555555 	.word	0x55555555
 80072b4:	3fd55555 	.word	0x3fd55555
 80072b8:	652b82fe 	.word	0x652b82fe
 80072bc:	3ff71547 	.word	0x3ff71547
 80072c0:	8800759c 	.word	0x8800759c
 80072c4:	7e37e43c 	.word	0x7e37e43c
 80072c8:	3ff00000 	.word	0x3ff00000
 80072cc:	3fd00000 	.word	0x3fd00000
 80072d0:	3fe00000 	.word	0x3fe00000
 80072d4:	bff00000 	.word	0xbff00000
 80072d8:	408fffff 	.word	0x408fffff
 80072dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	da08      	bge.n	80072f8 <__ieee754_pow+0x3f8>
 80072e6:	4658      	mov	r0, fp
 80072e8:	4bcd      	ldr	r3, [pc, #820]	; (8007620 <__ieee754_pow+0x720>)
 80072ea:	4661      	mov	r1, ip
 80072ec:	f7f9 f8ec 	bl	80004c8 <__aeabi_dmul>
 80072f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80072f4:	4683      	mov	fp, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	1523      	asrs	r3, r4, #20
 80072fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80072fe:	4413      	add	r3, r2
 8007300:	930c      	str	r3, [sp, #48]	; 0x30
 8007302:	4bc8      	ldr	r3, [pc, #800]	; (8007624 <__ieee754_pow+0x724>)
 8007304:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007308:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800730c:	429c      	cmp	r4, r3
 800730e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007312:	dd08      	ble.n	8007326 <__ieee754_pow+0x426>
 8007314:	4bc4      	ldr	r3, [pc, #784]	; (8007628 <__ieee754_pow+0x728>)
 8007316:	429c      	cmp	r4, r3
 8007318:	f340 815b 	ble.w	80075d2 <__ieee754_pow+0x6d2>
 800731c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800731e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007322:	3301      	adds	r3, #1
 8007324:	930c      	str	r3, [sp, #48]	; 0x30
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	4658      	mov	r0, fp
 800732c:	4629      	mov	r1, r5
 800732e:	4bbf      	ldr	r3, [pc, #764]	; (800762c <__ieee754_pow+0x72c>)
 8007330:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007334:	444b      	add	r3, r9
 8007336:	e9d3 3400 	ldrd	r3, r4, [r3]
 800733a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800733e:	461a      	mov	r2, r3
 8007340:	4623      	mov	r3, r4
 8007342:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007346:	f7f8 ff07 	bl	8000158 <__aeabi_dsub>
 800734a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007356:	f7f8 ff01 	bl	800015c <__adddf3>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	2000      	movs	r0, #0
 8007360:	49b3      	ldr	r1, [pc, #716]	; (8007630 <__ieee754_pow+0x730>)
 8007362:	f7f9 f9db 	bl	800071c <__aeabi_ddiv>
 8007366:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 f8a9 	bl	80004c8 <__aeabi_dmul>
 8007376:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800737a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800737e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	106d      	asrs	r5, r5, #1
 8007388:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007392:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007396:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800739a:	4650      	mov	r0, sl
 800739c:	4659      	mov	r1, fp
 800739e:	4614      	mov	r4, r2
 80073a0:	461d      	mov	r5, r3
 80073a2:	f7f9 f891 	bl	80004c8 <__aeabi_dmul>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f8 fed3 	bl	8000158 <__aeabi_dsub>
 80073b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073b6:	4606      	mov	r6, r0
 80073b8:	460f      	mov	r7, r1
 80073ba:	4620      	mov	r0, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	f7f8 fecb 	bl	8000158 <__aeabi_dsub>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073ca:	f7f8 fec5 	bl	8000158 <__aeabi_dsub>
 80073ce:	4652      	mov	r2, sl
 80073d0:	465b      	mov	r3, fp
 80073d2:	f7f9 f879 	bl	80004c8 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f8 febb 	bl	8000158 <__aeabi_dsub>
 80073e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073e6:	f7f9 f86f 	bl	80004c8 <__aeabi_dmul>
 80073ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	f7f9 f867 	bl	80004c8 <__aeabi_dmul>
 80073fa:	a377      	add	r3, pc, #476	; (adr r3, 80075d8 <__ieee754_pow+0x6d8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
 8007404:	f7f9 f860 	bl	80004c8 <__aeabi_dmul>
 8007408:	a375      	add	r3, pc, #468	; (adr r3, 80075e0 <__ieee754_pow+0x6e0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f8 fea5 	bl	800015c <__adddf3>
 8007412:	4622      	mov	r2, r4
 8007414:	462b      	mov	r3, r5
 8007416:	f7f9 f857 	bl	80004c8 <__aeabi_dmul>
 800741a:	a373      	add	r3, pc, #460	; (adr r3, 80075e8 <__ieee754_pow+0x6e8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f8 fe9c 	bl	800015c <__adddf3>
 8007424:	4622      	mov	r2, r4
 8007426:	462b      	mov	r3, r5
 8007428:	f7f9 f84e 	bl	80004c8 <__aeabi_dmul>
 800742c:	a370      	add	r3, pc, #448	; (adr r3, 80075f0 <__ieee754_pow+0x6f0>)
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	f7f8 fe93 	bl	800015c <__adddf3>
 8007436:	4622      	mov	r2, r4
 8007438:	462b      	mov	r3, r5
 800743a:	f7f9 f845 	bl	80004c8 <__aeabi_dmul>
 800743e:	a36e      	add	r3, pc, #440	; (adr r3, 80075f8 <__ieee754_pow+0x6f8>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f7f8 fe8a 	bl	800015c <__adddf3>
 8007448:	4622      	mov	r2, r4
 800744a:	462b      	mov	r3, r5
 800744c:	f7f9 f83c 	bl	80004c8 <__aeabi_dmul>
 8007450:	a36b      	add	r3, pc, #428	; (adr r3, 8007600 <__ieee754_pow+0x700>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f8 fe81 	bl	800015c <__adddf3>
 800745a:	4622      	mov	r2, r4
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	462b      	mov	r3, r5
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f9 f82f 	bl	80004c8 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f9 f829 	bl	80004c8 <__aeabi_dmul>
 8007476:	4604      	mov	r4, r0
 8007478:	460d      	mov	r5, r1
 800747a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747e:	4652      	mov	r2, sl
 8007480:	465b      	mov	r3, fp
 8007482:	f7f8 fe6b 	bl	800015c <__adddf3>
 8007486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800748a:	f7f9 f81d 	bl	80004c8 <__aeabi_dmul>
 800748e:	4622      	mov	r2, r4
 8007490:	462b      	mov	r3, r5
 8007492:	f7f8 fe63 	bl	800015c <__adddf3>
 8007496:	4652      	mov	r2, sl
 8007498:	4606      	mov	r6, r0
 800749a:	460f      	mov	r7, r1
 800749c:	465b      	mov	r3, fp
 800749e:	4650      	mov	r0, sl
 80074a0:	4659      	mov	r1, fp
 80074a2:	f7f9 f811 	bl	80004c8 <__aeabi_dmul>
 80074a6:	2200      	movs	r2, #0
 80074a8:	4b62      	ldr	r3, [pc, #392]	; (8007634 <__ieee754_pow+0x734>)
 80074aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074ae:	f7f8 fe55 	bl	800015c <__adddf3>
 80074b2:	4632      	mov	r2, r6
 80074b4:	463b      	mov	r3, r7
 80074b6:	f7f8 fe51 	bl	800015c <__adddf3>
 80074ba:	9804      	ldr	r0, [sp, #16]
 80074bc:	460d      	mov	r5, r1
 80074be:	4604      	mov	r4, r0
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4650      	mov	r0, sl
 80074c6:	4659      	mov	r1, fp
 80074c8:	f7f8 fffe 	bl	80004c8 <__aeabi_dmul>
 80074cc:	2200      	movs	r2, #0
 80074ce:	4682      	mov	sl, r0
 80074d0:	468b      	mov	fp, r1
 80074d2:	4b58      	ldr	r3, [pc, #352]	; (8007634 <__ieee754_pow+0x734>)
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7f8 fe3e 	bl	8000158 <__aeabi_dsub>
 80074dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074e0:	f7f8 fe3a 	bl	8000158 <__aeabi_dsub>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fe34 	bl	8000158 <__aeabi_dsub>
 80074f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f4:	f7f8 ffe8 	bl	80004c8 <__aeabi_dmul>
 80074f8:	4622      	mov	r2, r4
 80074fa:	4606      	mov	r6, r0
 80074fc:	460f      	mov	r7, r1
 80074fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007502:	462b      	mov	r3, r5
 8007504:	f7f8 ffe0 	bl	80004c8 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 fe24 	bl	800015c <__adddf3>
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4650      	mov	r0, sl
 800751e:	4659      	mov	r1, fp
 8007520:	f7f8 fe1c 	bl	800015c <__adddf3>
 8007524:	a338      	add	r3, pc, #224	; (adr r3, 8007608 <__ieee754_pow+0x708>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	9804      	ldr	r0, [sp, #16]
 800752c:	460d      	mov	r5, r1
 800752e:	4604      	mov	r4, r0
 8007530:	f7f8 ffca 	bl	80004c8 <__aeabi_dmul>
 8007534:	4652      	mov	r2, sl
 8007536:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800753a:	465b      	mov	r3, fp
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f8 fe0a 	bl	8000158 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f8 fe04 	bl	8000158 <__aeabi_dsub>
 8007550:	a32f      	add	r3, pc, #188	; (adr r3, 8007610 <__ieee754_pow+0x710>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f7f8 ffb7 	bl	80004c8 <__aeabi_dmul>
 800755a:	a32f      	add	r3, pc, #188	; (adr r3, 8007618 <__ieee754_pow+0x718>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	4606      	mov	r6, r0
 8007562:	460f      	mov	r7, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 ffae 	bl	80004c8 <__aeabi_dmul>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f8 fdf2 	bl	800015c <__adddf3>
 8007578:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <__ieee754_pow+0x738>)
 800757a:	444b      	add	r3, r9
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f8 fdec 	bl	800015c <__adddf3>
 8007584:	4604      	mov	r4, r0
 8007586:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007588:	460d      	mov	r5, r1
 800758a:	f7f8 ff33 	bl	80003f4 <__aeabi_i2d>
 800758e:	4606      	mov	r6, r0
 8007590:	460f      	mov	r7, r1
 8007592:	4b2a      	ldr	r3, [pc, #168]	; (800763c <__ieee754_pow+0x73c>)
 8007594:	4622      	mov	r2, r4
 8007596:	444b      	add	r3, r9
 8007598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800759c:	462b      	mov	r3, r5
 800759e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a2:	f7f8 fddb 	bl	800015c <__adddf3>
 80075a6:	4642      	mov	r2, r8
 80075a8:	464b      	mov	r3, r9
 80075aa:	f7f8 fdd7 	bl	800015c <__adddf3>
 80075ae:	4632      	mov	r2, r6
 80075b0:	463b      	mov	r3, r7
 80075b2:	f7f8 fdd3 	bl	800015c <__adddf3>
 80075b6:	9804      	ldr	r0, [sp, #16]
 80075b8:	4632      	mov	r2, r6
 80075ba:	463b      	mov	r3, r7
 80075bc:	4682      	mov	sl, r0
 80075be:	468b      	mov	fp, r1
 80075c0:	f7f8 fdca 	bl	8000158 <__aeabi_dsub>
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	f7f8 fdc6 	bl	8000158 <__aeabi_dsub>
 80075cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075d0:	e60b      	b.n	80071ea <__ieee754_pow+0x2ea>
 80075d2:	f04f 0801 	mov.w	r8, #1
 80075d6:	e6a8      	b.n	800732a <__ieee754_pow+0x42a>
 80075d8:	4a454eef 	.word	0x4a454eef
 80075dc:	3fca7e28 	.word	0x3fca7e28
 80075e0:	93c9db65 	.word	0x93c9db65
 80075e4:	3fcd864a 	.word	0x3fcd864a
 80075e8:	a91d4101 	.word	0xa91d4101
 80075ec:	3fd17460 	.word	0x3fd17460
 80075f0:	518f264d 	.word	0x518f264d
 80075f4:	3fd55555 	.word	0x3fd55555
 80075f8:	db6fabff 	.word	0xdb6fabff
 80075fc:	3fdb6db6 	.word	0x3fdb6db6
 8007600:	33333303 	.word	0x33333303
 8007604:	3fe33333 	.word	0x3fe33333
 8007608:	e0000000 	.word	0xe0000000
 800760c:	3feec709 	.word	0x3feec709
 8007610:	dc3a03fd 	.word	0xdc3a03fd
 8007614:	3feec709 	.word	0x3feec709
 8007618:	145b01f5 	.word	0x145b01f5
 800761c:	be3e2fe0 	.word	0xbe3e2fe0
 8007620:	43400000 	.word	0x43400000
 8007624:	0003988e 	.word	0x0003988e
 8007628:	000bb679 	.word	0x000bb679
 800762c:	08007de0 	.word	0x08007de0
 8007630:	3ff00000 	.word	0x3ff00000
 8007634:	40080000 	.word	0x40080000
 8007638:	08007e00 	.word	0x08007e00
 800763c:	08007df0 	.word	0x08007df0
 8007640:	a39b      	add	r3, pc, #620	; (adr r3, 80078b0 <__ieee754_pow+0x9b0>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	f7f8 fd87 	bl	800015c <__adddf3>
 800764e:	4622      	mov	r2, r4
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	462b      	mov	r3, r5
 8007656:	4650      	mov	r0, sl
 8007658:	4639      	mov	r1, r7
 800765a:	f7f8 fd7d 	bl	8000158 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007666:	f7f9 f9bf 	bl	80009e8 <__aeabi_dcmpgt>
 800766a:	2800      	cmp	r0, #0
 800766c:	f47f ae0d 	bne.w	800728a <__ieee754_pow+0x38a>
 8007670:	4aa3      	ldr	r2, [pc, #652]	; (8007900 <__ieee754_pow+0xa00>)
 8007672:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007676:	4293      	cmp	r3, r2
 8007678:	f340 8103 	ble.w	8007882 <__ieee754_pow+0x982>
 800767c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007680:	2000      	movs	r0, #0
 8007682:	151b      	asrs	r3, r3, #20
 8007684:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007688:	fa4a f303 	asr.w	r3, sl, r3
 800768c:	4433      	add	r3, r6
 800768e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007692:	4f9c      	ldr	r7, [pc, #624]	; (8007904 <__ieee754_pow+0xa04>)
 8007694:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007698:	4117      	asrs	r7, r2
 800769a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800769e:	ea23 0107 	bic.w	r1, r3, r7
 80076a2:	f1c2 0214 	rsb	r2, r2, #20
 80076a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80076aa:	fa4a fa02 	asr.w	sl, sl, r2
 80076ae:	2e00      	cmp	r6, #0
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	bfb8      	it	lt
 80076ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80076be:	f7f8 fd4b 	bl	8000158 <__aeabi_dsub>
 80076c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	4642      	mov	r2, r8
 80076cc:	464b      	mov	r3, r9
 80076ce:	f7f8 fd45 	bl	800015c <__adddf3>
 80076d2:	a379      	add	r3, pc, #484	; (adr r3, 80078b8 <__ieee754_pow+0x9b8>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	2000      	movs	r0, #0
 80076da:	460d      	mov	r5, r1
 80076dc:	4604      	mov	r4, r0
 80076de:	f7f8 fef3 	bl	80004c8 <__aeabi_dmul>
 80076e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f8 fd33 	bl	8000158 <__aeabi_dsub>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4640      	mov	r0, r8
 80076f8:	4649      	mov	r1, r9
 80076fa:	f7f8 fd2d 	bl	8000158 <__aeabi_dsub>
 80076fe:	a370      	add	r3, pc, #448	; (adr r3, 80078c0 <__ieee754_pow+0x9c0>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f7f8 fee0 	bl	80004c8 <__aeabi_dmul>
 8007708:	a36f      	add	r3, pc, #444	; (adr r3, 80078c8 <__ieee754_pow+0x9c8>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	4680      	mov	r8, r0
 8007710:	4689      	mov	r9, r1
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f7f8 fed7 	bl	80004c8 <__aeabi_dmul>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f8 fd1b 	bl	800015c <__adddf3>
 8007726:	4604      	mov	r4, r0
 8007728:	460d      	mov	r5, r1
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f8 fd13 	bl	800015c <__adddf3>
 8007736:	4632      	mov	r2, r6
 8007738:	463b      	mov	r3, r7
 800773a:	4680      	mov	r8, r0
 800773c:	4689      	mov	r9, r1
 800773e:	f7f8 fd0b 	bl	8000158 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f8 fd05 	bl	8000158 <__aeabi_dsub>
 800774e:	4642      	mov	r2, r8
 8007750:	4606      	mov	r6, r0
 8007752:	460f      	mov	r7, r1
 8007754:	464b      	mov	r3, r9
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 feb5 	bl	80004c8 <__aeabi_dmul>
 800775e:	a35c      	add	r3, pc, #368	; (adr r3, 80078d0 <__ieee754_pow+0x9d0>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	4604      	mov	r4, r0
 8007766:	460d      	mov	r5, r1
 8007768:	f7f8 feae 	bl	80004c8 <__aeabi_dmul>
 800776c:	a35a      	add	r3, pc, #360	; (adr r3, 80078d8 <__ieee754_pow+0x9d8>)
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f8 fcf1 	bl	8000158 <__aeabi_dsub>
 8007776:	4622      	mov	r2, r4
 8007778:	462b      	mov	r3, r5
 800777a:	f7f8 fea5 	bl	80004c8 <__aeabi_dmul>
 800777e:	a358      	add	r3, pc, #352	; (adr r3, 80078e0 <__ieee754_pow+0x9e0>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 fcea 	bl	800015c <__adddf3>
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	f7f8 fe9c 	bl	80004c8 <__aeabi_dmul>
 8007790:	a355      	add	r3, pc, #340	; (adr r3, 80078e8 <__ieee754_pow+0x9e8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fcdf 	bl	8000158 <__aeabi_dsub>
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f7f8 fe93 	bl	80004c8 <__aeabi_dmul>
 80077a2:	a353      	add	r3, pc, #332	; (adr r3, 80078f0 <__ieee754_pow+0x9f0>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fcd8 	bl	800015c <__adddf3>
 80077ac:	4622      	mov	r2, r4
 80077ae:	462b      	mov	r3, r5
 80077b0:	f7f8 fe8a 	bl	80004c8 <__aeabi_dmul>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	f7f8 fccc 	bl	8000158 <__aeabi_dsub>
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f8 fe7c 	bl	80004c8 <__aeabi_dmul>
 80077d0:	2200      	movs	r2, #0
 80077d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f8 fcbb 	bl	8000158 <__aeabi_dsub>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ea:	f7f8 ff97 	bl	800071c <__aeabi_ddiv>
 80077ee:	4632      	mov	r2, r6
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	463b      	mov	r3, r7
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f8 fe65 	bl	80004c8 <__aeabi_dmul>
 80077fe:	4632      	mov	r2, r6
 8007800:	463b      	mov	r3, r7
 8007802:	f7f8 fcab 	bl	800015c <__adddf3>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f8 fca3 	bl	8000158 <__aeabi_dsub>
 8007812:	4642      	mov	r2, r8
 8007814:	464b      	mov	r3, r9
 8007816:	f7f8 fc9f 	bl	8000158 <__aeabi_dsub>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	2000      	movs	r0, #0
 8007820:	4939      	ldr	r1, [pc, #228]	; (8007908 <__ieee754_pow+0xa08>)
 8007822:	f7f8 fc99 	bl	8000158 <__aeabi_dsub>
 8007826:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800782a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800782e:	da2b      	bge.n	8007888 <__ieee754_pow+0x988>
 8007830:	4652      	mov	r2, sl
 8007832:	f000 f9b9 	bl	8007ba8 <scalbn>
 8007836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800783a:	f7ff bbf6 	b.w	800702a <__ieee754_pow+0x12a>
 800783e:	4b33      	ldr	r3, [pc, #204]	; (800790c <__ieee754_pow+0xa0c>)
 8007840:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007844:	429f      	cmp	r7, r3
 8007846:	f77f af13 	ble.w	8007670 <__ieee754_pow+0x770>
 800784a:	4b31      	ldr	r3, [pc, #196]	; (8007910 <__ieee754_pow+0xa10>)
 800784c:	440b      	add	r3, r1
 800784e:	4303      	orrs	r3, r0
 8007850:	d00b      	beq.n	800786a <__ieee754_pow+0x96a>
 8007852:	a329      	add	r3, pc, #164	; (adr r3, 80078f8 <__ieee754_pow+0x9f8>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800785c:	f7f8 fe34 	bl	80004c8 <__aeabi_dmul>
 8007860:	a325      	add	r3, pc, #148	; (adr r3, 80078f8 <__ieee754_pow+0x9f8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7ff bbe0 	b.w	800702a <__ieee754_pow+0x12a>
 800786a:	4622      	mov	r2, r4
 800786c:	462b      	mov	r3, r5
 800786e:	f7f8 fc73 	bl	8000158 <__aeabi_dsub>
 8007872:	4642      	mov	r2, r8
 8007874:	464b      	mov	r3, r9
 8007876:	f7f9 f8ad 	bl	80009d4 <__aeabi_dcmpge>
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f aef8 	beq.w	8007670 <__ieee754_pow+0x770>
 8007880:	e7e7      	b.n	8007852 <__ieee754_pow+0x952>
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	e71e      	b.n	80076c6 <__ieee754_pow+0x7c6>
 8007888:	4621      	mov	r1, r4
 800788a:	e7d4      	b.n	8007836 <__ieee754_pow+0x936>
 800788c:	f04f 0b00 	mov.w	fp, #0
 8007890:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007908 <__ieee754_pow+0xa08>
 8007894:	f7ff bb95 	b.w	8006fc2 <__ieee754_pow+0xc2>
 8007898:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800789c:	f7ff bb91 	b.w	8006fc2 <__ieee754_pow+0xc2>
 80078a0:	4638      	mov	r0, r7
 80078a2:	4641      	mov	r1, r8
 80078a4:	f7ff bbc3 	b.w	800702e <__ieee754_pow+0x12e>
 80078a8:	9200      	str	r2, [sp, #0]
 80078aa:	f7ff bb9f 	b.w	8006fec <__ieee754_pow+0xec>
 80078ae:	bf00      	nop
 80078b0:	652b82fe 	.word	0x652b82fe
 80078b4:	3c971547 	.word	0x3c971547
 80078b8:	00000000 	.word	0x00000000
 80078bc:	3fe62e43 	.word	0x3fe62e43
 80078c0:	fefa39ef 	.word	0xfefa39ef
 80078c4:	3fe62e42 	.word	0x3fe62e42
 80078c8:	0ca86c39 	.word	0x0ca86c39
 80078cc:	be205c61 	.word	0xbe205c61
 80078d0:	72bea4d0 	.word	0x72bea4d0
 80078d4:	3e663769 	.word	0x3e663769
 80078d8:	c5d26bf1 	.word	0xc5d26bf1
 80078dc:	3ebbbd41 	.word	0x3ebbbd41
 80078e0:	af25de2c 	.word	0xaf25de2c
 80078e4:	3f11566a 	.word	0x3f11566a
 80078e8:	16bebd93 	.word	0x16bebd93
 80078ec:	3f66c16c 	.word	0x3f66c16c
 80078f0:	5555553e 	.word	0x5555553e
 80078f4:	3fc55555 	.word	0x3fc55555
 80078f8:	c2f8f359 	.word	0xc2f8f359
 80078fc:	01a56e1f 	.word	0x01a56e1f
 8007900:	3fe00000 	.word	0x3fe00000
 8007904:	000fffff 	.word	0x000fffff
 8007908:	3ff00000 	.word	0x3ff00000
 800790c:	4090cbff 	.word	0x4090cbff
 8007910:	3f6f3400 	.word	0x3f6f3400

08007914 <__ieee754_sqrt>:
 8007914:	4b54      	ldr	r3, [pc, #336]	; (8007a68 <__ieee754_sqrt+0x154>)
 8007916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	438b      	bics	r3, r1
 800791c:	4606      	mov	r6, r0
 800791e:	460d      	mov	r5, r1
 8007920:	460a      	mov	r2, r1
 8007922:	460c      	mov	r4, r1
 8007924:	d10f      	bne.n	8007946 <__ieee754_sqrt+0x32>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	f7f8 fdcd 	bl	80004c8 <__aeabi_dmul>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4630      	mov	r0, r6
 8007934:	4629      	mov	r1, r5
 8007936:	f7f8 fc11 	bl	800015c <__adddf3>
 800793a:	4606      	mov	r6, r0
 800793c:	460d      	mov	r5, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4629      	mov	r1, r5
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	2900      	cmp	r1, #0
 8007948:	4607      	mov	r7, r0
 800794a:	4603      	mov	r3, r0
 800794c:	dc0e      	bgt.n	800796c <__ieee754_sqrt+0x58>
 800794e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007952:	ea5c 0707 	orrs.w	r7, ip, r7
 8007956:	d0f2      	beq.n	800793e <__ieee754_sqrt+0x2a>
 8007958:	b141      	cbz	r1, 800796c <__ieee754_sqrt+0x58>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	f7f8 fbfb 	bl	8000158 <__aeabi_dsub>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	f7f8 fed9 	bl	800071c <__aeabi_ddiv>
 800796a:	e7e6      	b.n	800793a <__ieee754_sqrt+0x26>
 800796c:	1512      	asrs	r2, r2, #20
 800796e:	d074      	beq.n	8007a5a <__ieee754_sqrt+0x146>
 8007970:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007974:	07d5      	lsls	r5, r2, #31
 8007976:	f04f 0500 	mov.w	r5, #0
 800797a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800797e:	bf48      	it	mi
 8007980:	0fd9      	lsrmi	r1, r3, #31
 8007982:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007986:	bf44      	itt	mi
 8007988:	005b      	lslmi	r3, r3, #1
 800798a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800798e:	1051      	asrs	r1, r2, #1
 8007990:	0fda      	lsrs	r2, r3, #31
 8007992:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007996:	4628      	mov	r0, r5
 8007998:	2216      	movs	r2, #22
 800799a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	1987      	adds	r7, r0, r6
 80079a2:	42a7      	cmp	r7, r4
 80079a4:	bfde      	ittt	le
 80079a6:	19b8      	addle	r0, r7, r6
 80079a8:	1be4      	suble	r4, r4, r7
 80079aa:	19ad      	addle	r5, r5, r6
 80079ac:	0fdf      	lsrs	r7, r3, #31
 80079ae:	3a01      	subs	r2, #1
 80079b0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80079b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079bc:	d1f0      	bne.n	80079a0 <__ieee754_sqrt+0x8c>
 80079be:	f04f 0c20 	mov.w	ip, #32
 80079c2:	4696      	mov	lr, r2
 80079c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80079c8:	4284      	cmp	r4, r0
 80079ca:	eb06 070e 	add.w	r7, r6, lr
 80079ce:	dc02      	bgt.n	80079d6 <__ieee754_sqrt+0xc2>
 80079d0:	d112      	bne.n	80079f8 <__ieee754_sqrt+0xe4>
 80079d2:	429f      	cmp	r7, r3
 80079d4:	d810      	bhi.n	80079f8 <__ieee754_sqrt+0xe4>
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	eb07 0e06 	add.w	lr, r7, r6
 80079dc:	da42      	bge.n	8007a64 <__ieee754_sqrt+0x150>
 80079de:	f1be 0f00 	cmp.w	lr, #0
 80079e2:	db3f      	blt.n	8007a64 <__ieee754_sqrt+0x150>
 80079e4:	f100 0801 	add.w	r8, r0, #1
 80079e8:	1a24      	subs	r4, r4, r0
 80079ea:	4640      	mov	r0, r8
 80079ec:	429f      	cmp	r7, r3
 80079ee:	bf88      	it	hi
 80079f0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 80079f4:	1bdb      	subs	r3, r3, r7
 80079f6:	4432      	add	r2, r6
 80079f8:	0064      	lsls	r4, r4, #1
 80079fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80079fe:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007a02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a0a:	d1dd      	bne.n	80079c8 <__ieee754_sqrt+0xb4>
 8007a0c:	4323      	orrs	r3, r4
 8007a0e:	d006      	beq.n	8007a1e <__ieee754_sqrt+0x10a>
 8007a10:	1c54      	adds	r4, r2, #1
 8007a12:	bf0b      	itete	eq
 8007a14:	4662      	moveq	r2, ip
 8007a16:	3201      	addne	r2, #1
 8007a18:	3501      	addeq	r5, #1
 8007a1a:	f022 0201 	bicne.w	r2, r2, #1
 8007a1e:	106b      	asrs	r3, r5, #1
 8007a20:	0852      	lsrs	r2, r2, #1
 8007a22:	07e8      	lsls	r0, r5, #31
 8007a24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a2c:	bf48      	it	mi
 8007a2e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007a32:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007a36:	4616      	mov	r6, r2
 8007a38:	e781      	b.n	800793e <__ieee754_sqrt+0x2a>
 8007a3a:	0adc      	lsrs	r4, r3, #11
 8007a3c:	3915      	subs	r1, #21
 8007a3e:	055b      	lsls	r3, r3, #21
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	d0fa      	beq.n	8007a3a <__ieee754_sqrt+0x126>
 8007a44:	02e6      	lsls	r6, r4, #11
 8007a46:	d50a      	bpl.n	8007a5e <__ieee754_sqrt+0x14a>
 8007a48:	f1c2 0020 	rsb	r0, r2, #32
 8007a4c:	fa23 f000 	lsr.w	r0, r3, r0
 8007a50:	1e55      	subs	r5, r2, #1
 8007a52:	4093      	lsls	r3, r2
 8007a54:	4304      	orrs	r4, r0
 8007a56:	1b4a      	subs	r2, r1, r5
 8007a58:	e78a      	b.n	8007970 <__ieee754_sqrt+0x5c>
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	e7f0      	b.n	8007a40 <__ieee754_sqrt+0x12c>
 8007a5e:	0064      	lsls	r4, r4, #1
 8007a60:	3201      	adds	r2, #1
 8007a62:	e7ef      	b.n	8007a44 <__ieee754_sqrt+0x130>
 8007a64:	4680      	mov	r8, r0
 8007a66:	e7bf      	b.n	80079e8 <__ieee754_sqrt+0xd4>
 8007a68:	7ff00000 	.word	0x7ff00000

08007a6c <fabs>:
 8007a6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a70:	4619      	mov	r1, r3
 8007a72:	4770      	bx	lr

08007a74 <finite>:
 8007a74:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007a78:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007a7c:	0fc0      	lsrs	r0, r0, #31
 8007a7e:	4770      	bx	lr

08007a80 <matherr>:
 8007a80:	2000      	movs	r0, #0
 8007a82:	4770      	bx	lr

08007a84 <nan>:
 8007a84:	2000      	movs	r0, #0
 8007a86:	4901      	ldr	r1, [pc, #4]	; (8007a8c <nan+0x8>)
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	7ff80000 	.word	0x7ff80000

08007a90 <rint>:
 8007a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a96:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8007a9a:	f1bc 0f13 	cmp.w	ip, #19
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007aaa:	dc5a      	bgt.n	8007b62 <rint+0xd2>
 8007aac:	f1bc 0f00 	cmp.w	ip, #0
 8007ab0:	da2b      	bge.n	8007b0a <rint+0x7a>
 8007ab2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007ab6:	4302      	orrs	r2, r0
 8007ab8:	d023      	beq.n	8007b02 <rint+0x72>
 8007aba:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007abe:	4302      	orrs	r2, r0
 8007ac0:	4256      	negs	r6, r2
 8007ac2:	4316      	orrs	r6, r2
 8007ac4:	0c4b      	lsrs	r3, r1, #17
 8007ac6:	0b36      	lsrs	r6, r6, #12
 8007ac8:	4934      	ldr	r1, [pc, #208]	; (8007b9c <rint+0x10c>)
 8007aca:	045b      	lsls	r3, r3, #17
 8007acc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007ad0:	ea46 0503 	orr.w	r5, r6, r3
 8007ad4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007ad8:	4602      	mov	r2, r0
 8007ada:	462b      	mov	r3, r5
 8007adc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7f8 fb3a 	bl	800015c <__adddf3>
 8007ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8007aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af0:	462b      	mov	r3, r5
 8007af2:	4622      	mov	r2, r4
 8007af4:	f7f8 fb30 	bl	8000158 <__aeabi_dsub>
 8007af8:	4604      	mov	r4, r0
 8007afa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007afe:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	b003      	add	sp, #12
 8007b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b0a:	4a25      	ldr	r2, [pc, #148]	; (8007ba0 <rint+0x110>)
 8007b0c:	fa42 f20c 	asr.w	r2, r2, ip
 8007b10:	4011      	ands	r1, r2
 8007b12:	4301      	orrs	r1, r0
 8007b14:	d0f5      	beq.n	8007b02 <rint+0x72>
 8007b16:	0852      	lsrs	r2, r2, #1
 8007b18:	ea05 0102 	and.w	r1, r5, r2
 8007b1c:	ea50 0601 	orrs.w	r6, r0, r1
 8007b20:	d00c      	beq.n	8007b3c <rint+0xac>
 8007b22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b26:	f1bc 0f13 	cmp.w	ip, #19
 8007b2a:	bf0c      	ite	eq
 8007b2c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007b30:	2600      	movne	r6, #0
 8007b32:	ea25 0202 	bic.w	r2, r5, r2
 8007b36:	fa43 f30c 	asr.w	r3, r3, ip
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	4917      	ldr	r1, [pc, #92]	; (8007b9c <rint+0x10c>)
 8007b3e:	4632      	mov	r2, r6
 8007b40:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007b44:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	f7f8 fb06 	bl	800015c <__adddf3>
 8007b50:	e9cd 0100 	strd	r0, r1, [sp]
 8007b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b58:	4622      	mov	r2, r4
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	f7f8 fafc 	bl	8000158 <__aeabi_dsub>
 8007b60:	e008      	b.n	8007b74 <rint+0xe4>
 8007b62:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8007b66:	dd08      	ble.n	8007b7a <rint+0xea>
 8007b68:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007b6c:	d1c9      	bne.n	8007b02 <rint+0x72>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	f7f8 faf4 	bl	800015c <__adddf3>
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	e7c3      	b.n	8007b02 <rint+0x72>
 8007b7a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b82:	40ca      	lsrs	r2, r1
 8007b84:	4210      	tst	r0, r2
 8007b86:	d0bc      	beq.n	8007b02 <rint+0x72>
 8007b88:	0852      	lsrs	r2, r2, #1
 8007b8a:	4210      	tst	r0, r2
 8007b8c:	bf1f      	itttt	ne
 8007b8e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8007b92:	ea20 0202 	bicne.w	r2, r0, r2
 8007b96:	410e      	asrne	r6, r1
 8007b98:	4316      	orrne	r6, r2
 8007b9a:	e7cf      	b.n	8007b3c <rint+0xac>
 8007b9c:	08007e10 	.word	0x08007e10
 8007ba0:	000fffff 	.word	0x000fffff
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <scalbn>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	4616      	mov	r6, r2
 8007bac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	460d      	mov	r5, r1
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	b982      	cbnz	r2, 8007bda <scalbn+0x32>
 8007bb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bbc:	4303      	orrs	r3, r0
 8007bbe:	d034      	beq.n	8007c2a <scalbn+0x82>
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <scalbn+0xd0>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fc80 	bl	80004c8 <__aeabi_dmul>
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <scalbn+0xd4>)
 8007bca:	4604      	mov	r4, r0
 8007bcc:	429e      	cmp	r6, r3
 8007bce:	460d      	mov	r5, r1
 8007bd0:	da0d      	bge.n	8007bee <scalbn+0x46>
 8007bd2:	a325      	add	r3, pc, #148	; (adr r3, 8007c68 <scalbn+0xc0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	e01c      	b.n	8007c14 <scalbn+0x6c>
 8007bda:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007bde:	42ba      	cmp	r2, r7
 8007be0:	d109      	bne.n	8007bf6 <scalbn+0x4e>
 8007be2:	4602      	mov	r2, r0
 8007be4:	f7f8 faba 	bl	800015c <__adddf3>
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	e01d      	b.n	8007c2a <scalbn+0x82>
 8007bee:	460b      	mov	r3, r1
 8007bf0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bf4:	3a36      	subs	r2, #54	; 0x36
 8007bf6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bfa:	4432      	add	r2, r6
 8007bfc:	428a      	cmp	r2, r1
 8007bfe:	dd0c      	ble.n	8007c1a <scalbn+0x72>
 8007c00:	4622      	mov	r2, r4
 8007c02:	462b      	mov	r3, r5
 8007c04:	a11a      	add	r1, pc, #104	; (adr r1, 8007c70 <scalbn+0xc8>)
 8007c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c0a:	f000 f83b 	bl	8007c84 <copysign>
 8007c0e:	a318      	add	r3, pc, #96	; (adr r3, 8007c70 <scalbn+0xc8>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 fc58 	bl	80004c8 <__aeabi_dmul>
 8007c18:	e7e6      	b.n	8007be8 <scalbn+0x40>
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	dd08      	ble.n	8007c30 <scalbn+0x88>
 8007c1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c34:	da0b      	bge.n	8007c4e <scalbn+0xa6>
 8007c36:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c3a:	429e      	cmp	r6, r3
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	dce0      	bgt.n	8007c04 <scalbn+0x5c>
 8007c42:	a109      	add	r1, pc, #36	; (adr r1, 8007c68 <scalbn+0xc0>)
 8007c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c48:	f000 f81c 	bl	8007c84 <copysign>
 8007c4c:	e7c1      	b.n	8007bd2 <scalbn+0x2a>
 8007c4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c52:	3236      	adds	r2, #54	; 0x36
 8007c54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	2200      	movs	r2, #0
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <scalbn+0xd8>)
 8007c64:	e7d6      	b.n	8007c14 <scalbn+0x6c>
 8007c66:	bf00      	nop
 8007c68:	c2f8f359 	.word	0xc2f8f359
 8007c6c:	01a56e1f 	.word	0x01a56e1f
 8007c70:	8800759c 	.word	0x8800759c
 8007c74:	7e37e43c 	.word	0x7e37e43c
 8007c78:	43500000 	.word	0x43500000
 8007c7c:	ffff3cb0 	.word	0xffff3cb0
 8007c80:	3c900000 	.word	0x3c900000

08007c84 <copysign>:
 8007c84:	b530      	push	{r4, r5, lr}
 8007c86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c8e:	ea42 0503 	orr.w	r5, r2, r3
 8007c92:	4629      	mov	r1, r5
 8007c94:	bd30      	pop	{r4, r5, pc}
	...

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
