
stm32f1_FreeRtos_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004794  08004794  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004794  08004794  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800479c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e50  2000000c  080047a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e5c  080047a8  00020e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2c7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000326e  00000000  00000000  0003c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  0003f570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  000405e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001813d  00000000  00000000  000414f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000efa1  00000000  00000000  00059635  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bd08  00000000  00000000  000685d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e42de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000e435c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004738 	.word	0x08004738

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004738 	.word	0x08004738

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <ENVMNTR_init>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void Error_Handler(void);

uint8_t ENVMNTR_init(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000996:	f000 fd13 	bl	80013c0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800099a:	f000 f839 	bl	8000a10 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800099e:	f000 f8d1 	bl	8000b44 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80009a2:	f000 f8a5 	bl	8000af0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80009a6:	f000 f875 	bl	8000a94 <MX_I2C1_Init>

	error = TSL2561_init();
 80009aa:	f000 fc4d 	bl	8001248 <TSL2561_init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	error = TTP223B_init();
 80009b2:	f000 fcbd 	bl	8001330 <TTP223B_init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	error = HTU21D_init();
 80009ba:	f000 f949 	bl	8000c50 <HTU21D_init>
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]

	return error;
 80009c2:	79fb      	ldrb	r3, [r7, #7]

}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ENVMNTR_createTasks>:

uint8_t ENVMNTR_createTasks(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8

	uint8_t error = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	71fb      	strb	r3, [r7, #7]
//
//		  return -1;
//	}

	/* NOTE: Create HTU21D task */
	if(pdPASS != xTaskCreate(HTU21D_handler, "HTU21D_handler",
 80009d6:	2300      	movs	r3, #0
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	2306      	movs	r3, #6
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <ENVMNTR_createTasks+0x38>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	4909      	ldr	r1, [pc, #36]	; (8000a08 <ENVMNTR_createTasks+0x3c>)
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <ENVMNTR_createTasks+0x40>)
 80009e6:	f002 ff0a 	bl	80037fe <xTaskCreate>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d001      	beq.n	80009f4 <ENVMNTR_createTasks+0x28>
					configMINIMAL_STACK_SIZE, (void *)&envmonitor.sensor.htu21d,
					configMAX_PRIORITIES - 1, NULL)){

		  return -1;
 80009f0:	23ff      	movs	r3, #255	; 0xff
 80009f2:	e002      	b.n	80009fa <ENVMNTR_createTasks+0x2e>
	}

	/* Start the scheduler so the tasks start executing. */
	vTaskStartScheduler();
 80009f4:	f003 f82c 	bl	8003a50 <vTaskStartScheduler>

	return error;
 80009f8:	79fb      	ldrb	r3, [r7, #7]

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000028 	.word	0x20000028
 8000a08:	08004750 	.word	0x08004750
 8000a0c:	08000d61 	.word	0x08000d61

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fe82 	bl	8004728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a46:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 feb3 	bl	80027bc <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a5c:	f000 f8f2 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f902 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a86:	f000 f8dd 	bl	8000c44 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3740      	adds	r7, #64	; 0x40
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_I2C1_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ad2:	f000 ff33 	bl	800193c <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f8b2 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000d84 	.word	0x20000d84
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	00061a80 	.word	0x00061a80

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_USART2_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART2_UART_Init+0x4c>)
 8000b28:	f002 fc8c 	bl	8003444 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b32:	f000 f887 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000dd8 	.word	0x20000dd8
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_GPIO_Init+0xcc>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000bbe:	f000 fe8d 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000bd8:	f000 fd22 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000bf4:	f000 fd14 	bl	8001620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	2028      	movs	r0, #40	; 0x28
 8000bfe:	f000 fce4 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c02:	2028      	movs	r0, #40	; 0x28
 8000c04:	f000 fcfd 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800
 8000c18:	10110000 	.word	0x10110000
 8000c1c:	40011000 	.word	0x40011000

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f000 fbdb 	bl	80013ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HTU21D_init>:
static uint8_t HTU21D_softReset(void);
static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes);
static void calculateTempHum(uint16_t *rawValues, void *htu21d);
static void Error_Handler(void);

uint8_t HTU21D_init(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]

	HTU21D_softReset();
 8000c5a:	f000 f809 	bl	8000c70 <HTU21D_softReset>
	HTU21D_configUserRegister(RH12TEMP14);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f82a 	bl	8000cb8 <HTU21D_configUserRegister>

	return error;
 8000c64:	79fb      	ldrb	r3, [r7, #7]

}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HTU21D_softReset>:

static uint8_t HTU21D_softReset(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8

	uint8_t error = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t pData = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71bb      	strb	r3, [r7, #6]

	HAL_Delay(15);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 fbd0 	bl	8001424 <HAL_Delay>

	/* NOTE: Send soft reset command */
	pData = HTU21D_SOFT_RESET;
 8000c84:	23fe      	movs	r3, #254	; 0xfe
 8000c86:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, &pData,
 8000c88:	1dba      	adds	r2, r7, #6
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HTU21D_softReset+0x44>)
 8000c96:	f000 ff55 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HTU21D_softReset+0x34>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8000ca0:	f000 f95c 	bl	8000f5c <Error_Handler>
	}

	HAL_Delay(15);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f000 fbbd 	bl	8001424 <HAL_Delay>

	return error;
 8000caa:	79fb      	ldrb	r3, [r7, #7]

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000d84 	.word	0x20000d84

08000cb8 <HTU21D_configUserRegister>:

static uint8_t HTU21D_configUserRegister(HTU21D_measRes_e measRes){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]

	uint8_t status = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
	uint8_t pData[2];

	/* NOTE: Send Read User Register Command */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2202      	movs	r2, #2
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fd2a 	bl	8004728 <memset>
	pData[0] = HTU21D_RD_USRREG;
 8000cd4:	23e7      	movs	r3, #231	; 0xe7
 8000cd6:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8000cd8:	f107 020c 	add.w	r2, r7, #12
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	481d      	ldr	r0, [pc, #116]	; (8000d5c <HTU21D_configUserRegister+0xa4>)
 8000ce8:	f000 ff2c 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HTU21D_configUserRegister+0x3e>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8000cf2:	f000 f933 	bl	8000f5c <Error_Handler>
	}

	/* NOTE: Read User Register */
	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fd12 	bl	8004728 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, &pData[1],
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <HTU21D_configUserRegister+0xa4>)
 8000d16:	f001 f823 	bl	8001d60 <HAL_I2C_Master_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HTU21D_configUserRegister+0x6c>
					1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8000d20:	f000 f91c 	bl	8000f5c <Error_Handler>
	}

	/* NOTE: Manipulate User Register Value */
	pData[1] |= measRes;
 8000d24:	7b7a      	ldrb	r2, [r7, #13]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	737b      	strb	r3, [r7, #13]

	/* NOTE: Send Write User Register Command and Write Manipulated Value */
	pData[0] = HTU21D_WR_USRREG;
 8000d2e:	23e6      	movs	r3, #230	; 0xe6
 8000d30:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8000d32:	f107 020c 	add.w	r2, r7, #12
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <HTU21D_configUserRegister+0xa4>)
 8000d42:	f000 feff 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HTU21D_configUserRegister+0x98>
					2, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 8000d4c:	f000 f906 	bl	8000f5c <Error_Handler>
	}

	/* NOTE: Read again user register value for verify */

	return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000d84 	.word	0x20000d84

08000d60 <HTU21D_handler>:

void HTU21D_handler(void *htu21d){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	uint8_t temp[3];
	uint8_t hum[3];
	uint16_t rawValues[2];

	memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fcd9 	bl	8004728 <memset>
	memset(temp, 0, sizeof(temp) / sizeof(temp[0]));
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fcd2 	bl	8004728 <memset>
	memset(hum, 0, sizeof(hum) / sizeof(hum[0]));
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2203      	movs	r2, #3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fccb 	bl	8004728 <memset>
	memset(rawValues, 0, sizeof(rawValues) / sizeof(uint8_t));
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2204      	movs	r2, #4
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fcc4 	bl	8004728 <memset>

	for(;;){

		HAL_Delay(50);
 8000da0:	2032      	movs	r0, #50	; 0x32
 8000da2:	f000 fb3f 	bl	8001424 <HAL_Delay>

		/* NOTE: Send Trigger temperature measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2202      	movs	r2, #2
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 fcba 	bl	8004728 <memset>
		pData[0] = HTU21D_TEMP_HOLD;
 8000db4:	23e3      	movs	r3, #227	; 0xe3
 8000db6:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8000db8:	f107 0214 	add.w	r2, r7, #20
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	4830      	ldr	r0, [pc, #192]	; (8000e88 <HTU21D_handler+0x128>)
 8000dc8:	f000 febc 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HTU21D_handler+0x76>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8000dd2:	f000 f8c3 	bl	8000f5c <Error_Handler>
		}

		/* NOTE: Read Temperature(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, temp,
 8000dd6:	f107 0210 	add.w	r2, r7, #16
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2303      	movs	r3, #3
 8000de2:	2180      	movs	r1, #128	; 0x80
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <HTU21D_handler+0x128>)
 8000de6:	f000 ffbb 	bl	8001d60 <HAL_I2C_Master_Receive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HTU21D_handler+0x94>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8000df0:	f000 f8b4 	bl	8000f5c <Error_Handler>
		}

		rawValues[0] = (temp[0] << 8) | (temp[1] & ~0x03);
 8000df4:	7c3b      	ldrb	r3, [r7, #16]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	7c7b      	ldrb	r3, [r7, #17]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	813b      	strh	r3, [r7, #8]

		HAL_Delay(20);
 8000e0c:	2014      	movs	r0, #20
 8000e0e:	f000 fb09 	bl	8001424 <HAL_Delay>

		/* NOTE: Send Trigger humidity measurement in hold master Command */
		memset(pData, 0, sizeof(pData) / sizeof(pData[0]));
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2202      	movs	r2, #2
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fc84 	bl	8004728 <memset>
		pData[0] = HTU21D_HUM_HOLD;
 8000e20:	23e5      	movs	r3, #229	; 0xe5
 8000e22:	753b      	strb	r3, [r7, #20]
		if(HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR, pData,
 8000e24:	f107 0214 	add.w	r2, r7, #20
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <HTU21D_handler+0x128>)
 8000e34:	f000 fe86 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HTU21D_handler+0xe2>
						1, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8000e3e:	f000 f88d 	bl	8000f5c <Error_Handler>
		}

		/* NOTE: Read Humidity(MSB+LSB+CRC) */
		if(HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR, hum,
 8000e42:	f107 020c 	add.w	r2, r7, #12
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <HTU21D_handler+0x128>)
 8000e52:	f000 ff85 	bl	8001d60 <HAL_I2C_Master_Receive>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HTU21D_handler+0x100>
						3, HAL_MAX_DELAY) != HAL_OK ){

			Error_Handler();
 8000e5c:	f000 f87e 	bl	8000f5c <Error_Handler>
		}

		rawValues[1] = (hum[0] << 8) | (hum[1] & ~0x03);
 8000e60:	7b3b      	ldrb	r3, [r7, #12]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	7b7b      	ldrb	r3, [r7, #13]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	f023 0303 	bic.w	r3, r3, #3
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	817b      	strh	r3, [r7, #10]

		calculateTempHum(rawValues, htu21d);
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f806 	bl	8000e90 <calculateTempHum>
		HAL_Delay(50);
 8000e84:	e78c      	b.n	8000da0 <HTU21D_handler+0x40>
 8000e86:	bf00      	nop
 8000e88:	20000d84 	.word	0x20000d84
 8000e8c:	00000000 	.word	0x00000000

08000e90 <calculateTempHum>:

	vTaskDelete(NULL);

}

static void calculateTempHum(uint16_t *rawValues, void *htu21d){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]

	htu21d_s *HTU21D_temporary = (htu21d_s *) htu21d;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]

	HTU21D_temporary->temperature = ( -46.85 + (175.72 * (rawValues[0] / pow(2, 16))) );
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff faa6 	bl	80003f4 <__aeabi_i2d>
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <calculateTempHum+0xc0>)
 8000eae:	f7ff fc35 	bl	800071c <__aeabi_ddiv>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4621      	mov	r1, r4
 8000eba:	a321      	add	r3, pc, #132	; (adr r3, 8000f40 <calculateTempHum+0xb0>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fb02 	bl	80004c8 <__aeabi_dmul>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	4621      	mov	r1, r4
 8000ecc:	a31e      	add	r3, pc, #120	; (adr r3, 8000f48 <calculateTempHum+0xb8>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f941 	bl	8000158 <__aeabi_dsub>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4618      	mov	r0, r3
 8000edc:	4621      	mov	r1, r4
 8000ede:	f7ff fd05 	bl	80008ec <__aeabi_d2f>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	601a      	str	r2, [r3, #0]
	HTU21D_temporary->humidity = ( -6 + (125 * (rawValues[1] / pow(2, 16))) );
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3302      	adds	r3, #2
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fa80 	bl	80003f4 <__aeabi_i2d>
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <calculateTempHum+0xc0>)
 8000efa:	f7ff fc0f 	bl	800071c <__aeabi_ddiv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4618      	mov	r0, r3
 8000f04:	4621      	mov	r1, r4
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <calculateTempHum+0xc4>)
 8000f0c:	f7ff fadc 	bl	80004c8 <__aeabi_dmul>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <calculateTempHum+0xc8>)
 8000f1e:	f7ff f91b 	bl	8000158 <__aeabi_dsub>
 8000f22:	4603      	mov	r3, r0
 8000f24:	460c      	mov	r4, r1
 8000f26:	4618      	mov	r0, r3
 8000f28:	4621      	mov	r1, r4
 8000f2a:	f7ff fcdf 	bl	80008ec <__aeabi_d2f>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	605a      	str	r2, [r3, #4]

}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	f3af 8000 	nop.w
 8000f40:	3d70a3d7 	.word	0x3d70a3d7
 8000f44:	4065f70a 	.word	0x4065f70a
 8000f48:	cccccccd 	.word	0xcccccccd
 8000f4c:	40476ccc 	.word	0x40476ccc
 8000f50:	40f00000 	.word	0x40f00000
 8000f54:	405f4000 	.word	0x405f4000
 8000f58:	40180000 	.word	0x40180000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

	ENVMNTR_init();
 8000f6c:	f7ff fd0e 	bl	800098c <ENVMNTR_init>

	ENVMNTR_createTasks();
 8000f70:	f7ff fd2c 	bl	80009cc <ENVMNTR_createTasks>

	for(;;);
 8000f74:	e7fe      	b.n	8000f74 <main+0xc>
	...

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_MspInit+0x68>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_MspInit+0x68>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_MspInit+0x68>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_MspInit+0x68>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <HAL_MspInit+0x68>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x68>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	f06f 0001 	mvn.w	r0, #1
 8000fb6:	f000 fb08 	bl	80015ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x6c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_MspInit+0x6c>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <HAL_I2C_MspInit+0x70>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d123      	bne.n	8001050 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_I2C_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_I2C_MspInit+0x74>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_I2C_MspInit+0x74>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4619      	mov	r1, r3
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <HAL_I2C_MspInit+0x78>)
 8001034:	f000 faf4 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_I2C_MspInit+0x74>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_I2C_MspInit+0x74>)
 800103e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_I2C_MspInit+0x74>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005400 	.word	0x40005400
 800105c:	40021000 	.word	0x40021000
 8001060:	40010c00 	.word	0x40010c00

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0x70>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d123      	bne.n	80010cc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x74>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_UART_MspInit+0x74>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	61d3      	str	r3, [r2, #28]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0x74>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0x74>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_UART_MspInit+0x74>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_UART_MspInit+0x74>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b4:	230c      	movs	r3, #12
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_UART_MspInit+0x78>)
 80010c8:	f000 faaa 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010800 	.word	0x40010800

080010e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2019      	movs	r0, #25
 80010f6:	f000 fa68 	bl	80015ca <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80010fa:	2019      	movs	r0, #25
 80010fc:	f000 fa81 	bl	8001602 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_InitTick+0x9c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_InitTick+0x9c>)
 8001106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_InitTick+0x9c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 ff4e 	bl	8002fc4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001128:	f001 ff38 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 800112c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_InitTick+0xa0>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3b01      	subs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_InitTick+0xa4>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_InitTick+0xa8>)
 8001140:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_InitTick+0xa4>)
 8001144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001148:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_InitTick+0xa4>)
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_InitTick+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_InitTick+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_InitTick+0xa4>)
 800115e:	f001 ff7f 	bl	8003060 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_InitTick+0xa4>)
 800116a:	f001 ffad 	bl	80030c8 <HAL_TIM_Base_Start_IT>
 800116e:	4603      	mov	r3, r0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	431bde83 	.word	0x431bde83
 8001184:	20000e18 	.word	0x20000e18
 8001188:	40012c00 	.word	0x40012c00

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <HardFault_Handler+0x4>

0800119e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <MemManage_Handler+0x4>

080011a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <BusFault_Handler+0x4>

080011aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <UsageFault_Handler+0x4>

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM1_UP_IRQHandler+0x10>)
 80011c2:	f001 ff9b 	bl	80030fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000e18 	.word	0x20000e18

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f000 fb98 	bl	800190c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <SystemInit+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <SystemInit+0x5c>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <SystemInit+0x5c>)
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4911      	ldr	r1, [pc, #68]	; (800123c <SystemInit+0x5c>)
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <SystemInit+0x60>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <SystemInit+0x5c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <SystemInit+0x5c>)
 8001202:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SystemInit+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SystemInit+0x5c>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <SystemInit+0x5c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <SystemInit+0x5c>)
 800121e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001222:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SystemInit+0x5c>)
 8001226:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800122a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SystemInit+0x64>)
 800122e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001232:	609a      	str	r2, [r3, #8]
#endif 
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	f8ff0000 	.word	0xf8ff0000
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <TSL2561_init>:
#include "tsl2561.h"

static uint8_t TSL2561_calculateLux(uint16_t *adcData, float *luxVal);
static void Error_Handler(void);

uint8_t TSL2561_init(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8

	uint8_t pData[2];
	uint8_t error = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	71fb      	strb	r3, [r7, #7]

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2202      	movs	r2, #2
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fa65 	bl	8004728 <memset>

	/* NOTE: Power up the device */
	pData[0] = TSL2561_COMMAND_REG | TSL2561_CONTROL;
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	713b      	strb	r3, [r7, #4]
	pData[1] = TSL2561_POWER_UP;
 8001262:	2303      	movs	r3, #3
 8001264:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001266:	1d3a      	adds	r2, r7, #4
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2302      	movs	r3, #2
 8001270:	2172      	movs	r1, #114	; 0x72
 8001272:	482b      	ldr	r0, [pc, #172]	; (8001320 <TSL2561_init+0xd8>)
 8001274:	f000 fc66 	bl	8001b44 <HAL_I2C_Master_Transmit>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <TSL2561_init+0x3a>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 800127e:	f000 f851 	bl	8001324 <Error_Handler>
//		error = 1;
//
//	}

	/* NOTE: Get Device ID */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2202      	movs	r2, #2
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fa4d 	bl	8004728 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_ID;
 800128e:	238a      	movs	r3, #138	; 0x8a
 8001290:	713b      	strb	r3, [r7, #4]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 8001292:	1d3a      	adds	r2, r7, #4
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	2172      	movs	r1, #114	; 0x72
 800129e:	4820      	ldr	r0, [pc, #128]	; (8001320 <TSL2561_init+0xd8>)
 80012a0:	f000 fc50 	bl	8001b44 <HAL_I2C_Master_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <TSL2561_init+0x66>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80012aa:	f000 f83b 	bl	8001324 <Error_Handler>
	}

	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2202      	movs	r2, #2
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fa37 	bl	8004728 <memset>
	if(HAL_I2C_Master_Receive(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80012ba:	1d3a      	adds	r2, r7, #4
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	2172      	movs	r1, #114	; 0x72
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <TSL2561_init+0xd8>)
 80012c8:	f000 fd4a 	bl	8001d60 <HAL_I2C_Master_Receive>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <TSL2561_init+0x8e>
			1, HAL_MAX_DELAY) != HAL_OK ){

		Error_Handler();
 80012d2:	f000 f827 	bl	8001324 <Error_Handler>
	}

	if((pData[0] & 0xF0) != TSL2561_DEV_ID){
 80012d6:	793b      	ldrb	r3, [r7, #4]
 80012d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012dc:	2b50      	cmp	r3, #80	; 0x50
 80012de:	d001      	beq.n	80012e4 <TSL2561_init+0x9c>
		error = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	71fb      	strb	r3, [r7, #7]
	}

	/* NOTE: Configure Timing Register */
	memset(pData, 0, (sizeof(pData) / sizeof(pData[0])));
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2202      	movs	r2, #2
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fa1c 	bl	8004728 <memset>
	pData[0] = TSL2561_COMMAND_REG | TSL2561_TIMING;
 80012f0:	2381      	movs	r3, #129	; 0x81
 80012f2:	713b      	strb	r3, [r7, #4]
	pData[1] = 0x00;	/* NOTE: integration time is 13.7ms and 16x gain */
 80012f4:	2300      	movs	r3, #0
 80012f6:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Master_Transmit(&hi2c1, TSL2561_ADDR_FLOAT, pData,
 80012f8:	1d3a      	adds	r2, r7, #4
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2302      	movs	r3, #2
 8001302:	2172      	movs	r1, #114	; 0x72
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <TSL2561_init+0xd8>)
 8001306:	f000 fc1d 	bl	8001b44 <HAL_I2C_Master_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <TSL2561_init+0xcc>
			(sizeof(pData) / sizeof(pData[0])), HAL_MAX_DELAY) != HAL_OK){

		Error_Handler();
 8001310:	f000 f808 	bl	8001324 <Error_Handler>
	/* NOTE: Configure Interrupt Threshold registers */


	/* NOTE: Set interrupt control register */

	return error;
 8001314:	79fb      	ldrb	r3, [r7, #7]

}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000d84 	.word	0x20000d84

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <TTP223B_init>:
#include "envmonitor.h"
#include "ttp223b.h"

uint8_t TTP223B_init(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

	uint8_t error = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <TTP223B_init+0x48>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <TTP223B_init+0x48>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <TTP223B_init+0x48>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <TTP223B_init+0x4c>)
 8001358:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <TTP223B_init+0x50>)
 8001364:	f000 f95c 	bl	8001620 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001368:	2006      	movs	r0, #6
 800136a:	f000 f94a 	bl	8001602 <HAL_NVIC_EnableIRQ>

	return error;
 800136e:	7dfb      	ldrb	r3, [r7, #23]

}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000
 800137c:	10110000 	.word	0x10110000
 8001380:	40011000 	.word	0x40011000

08001384 <EXTI0_IRQHandler>:

/* NOTE: This is IRQHandler */
void EXTI0_IRQHandler(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);	/* NOTE: This calls HAL_GPIO_EXTI_Callback function */
 8001388:	2001      	movs	r0, #1
 800138a:	f000 fabf 	bl	800190c <HAL_GPIO_EXTI_IRQHandler>

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_EXTI_Callback>:

/* NOTE: This determines the GPIO_Pin, occuring interrupt */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_GPIO_EXTI_Callback+0x1e>

		envmonitor.sensor.ttp223b.touchState ^= 1;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_GPIO_EXTI_Callback+0x28>)
 80013a6:	7b1b      	ldrb	r3, [r3, #12]
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GPIO_EXTI_Callback+0x28>)
 80013b0:	731a      	strb	r2, [r3, #12]

	}

}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000028 	.word	0x20000028

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x28>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f8ef 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff fe82 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fdcc 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40022000 	.word	0x40022000

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000004 	.word	0x20000004
 800140c:	20000e58 	.word	0x20000e58

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000e58 	.word	0x20000e58

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff fff0 	bl	8001410 <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_Delay+0x40>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffe0 	bl	8001410 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000004 	.word	0x20000004

08001468 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4906      	ldr	r1, [pc, #24]	; (80014f8 <NVIC_EnableIRQ+0x2c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100

080014fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da0b      	bge.n	8001528 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <NVIC_SetPriority+0x4c>)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	3b04      	subs	r3, #4
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001526:	e009      	b.n	800153c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <NVIC_SetPriority+0x50>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	e000e100 	.word	0xe000e100

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff53 	bl	8001468 <NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff68 	bl	80014b0 <NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ffb2 	bl	8001550 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff81 	bl	80014fc <NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5b 	bl	80014cc <NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	e127      	b.n	8001894 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001644:	2201      	movs	r2, #1
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8116 	bne.w	800188e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b12      	cmp	r3, #18
 8001668:	d034      	beq.n	80016d4 <HAL_GPIO_Init+0xb4>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d80d      	bhi.n	800168a <HAL_GPIO_Init+0x6a>
 800166e:	2b02      	cmp	r3, #2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0xaa>
 8001672:	2b02      	cmp	r3, #2
 8001674:	d804      	bhi.n	8001680 <HAL_GPIO_Init+0x60>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d031      	beq.n	80016de <HAL_GPIO_Init+0xbe>
 800167a:	2b01      	cmp	r3, #1
 800167c:	d01c      	beq.n	80016b8 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800167e:	e048      	b.n	8001712 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001680:	2b03      	cmp	r3, #3
 8001682:	d043      	beq.n	800170c <HAL_GPIO_Init+0xec>
 8001684:	2b11      	cmp	r3, #17
 8001686:	d01b      	beq.n	80016c0 <HAL_GPIO_Init+0xa0>
          break;
 8001688:	e043      	b.n	8001712 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800168a:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_GPIO_Init+0x288>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d026      	beq.n	80016de <HAL_GPIO_Init+0xbe>
 8001690:	4a85      	ldr	r2, [pc, #532]	; (80018a8 <HAL_GPIO_Init+0x288>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d806      	bhi.n	80016a4 <HAL_GPIO_Init+0x84>
 8001696:	4a85      	ldr	r2, [pc, #532]	; (80018ac <HAL_GPIO_Init+0x28c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d020      	beq.n	80016de <HAL_GPIO_Init+0xbe>
 800169c:	4a84      	ldr	r2, [pc, #528]	; (80018b0 <HAL_GPIO_Init+0x290>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_GPIO_Init+0xbe>
          break;
 80016a2:	e036      	b.n	8001712 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80016a4:	4a83      	ldr	r2, [pc, #524]	; (80018b4 <HAL_GPIO_Init+0x294>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0xbe>
 80016aa:	4a83      	ldr	r2, [pc, #524]	; (80018b8 <HAL_GPIO_Init+0x298>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d016      	beq.n	80016de <HAL_GPIO_Init+0xbe>
 80016b0:	4a82      	ldr	r2, [pc, #520]	; (80018bc <HAL_GPIO_Init+0x29c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0xbe>
          break;
 80016b6:	e02c      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e028      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e023      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	3308      	adds	r3, #8
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e01e      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	330c      	adds	r3, #12
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e019      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016e6:	2304      	movs	r3, #4
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e012      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	611a      	str	r2, [r3, #16]
          break;
 80016fe:	e008      	b.n	8001712 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	615a      	str	r2, [r3, #20]
          break;
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d801      	bhi.n	800171c <HAL_GPIO_Init+0xfc>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	e001      	b.n	8001720 <HAL_GPIO_Init+0x100>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3304      	adds	r3, #4
 8001720:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2bff      	cmp	r3, #255	; 0xff
 8001726:	d802      	bhi.n	800172e <HAL_GPIO_Init+0x10e>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x114>
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3b08      	subs	r3, #8
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	210f      	movs	r1, #15
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	401a      	ands	r2, r3
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8096 	beq.w	800188e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b54      	ldr	r3, [pc, #336]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800177a:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4013      	ands	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a49      	ldr	r2, [pc, #292]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x1ae>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a48      	ldr	r2, [pc, #288]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x1aa>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x1a6>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x1a2>
 80017be:	2303      	movs	r3, #3
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x1b0>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x1b0>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x1b0>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x1b0>
 80017ce:	2300      	movs	r3, #0
 80017d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80017e0:	4938      	ldr	r1, [pc, #224]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4936      	ldr	r1, [pc, #216]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001808:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4931      	ldr	r1, [pc, #196]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001812:	4013      	ands	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	492c      	ldr	r1, [pc, #176]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	4927      	ldr	r1, [pc, #156]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 800183a:	4013      	ands	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	491d      	ldr	r1, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001862:	4013      	ands	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4918      	ldr	r1, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]
 800187e:	e006      	b.n	800188e <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	43db      	mvns	r3, r3
 8001888:	4913      	ldr	r1, [pc, #76]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 800188a:	4013      	ands	r3, r2
 800188c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	3301      	adds	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	2b0f      	cmp	r3, #15
 8001898:	f67f aed4 	bls.w	8001644 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800189c:	bf00      	nop
 800189e:	372c      	adds	r7, #44	; 0x2c
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	10210000 	.word	0x10210000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	10120000 	.word	0x10120000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10320000 	.word	0x10320000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40011400 	.word	0x40011400
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fd32 	bl	8001394 <HAL_GPIO_EXTI_Callback>
  }
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0e7      	b.n	8001b26 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fb3c 	bl	8000fe8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001988:	f001 faf4 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 800198c:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <HAL_I2C_Init+0x1f4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d807      	bhi.n	80019a8 <HAL_I2C_Init+0x6c>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4a66      	ldr	r2, [pc, #408]	; (8001b34 <HAL_I2C_Init+0x1f8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e006      	b.n	80019b6 <HAL_I2C_Init+0x7a>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_I2C_Init+0x1fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	bf94      	ite	ls
 80019b0:	2301      	movls	r3, #1
 80019b2:	2300      	movhi	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0b3      	b.n	8001b26 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <HAL_I2C_Init+0x200>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_I2C_Init+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d802      	bhi.n	80019e2 <HAL_I2C_Init+0xa6>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	e009      	b.n	80019f6 <HAL_I2C_Init+0xba>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_I2C_Init+0x204>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	099b      	lsrs	r3, r3, #6
 80019f4:	3301      	adds	r3, #1
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a4b      	ldr	r2, [pc, #300]	; (8001b30 <HAL_I2C_Init+0x1f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d80d      	bhi.n	8001a22 <HAL_I2C_Init+0xe6>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1e5a      	subs	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf38      	it	cc
 8001a1e:	2304      	movcc	r3, #4
 8001a20:	e04f      	b.n	8001ac2 <HAL_I2C_Init+0x186>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d111      	bne.n	8001a4e <HAL_I2C_Init+0x112>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1e59      	subs	r1, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e012      	b.n	8001a74 <HAL_I2C_Init+0x138>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1e59      	subs	r1, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009a      	lsls	r2, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Init+0x140>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e022      	b.n	8001ac2 <HAL_I2C_Init+0x186>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10e      	bne.n	8001aa2 <HAL_I2C_Init+0x166>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	1e59      	subs	r1, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	e00f      	b.n	8001ac2 <HAL_I2C_Init+0x186>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1e59      	subs	r1, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69d9      	ldr	r1, [r3, #28]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6919      	ldr	r1, [r3, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6959      	ldr	r1, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	000186a0 	.word	0x000186a0
 8001b34:	001e847f 	.word	0x001e847f
 8001b38:	003d08ff 	.word	0x003d08ff
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	817b      	strh	r3, [r7, #10]
 8001b54:	4613      	mov	r3, r2
 8001b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b5c:	f7ff fc58 	bl	8001410 <HAL_GetTick>
 8001b60:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	f040 80ee 	bne.w	8001d4c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2319      	movs	r3, #25
 8001b76:	2201      	movs	r2, #1
 8001b78:	4977      	ldr	r1, [pc, #476]	; (8001d58 <HAL_I2C_Master_Transmit+0x214>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fc74 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0e1      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_I2C_Master_Transmit+0x54>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0da      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bcc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2221      	movs	r2, #33	; 0x21
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	893a      	ldrh	r2, [r7, #8]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_I2C_Master_Transmit+0x218>)
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c00:	8979      	ldrh	r1, [r7, #10]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fae4 	bl	80021d4 <I2C_MasterRequestWrite>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00f      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d105      	bne.n	8001c26 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e093      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e08d      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001c48:	e066      	b.n	8001d18 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fcc9 	bl	80025e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00f      	beq.n	8001c7a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d109      	bne.n	8001c76 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c70:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06b      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e069      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	6251      	str	r1, [r2, #36]	; 0x24
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d119      	bne.n	8001ce8 <HAL_I2C_Master_Transmit+0x1a4>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	6251      	str	r1, [r2, #36]	; 0x24
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	6a39      	ldr	r1, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 fcb7 	bl	8002660 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00f      	beq.n	8001d18 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d109      	bne.n	8001d14 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e01c      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e01a      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d194      	bne.n	8001c4a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001d4c:	2302      	movs	r3, #2
  }
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	00100002 	.word	0x00100002
 8001d5c:	ffff0000 	.word	0xffff0000

08001d60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	817b      	strh	r3, [r7, #10]
 8001d70:	4613      	mov	r3, r2
 8001d72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d78:	f7ff fb4a 	bl	8001410 <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	f040 821d 	bne.w	80021c6 <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2319      	movs	r3, #25
 8001d92:	2201      	movs	r2, #1
 8001d94:	4987      	ldr	r1, [pc, #540]	; (8001fb4 <HAL_I2C_Master_Receive+0x254>)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fb66 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
 8001da4:	e210      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_I2C_Master_Receive+0x54>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e209      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d007      	beq.n	8001dda <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2222      	movs	r2, #34	; 0x22
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2210      	movs	r2, #16
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	893a      	ldrh	r2, [r7, #8]
 8001e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a6a      	ldr	r2, [pc, #424]	; (8001fb8 <HAL_I2C_Master_Receive+0x258>)
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e1c:	8979      	ldrh	r1, [r7, #10]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fa58 	bl	80022d8 <I2C_MasterRequestRead>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00f      	beq.n	8001e4e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d105      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c2      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1bc      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	623b      	str	r3, [r7, #32]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e190      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11d      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e94:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e96:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ebe:	b662      	cpsie	i
 8001ec0:	e16e      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d11d      	bne.n	8001f06 <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eda:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f02:	b662      	cpsie	i
 8001f04:	e14c      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001f2c:	e138      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	f200 80ef 	bhi.w	8002116 <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d127      	bne.n	8001f90 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 fbc8 	bl	80026da <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e135      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e133      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6918      	ldr	r0, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f70:	b2c2      	uxtb	r2, r0
 8001f72:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f8e:	e107      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d14c      	bne.n	8002032 <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <HAL_I2C_Master_Receive+0x25c>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fa60 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e10a      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
 8001fb2:	bf00      	nop
 8001fb4:	00100002 	.word	0x00100002
 8001fb8:	ffff0000 	.word	0xffff0000
 8001fbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6918      	ldr	r0, [r3, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c59      	adds	r1, r3, #1
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8001fe2:	b2c2      	uxtb	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002000:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6918      	ldr	r0, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	1c59      	adds	r1, r3, #1
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	6251      	str	r1, [r2, #36]	; 0x24
 8002012:	b2c2      	uxtb	r2, r0
 8002014:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002030:	e0b6      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	2200      	movs	r2, #0
 800203a:	4965      	ldr	r1, [pc, #404]	; (80021d0 <HAL_I2C_Master_Receive+0x470>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fa13 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0bd      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800205a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6918      	ldr	r0, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6251      	str	r1, [r2, #36]	; 0x24
 800206e:	b2c2      	uxtb	r2, r0
 8002070:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	2200      	movs	r2, #0
 8002094:	494e      	ldr	r1, [pc, #312]	; (80021d0 <HAL_I2C_Master_Receive+0x470>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f9e6 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e090      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6918      	ldr	r0, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c59      	adds	r1, r3, #1
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6251      	str	r1, [r2, #36]	; 0x24
 80020c6:	b2c2      	uxtb	r2, r0
 80020c8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020e4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6918      	ldr	r0, [r3, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6251      	str	r1, [r2, #36]	; 0x24
 80020f6:	b2c2      	uxtb	r2, r0
 80020f8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002114:	e044      	b.n	80021a0 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fadd 	bl	80026da <I2C_WaitOnRXNEFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b20      	cmp	r3, #32
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e04a      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e048      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6918      	ldr	r0, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c59      	adds	r1, r3, #1
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6251      	str	r1, [r2, #36]	; 0x24
 8002146:	b2c2      	uxtb	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d116      	bne.n	80021a0 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6918      	ldr	r0, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c59      	adds	r1, r3, #1
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6251      	str	r1, [r2, #36]	; 0x24
 8002182:	b2c2      	uxtb	r2, r0
 8002184:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f aec2 	bne.w	8001f2e <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	00010004 	.word	0x00010004

080021d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	460b      	mov	r3, r1
 80021e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d006      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d003      	beq.n	80021fe <I2C_MasterRequestWrite+0x2a>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021fc:	d108      	bne.n	8002210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e00b      	b.n	8002228 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2b12      	cmp	r3, #18
 8002216:	d107      	bne.n	8002228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f917 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e041      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800224c:	d108      	bne.n	8002260 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e021      	b.n	80022a4 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	11db      	asrs	r3, r3, #7
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0306 	and.w	r3, r3, #6
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f063 030f 	orn	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4914      	ldr	r1, [pc, #80]	; (80022d0 <I2C_MasterRequestWrite+0xfc>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f943 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d101      	bne.n	8002296 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e018      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e016      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	490a      	ldr	r1, [pc, #40]	; (80022d4 <I2C_MasterRequestWrite+0x100>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f92d 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d101      	bne.n	80022c2 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e002      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e000      	b.n	80022c8 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	00010008 	.word	0x00010008
 80022d4:	00010002 	.word	0x00010002

080022d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	460b      	mov	r3, r1
 80022e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d006      	beq.n	8002312 <I2C_MasterRequestRead+0x3a>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d003      	beq.n	8002312 <I2C_MasterRequestRead+0x3a>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002310:	d108      	bne.n	8002324 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e00b      	b.n	800233c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	2b11      	cmp	r3, #17
 800232a:	d107      	bne.n	800233c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f88d 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e07f      	b.n	8002458 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e05f      	b.n	8002434 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	11db      	asrs	r3, r3, #7
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0306 	and.w	r3, r3, #6
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f063 030f 	orn	r3, r3, #15
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4933      	ldr	r1, [pc, #204]	; (8002460 <I2C_MasterRequestRead+0x188>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f8b9 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d101      	bne.n	80023aa <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e056      	b.n	8002458 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e054      	b.n	8002458 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4929      	ldr	r1, [pc, #164]	; (8002464 <I2C_MasterRequestRead+0x18c>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8a3 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d101      	bne.n	80023d6 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e040      	b.n	8002458 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e03e      	b.n	8002458 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f82b 	bl	8002468 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e01d      	b.n	8002458 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	11db      	asrs	r3, r3, #7
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0306 	and.w	r3, r3, #6
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f063 030e 	orn	r3, r3, #14
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <I2C_MasterRequestRead+0x18c>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f865 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e002      	b.n	8002458 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e000      	b.n	8002458 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00010008 	.word	0x00010008
 8002464:	00010002 	.word	0x00010002

08002468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002478:	e01f      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d01b      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002488:	f7fe ffc2 	bl	8001410 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d210      	bcs.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e023      	b.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x78>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	e00c      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x92>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0bc      	beq.n	800247a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	e040      	b.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d11c      	bne.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002542:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2204      	movs	r2, #4
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e03c      	b.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d017      	beq.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8002572:	f7fe ff4d 	bl	8001410 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d20c      	bcs.n	800259c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e020      	b.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10c      	bne.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e00b      	b.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19e      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f2:	e029      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f8ba 	bl	800276e <I2C_IsAcknowledgeFailed>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e029      	b.n	8002658 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d01d      	beq.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002612:	f7fe fefd 	bl	8001410 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d212      	bcs.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e007      	b.n	8002658 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	d1ce      	bne.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800266c:	e029      	b.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f87d 	bl	800276e <I2C_IsAcknowledgeFailed>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e029      	b.n	80026d2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d01d      	beq.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800268c:	f7fe fec0 	bl	8001410 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d212      	bcs.n	80026c2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e007      	b.n	80026d2 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d1ce      	bne.n	800266e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026e6:	e036      	b.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d114      	bne.n	8002720 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f06f 0210 	mvn.w	r2, #16
 80026fe:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e022      	b.n	8002766 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002726:	f7fe fe73 	bl	8001410 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d20f      	bcs.n	8002756 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e007      	b.n	8002766 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d1c1      	bne.n	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d114      	bne.n	80027b0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800278e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2204      	movs	r2, #4
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8087 	beq.w	80028e4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d6:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027e2:	4b8f      	ldr	r3, [pc, #572]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x58>
 80027ee:	4b8c      	ldr	r3, [pc, #560]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d06c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x126>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d168      	bne.n	80028e2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e22d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x70>
 800281e:	4b80      	ldr	r3, [pc, #512]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7f      	ldr	r2, [pc, #508]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e02e      	b.n	800288a <HAL_RCC_OscConfig+0xce>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10c      	bne.n	800284e <HAL_RCC_OscConfig+0x92>
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a79      	ldr	r2, [pc, #484]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a76      	ldr	r2, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e01d      	b.n	800288a <HAL_RCC_OscConfig+0xce>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0xb6>
 8002858:	4b71      	ldr	r3, [pc, #452]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a70      	ldr	r2, [pc, #448]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800285e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6e      	ldr	r3, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6d      	ldr	r2, [pc, #436]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0xce>
 8002872:	4b6b      	ldr	r3, [pc, #428]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6a      	ldr	r2, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a67      	ldr	r2, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d013      	beq.n	80028ba <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fdbd 	bl	8001410 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289a:	f7fe fdb9 	bl	8001410 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1e1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0xde>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fda9 	bl	8001410 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c2:	f7fe fda5 	bl	8001410 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b64      	cmp	r3, #100	; 0x64
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1cd      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d4:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x106>
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d063      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11c      	bne.n	8002942 <HAL_RCC_OscConfig+0x186>
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002914:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x170>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e1a1      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4939      	ldr	r1, [pc, #228]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002940:	e03a      	b.n	80029b8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x268>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fd5e 	bl	8001410 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7fe fd5a 	bl	8001410 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e182      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4926      	ldr	r1, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
 800298a:	e015      	b.n	80029b8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x268>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fd3d 	bl	8001410 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fd39 	bl	8001410 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e161      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d039      	beq.n	8002a38 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d019      	beq.n	8002a00 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fd1d 	bl	8001410 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029da:	f7fe fd19 	bl	8001410 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e141      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_RCC_OscConfig+0x264>)
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f000 fb13 	bl	8003024 <RCC_Delay>
 80029fe:	e01b      	b.n	8002a38 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fd03 	bl	8001410 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	e00e      	b.n	8002a2c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fcff 	bl	8001410 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d907      	bls.n	8002a2c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e127      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	42420000 	.word	0x42420000
 8002a28:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	4b92      	ldr	r3, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ea      	bne.n	8002a0e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80a6 	beq.w	8002b92 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a87      	ldr	r2, [pc, #540]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b85      	ldr	r3, [pc, #532]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCC_OscConfig+0x4c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x4c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a7e      	ldr	r2, [pc, #504]	; (8002c7c <HAL_RCC_OscConfig+0x4c0>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fcc1 	bl	8001410 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fcbd 	bl	8001410 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0e5      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b75      	ldr	r3, [pc, #468]	; (8002c7c <HAL_RCC_OscConfig+0x4c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x30a>
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	e02d      	b.n	8002b22 <HAL_RCC_OscConfig+0x366>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x32c>
 8002ace:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	e01c      	b.n	8002b22 <HAL_RCC_OscConfig+0x366>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x34e>
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a60      	ldr	r2, [pc, #384]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x366>
 8002b0a:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fc71 	bl	8001410 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fc6d 	bl	8001410 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e093      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RCC_OscConfig+0x376>
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fc5b 	bl	8001410 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fc57 	bl	8001410 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e07d      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b74:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d105      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d069      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d061      	beq.n	8002c6a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d146      	bne.n	8002c3c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fc2c 	bl	8001410 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fc28 	bl	8001410 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e050      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be2:	d108      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be4:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4921      	ldr	r1, [pc, #132]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a19      	ldr	r1, [r3, #32]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	430b      	orrs	r3, r1
 8002c08:	491b      	ldr	r1, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fbfc 	bl	8001410 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fbf8 	bl	8001410 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e020      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x460>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe fbe5 	bl	8001410 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fbe1 	bl	8001410 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e009      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_OscConfig+0x4bc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x48e>
 8002c68:	e001      	b.n	8002c6e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420060 	.word	0x42420060

08002c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c92:	4b7e      	ldr	r3, [pc, #504]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d910      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca0:	4b7a      	ldr	r3, [pc, #488]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4978      	ldr	r1, [pc, #480]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cb0:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e0      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d020      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cda:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a6c      	ldr	r2, [pc, #432]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002ce0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ce4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a66      	ldr	r2, [pc, #408]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002cf8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cfc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfe:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4961      	ldr	r1, [pc, #388]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d06a      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d24:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0a7      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e09b      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e093      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4949      	ldr	r1, [pc, #292]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fb4f 	bl	8001410 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d112      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7e:	f7fe fb47 	bl	8001410 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e077      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d94:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xfa>
 8002da0:	e027      	b.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d11d      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fb30 	bl	8001410 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e060      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc2:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d1ee      	bne.n	8002dac <HAL_RCC_ClockConfig+0x128>
 8002dce:	e010      	b.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe fb1e 	bl	8001410 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04e      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d210      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4920      	ldr	r1, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_ClockConfig+0x208>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e030      	b.n	8002e84 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4915      	ldr	r1, [pc, #84]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e60:	f000 f81c 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e64:	4601      	mov	r1, r0
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_ClockConfig+0x20c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCC_ClockConfig+0x210>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	fa21 f303 	lsr.w	r3, r1, r3
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_RCC_ClockConfig+0x214>)
 8002e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fe f92f 	bl	80010e0 <HAL_InitTick>
  
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40021000 	.word	0x40021000
 8002e94:	0800477c 	.word	0x0800477c
 8002e98:	20000000 	.word	0x20000000

08002e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b490      	push	{r4, r7}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ea4:	1d3c      	adds	r4, r7, #4
 8002ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x40>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eda:	e02d      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ede:	623b      	str	r3, [r7, #32]
      break;
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eee:	4413      	add	r3, r2
 8002ef0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ef4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c5b      	lsrs	r3, r3, #17
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f0e:	4413      	add	r3, r2
 8002f10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f14:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f1a:	fb02 f203 	mul.w	r2, r2, r3
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e004      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	623b      	str	r3, [r7, #32]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f3a:	623b      	str	r3, [r7, #32]
      break;
 8002f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc90      	pop	{r4, r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	08004760 	.word	0x08004760
 8002f50:	08004770 	.word	0x08004770
 8002f54:	40021000 	.word	0x40021000
 8002f58:	007a1200 	.word	0x007a1200
 8002f5c:	003d0900 	.word	0x003d0900

08002f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f78:	f7ff fff2 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	0800478c 	.word	0x0800478c

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa0:	f7ff ffde 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0adb      	lsrs	r3, r3, #11
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4a03      	ldr	r2, [pc, #12]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	0800478c 	.word	0x0800478c

08002fc4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_GetClockConfig+0x58>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_RCC_GetClockConfig+0x58>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_GetClockConfig+0x58>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_RCC_GetClockConfig+0x58>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetClockConfig+0x5c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0207 	and.w	r2, r3, #7
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	40022000 	.word	0x40022000

08003024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <RCC_Delay+0x34>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <RCC_Delay+0x38>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0a5b      	lsrs	r3, r3, #9
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003040:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	60fa      	str	r2, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f9      	bne.n	8003040 <RCC_Delay+0x1c>
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000000 	.word	0x20000000
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e01d      	b.n	80030ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f815 	bl	80030b6 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f000 f958 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	d122      	bne.n	8003158 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	d11b      	bne.n	8003158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0202 	mvn.w	r2, #2
 8003128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8ed 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8e0 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8ef 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0204 	mvn.w	r2, #4
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8c3 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8b6 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8c5 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0208 	mvn.w	r2, #8
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f899 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f88c 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f89b 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b10      	cmp	r3, #16
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0210 	mvn.w	r2, #16
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2208      	movs	r2, #8
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f86f 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f862 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f871 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0201 	mvn.w	r2, #1
 8003278:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fcd0 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8c3 	bl	8003432 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f835 	bl	8003342 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0220 	mvn.w	r2, #32
 80032fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f88e 	bl	8003420 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <TIM_Base_SetConfig+0xc0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x34>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x34>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a27      	ldr	r2, [pc, #156]	; (8003418 <TIM_Base_SetConfig+0xc4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x34>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a26      	ldr	r2, [pc, #152]	; (800341c <TIM_Base_SetConfig+0xc8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <TIM_Base_SetConfig+0xc0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0x66>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x66>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <TIM_Base_SetConfig+0xc4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x66>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <TIM_Base_SetConfig+0xc8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <TIM_Base_SetConfig+0xc0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800

08003420 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e03f      	b.n	80034d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fdfa 	bl	8001064 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f829 	bl	80034e0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ac:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b5b0      	push	{r4, r5, r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003522:	f023 030c 	bic.w	r3, r3, #12
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	430b      	orrs	r3, r1
 800352e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6f      	ldr	r2, [pc, #444]	; (8003708 <UART_SetConfig+0x228>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d16b      	bne.n	8003628 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003550:	f7ff fd24 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8003554:	4602      	mov	r2, r0
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	4a68      	ldr	r2, [pc, #416]	; (800370c <UART_SetConfig+0x22c>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	011c      	lsls	r4, r3, #4
 8003574:	f7ff fd12 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8003578:	4602      	mov	r2, r0
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009a      	lsls	r2, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	fbb2 f5f3 	udiv	r5, r2, r3
 800358e:	f7ff fd05 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8003592:	4602      	mov	r2, r0
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <UART_SetConfig+0x22c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2264      	movs	r2, #100	; 0x64
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	1aeb      	subs	r3, r5, r3
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	3332      	adds	r3, #50	; 0x32
 80035bc:	4a53      	ldr	r2, [pc, #332]	; (800370c <UART_SetConfig+0x22c>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c8:	441c      	add	r4, r3
 80035ca:	f7ff fce7 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80035e4:	f7ff fcda 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009a      	lsls	r2, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	4a43      	ldr	r2, [pc, #268]	; (800370c <UART_SetConfig+0x22c>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	2264      	movs	r2, #100	; 0x64
 8003608:	fb02 f303 	mul.w	r3, r2, r3
 800360c:	1aeb      	subs	r3, r5, r3
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	3332      	adds	r3, #50	; 0x32
 8003612:	4a3e      	ldr	r2, [pc, #248]	; (800370c <UART_SetConfig+0x22c>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4422      	add	r2, r4
 8003624:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003626:	e06a      	b.n	80036fe <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003628:	f7ff fca4 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 800362c:	4602      	mov	r2, r0
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	4a32      	ldr	r2, [pc, #200]	; (800370c <UART_SetConfig+0x22c>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	011c      	lsls	r4, r3, #4
 800364c:	f7ff fc92 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8003650:	4602      	mov	r2, r0
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	fbb2 f5f3 	udiv	r5, r2, r3
 8003666:	f7ff fc85 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 800366a:	4602      	mov	r2, r0
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <UART_SetConfig+0x22c>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2264      	movs	r2, #100	; 0x64
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	1aeb      	subs	r3, r5, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <UART_SetConfig+0x22c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	441c      	add	r4, r3
 80036a2:	f7ff fc67 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009a      	lsls	r2, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80036bc:	f7ff fc5a 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009a      	lsls	r2, r3, #2
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	4a0d      	ldr	r2, [pc, #52]	; (800370c <UART_SetConfig+0x22c>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	2264      	movs	r2, #100	; 0x64
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	1aeb      	subs	r3, r5, r3
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	3332      	adds	r3, #50	; 0x32
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <UART_SetConfig+0x22c>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4422      	add	r2, r4
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bdb0      	pop	{r4, r5, r7, pc}
 8003706:	bf00      	nop
 8003708:	40013800 	.word	0x40013800
 800370c:	51eb851f 	.word	0x51eb851f

08003710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f103 0208 	add.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f103 0208 	add.w	r2, r3, #8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f103 0208 	add.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d103      	bne.n	80037e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08c      	sub	sp, #48	; 0x30
 8003802:	af04      	add	r7, sp, #16
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fd6a 	bl	80042ec <pvPortMalloc>
 8003818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003820:	2054      	movs	r0, #84	; 0x54
 8003822:	f000 fd63 	bl	80042ec <pvPortMalloc>
 8003826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
 8003834:	e005      	b.n	8003842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f000 fe1a 	bl	8004470 <vPortFree>
 800383c:	e001      	b.n	8003842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	2300      	movs	r3, #0
 800384c:	9303      	str	r3, [sp, #12]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	9302      	str	r3, [sp, #8]
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f80e 	bl	8003880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003864:	69f8      	ldr	r0, [r7, #28]
 8003866:	f000 f889 	bl	800397c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800386a:	2301      	movs	r3, #1
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e002      	b.n	8003876 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003876:	69bb      	ldr	r3, [r7, #24]
	}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003898:	3b01      	subs	r3, #1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e7fe      	b.n	80038c4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e012      	b.n	80038f2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	7819      	ldrb	r1, [r3, #0]
 80038d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4413      	add	r3, r2
 80038da:	3334      	adds	r3, #52	; 0x34
 80038dc:	460a      	mov	r2, r1
 80038de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d9e9      	bls.n	80038cc <prvInitialiseNewTask+0x4c>
 80038f8:	e000      	b.n	80038fc <prvInitialiseNewTask+0x7c>
		{
			break;
 80038fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b06      	cmp	r3, #6
 8003908:	d901      	bls.n	800390e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800390a:	2306      	movs	r3, #6
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	2200      	movs	r2, #0
 800391e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	3304      	adds	r3, #4
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff12 	bl	800374e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	3318      	adds	r3, #24
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff0d 	bl	800374e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003938:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	f1c3 0207 	rsb	r2, r3, #7
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	2200      	movs	r2, #0
 800394e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	69b8      	ldr	r0, [r7, #24]
 800395e:	f000 fb45 	bl	8003fec <pxPortInitialiseStack>
 8003962:	4602      	mov	r2, r0
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003974:	bf00      	nop
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003984:	f000 fbfe 	bl	8004184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <prvAddNewTaskToReadyList+0xb8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <prvAddNewTaskToReadyList+0xb8>)
 8003990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <prvAddNewTaskToReadyList+0xbc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800399a:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <prvAddNewTaskToReadyList+0xbc>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <prvAddNewTaskToReadyList+0xb8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d110      	bne.n	80039ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039a8:	f000 fa70 	bl	8003e8c <prvInitialiseTaskLists>
 80039ac:	e00d      	b.n	80039ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <prvAddNewTaskToReadyList+0xc0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <prvAddNewTaskToReadyList+0xbc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d802      	bhi.n	80039ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <prvAddNewTaskToReadyList+0xbc>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <prvAddNewTaskToReadyList+0xc4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <prvAddNewTaskToReadyList+0xc4>)
 80039d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <prvAddNewTaskToReadyList+0xc8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <prvAddNewTaskToReadyList+0xc8>)
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <prvAddNewTaskToReadyList+0xcc>)
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7ff feb2 	bl	8003766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a02:	f000 fbed 	bl	80041e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <prvAddNewTaskToReadyList+0xc0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <prvAddNewTaskToReadyList+0xbc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d207      	bcs.n	8003a2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvAddNewTaskToReadyList+0xd0>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000138 	.word	0x20000138
 8003a38:	20000038 	.word	0x20000038
 8003a3c:	20000144 	.word	0x20000144
 8003a40:	20000154 	.word	0x20000154
 8003a44:	20000140 	.word	0x20000140
 8003a48:	2000003c 	.word	0x2000003c
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <vTaskStartScheduler+0x74>)
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	4919      	ldr	r1, [pc, #100]	; (8003ac8 <vTaskStartScheduler+0x78>)
 8003a64:	4819      	ldr	r0, [pc, #100]	; (8003acc <vTaskStartScheduler+0x7c>)
 8003a66:	f7ff feca 	bl	80037fe <xTaskCreate>
 8003a6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d115      	bne.n	8003a9e <vTaskStartScheduler+0x4e>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <vTaskStartScheduler+0x80>)
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <vTaskStartScheduler+0x84>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <vTaskStartScheduler+0x88>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a98:	f000 fb16 	bl	80040c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a9c:	e00d      	b.n	8003aba <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d109      	bne.n	8003aba <vTaskStartScheduler+0x6a>
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	e7fe      	b.n	8003ab8 <vTaskStartScheduler+0x68>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000015c 	.word	0x2000015c
 8003ac8:	08004774 	.word	0x08004774
 8003acc:	08003e5d 	.word	0x08003e5d
 8003ad0:	20000158 	.word	0x20000158
 8003ad4:	20000144 	.word	0x20000144
 8003ad8:	2000013c 	.word	0x2000013c

08003adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <vTaskSuspendAll+0x18>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <vTaskSuspendAll+0x18>)
 8003ae8:	6013      	str	r3, [r2, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000160 	.word	0x20000160

08003af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <xTaskResumeAll+0x114>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <xTaskResumeAll+0x2a>
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	e7fe      	b.n	8003b20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b22:	f000 fb2f 	bl	8004184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <xTaskResumeAll+0x114>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	4a37      	ldr	r2, [pc, #220]	; (8003c0c <xTaskResumeAll+0x114>)
 8003b2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b30:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <xTaskResumeAll+0x114>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d161      	bne.n	8003bfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <xTaskResumeAll+0x118>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05d      	beq.n	8003bfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b40:	e02e      	b.n	8003ba0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <xTaskResumeAll+0x11c>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3318      	adds	r3, #24
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe2c 	bl	80037ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fe27 	bl	80037ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <xTaskResumeAll+0x120>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <xTaskResumeAll+0x120>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <xTaskResumeAll+0x124>)
 8003b7e:	441a      	add	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f7ff fded 	bl	8003766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <xTaskResumeAll+0x128>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b9a:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <xTaskResumeAll+0x12c>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <xTaskResumeAll+0x11c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cc      	bne.n	8003b42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bae:	f000 f9f9 	bl	8003fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <xTaskResumeAll+0x130>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bbe:	f000 f837 	bl	8003c30 <xTaskIncrementTick>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <xTaskResumeAll+0x12c>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f1      	bne.n	8003bbe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <xTaskResumeAll+0x130>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <xTaskResumeAll+0x12c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be8:	2301      	movs	r3, #1
 8003bea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <xTaskResumeAll+0x134>)
 8003bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bfc:	f000 faf0 	bl	80041e0 <vPortExitCritical>

	return xAlreadyYielded;
 8003c00:	68bb      	ldr	r3, [r7, #8]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000160 	.word	0x20000160
 8003c10:	20000138 	.word	0x20000138
 8003c14:	200000f8 	.word	0x200000f8
 8003c18:	20000140 	.word	0x20000140
 8003c1c:	2000003c 	.word	0x2000003c
 8003c20:	20000038 	.word	0x20000038
 8003c24:	2000014c 	.word	0x2000014c
 8003c28:	20000148 	.word	0x20000148
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3a:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <xTaskIncrementTick+0x14c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 808c 	bne.w	8003d5c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c44:	4b4e      	ldr	r3, [pc, #312]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <xTaskIncrementTick+0x150>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11f      	bne.n	8003c98 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c58:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <xTaskIncrementTick+0x46>
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	e7fe      	b.n	8003c74 <xTaskIncrementTick+0x44>
 8003c76:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	4b42      	ldr	r3, [pc, #264]	; (8003d88 <xTaskIncrementTick+0x158>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a40      	ldr	r2, [pc, #256]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <xTaskIncrementTick+0x158>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b40      	ldr	r3, [pc, #256]	; (8003d8c <xTaskIncrementTick+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	4a3e      	ldr	r2, [pc, #248]	; (8003d8c <xTaskIncrementTick+0x15c>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	f000 f986 	bl	8003fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c98:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <xTaskIncrementTick+0x160>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d34d      	bcc.n	8003d3e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca2:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <xTaskIncrementTick+0x80>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <xTaskIncrementTick+0x82>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <xTaskIncrementTick+0x160>)
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	601a      	str	r2, [r3, #0]
					break;
 8003cbe:	e03e      	b.n	8003d3e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cc0:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <xTaskIncrementTick+0x154>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d203      	bcs.n	8003ce0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <xTaskIncrementTick+0x160>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
						break;
 8003cde:	e02e      	b.n	8003d3e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fd61 	bl	80037ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fd58 	bl	80037ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <xTaskIncrementTick+0x164>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <xTaskIncrementTick+0x164>)
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <xTaskIncrementTick+0x168>)
 8003d1c:	441a      	add	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7ff fd1e 	bl	8003766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <xTaskIncrementTick+0x16c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3b4      	bcc.n	8003ca2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3c:	e7b1      	b.n	8003ca2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <xTaskIncrementTick+0x16c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4914      	ldr	r1, [pc, #80]	; (8003d98 <xTaskIncrementTick+0x168>)
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d907      	bls.n	8003d66 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e004      	b.n	8003d66 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d5c:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <xTaskIncrementTick+0x170>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <xTaskIncrementTick+0x170>)
 8003d64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xTaskIncrementTick+0x174>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000160 	.word	0x20000160
 8003d80:	2000013c 	.word	0x2000013c
 8003d84:	200000f0 	.word	0x200000f0
 8003d88:	200000f4 	.word	0x200000f4
 8003d8c:	20000150 	.word	0x20000150
 8003d90:	20000158 	.word	0x20000158
 8003d94:	20000140 	.word	0x20000140
 8003d98:	2000003c 	.word	0x2000003c
 8003d9c:	20000038 	.word	0x20000038
 8003da0:	20000148 	.word	0x20000148
 8003da4:	2000014c 	.word	0x2000014c

08003da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dae:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <vTaskSwitchContext+0xa0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003db6:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <vTaskSwitchContext+0xa4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dbc:	e03e      	b.n	8003e3c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <vTaskSwitchContext+0xa4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dc4:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <vTaskSwitchContext+0xa8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	f1c3 031f 	rsb	r3, r3, #31
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	491e      	ldr	r1, [pc, #120]	; (8003e54 <vTaskSwitchContext+0xac>)
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	e7fe      	b.n	8003e00 <vTaskSwitchContext+0x58>
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <vTaskSwitchContext+0xac>)
 8003e0e:	4413      	add	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3308      	adds	r3, #8
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d104      	bne.n	8003e32 <vTaskSwitchContext+0x8a>
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <vTaskSwitchContext+0xb0>)
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000160 	.word	0x20000160
 8003e4c:	2000014c 	.word	0x2000014c
 8003e50:	20000140 	.word	0x20000140
 8003e54:	2000003c 	.word	0x2000003c
 8003e58:	20000038 	.word	0x20000038

08003e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e64:	f000 f852 	bl	8003f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvIdleTask+0x28>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d9f9      	bls.n	8003e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <prvIdleTask+0x2c>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e80:	e7f0      	b.n	8003e64 <prvIdleTask+0x8>
 8003e82:	bf00      	nop
 8003e84:	2000003c 	.word	0x2000003c
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e00c      	b.n	8003eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <prvInitialiseTaskLists+0x60>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fc32 	bl	8003710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d9ef      	bls.n	8003e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eba:	f7ff fc29 	bl	8003710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ec0:	f7ff fc26 	bl	8003710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <prvInitialiseTaskLists+0x6c>)
 8003ec6:	f7ff fc23 	bl	8003710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x70>)
 8003ecc:	f7ff fc20 	bl	8003710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <prvInitialiseTaskLists+0x74>)
 8003ed2:	f7ff fc1d 	bl	8003710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x78>)
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvInitialiseTaskLists+0x7c>)
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2000003c 	.word	0x2000003c
 8003ef0:	200000c8 	.word	0x200000c8
 8003ef4:	200000dc 	.word	0x200000dc
 8003ef8:	200000f8 	.word	0x200000f8
 8003efc:	2000010c 	.word	0x2000010c
 8003f00:	20000124 	.word	0x20000124
 8003f04:	200000f0 	.word	0x200000f0
 8003f08:	200000f4 	.word	0x200000f4

08003f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f12:	e028      	b.n	8003f66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003f14:	f7ff fde2 	bl	8003adc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <prvCheckTasksWaitingTermination+0x6c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003f28:	f7ff fde6 	bl	8003af8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d119      	bne.n	8003f66 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003f32:	f000 f927 	bl	8004184 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <prvCheckTasksWaitingTermination+0x6c>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fc32 	bl	80037ac <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <prvCheckTasksWaitingTermination+0x70>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <prvCheckTasksWaitingTermination+0x70>)
 8003f50:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f5a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003f5c:	f000 f940 	bl	80041e0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f000 f80f 	bl	8003f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvCheckTasksWaitingTermination+0x74>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1d2      	bne.n	8003f14 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000010c 	.word	0x2000010c
 8003f7c:	20000138 	.word	0x20000138
 8003f80:	20000120 	.word	0x20000120

08003f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fa6d 	bl	8004470 <vPortFree>
			vPortFree( pxTCB );
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa6a 	bl	8004470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <prvResetNextTaskUnblockTime+0x40>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <prvResetNextTaskUnblockTime+0x14>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <prvResetNextTaskUnblockTime+0x16>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <prvResetNextTaskUnblockTime+0x44>)
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fc6:	e008      	b.n	8003fda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvResetNextTaskUnblockTime+0x40>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <prvResetNextTaskUnblockTime+0x44>)
 8003fd8:	6013      	str	r3, [r2, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	200000f0 	.word	0x200000f0
 8003fe8:	20000158 	.word	0x20000158

08003fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800401c:	4a08      	ldr	r2, [pc, #32]	; (8004040 <pxPortInitialiseStack+0x54>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b14      	subs	r3, #20
 8004026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3b20      	subs	r3, #32
 8004032:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004034:	68fb      	ldr	r3, [r7, #12]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	08004045 	.word	0x08004045

08004044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvTaskExitError+0x38>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d009      	beq.n	8004068 <prvTaskExitError+0x24>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	e7fe      	b.n	8004066 <prvTaskExitError+0x22>
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800407a:	e7fe      	b.n	800407a <prvTaskExitError+0x36>
 800407c:	20000008 	.word	0x20000008

08004080 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <pxCurrentTCBConst2>)
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	6808      	ldr	r0, [r1, #0]
 8004086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800408a:	f380 8809 	msr	PSP, r0
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8811 	msr	BASEPRI, r0
 800409a:	f04e 0e0d 	orr.w	lr, lr, #13
 800409e:	4770      	bx	lr

080040a0 <pxCurrentTCBConst2>:
 80040a0:	20000038 	.word	0x20000038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040a8:	4806      	ldr	r0, [pc, #24]	; (80040c4 <prvPortStartFirstTask+0x1c>)
 80040aa:	6800      	ldr	r0, [r0, #0]
 80040ac:	6800      	ldr	r0, [r0, #0]
 80040ae:	f380 8808 	msr	MSP, r0
 80040b2:	b662      	cpsie	i
 80040b4:	b661      	cpsie	f
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	df00      	svc	0
 80040c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040c2:	bf00      	nop
 80040c4:	e000ed08 	.word	0xe000ed08

080040c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <xPortStartScheduler+0xa8>)
 80040d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22ff      	movs	r2, #255	; 0xff
 80040de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <xPortStartScheduler+0xac>)
 80040f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <xPortStartScheduler+0xb0>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040fc:	e009      	b.n	8004112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <xPortStartScheduler+0xb0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3b01      	subs	r3, #1
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <xPortStartScheduler+0xb0>)
 8004106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b80      	cmp	r3, #128	; 0x80
 800411c:	d0ef      	beq.n	80040fe <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <xPortStartScheduler+0xb0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4a14      	ldr	r2, [pc, #80]	; (8004178 <xPortStartScheduler+0xb0>)
 8004126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <xPortStartScheduler+0xb0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004130:	4a11      	ldr	r2, [pc, #68]	; (8004178 <xPortStartScheduler+0xb0>)
 8004132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <xPortStartScheduler+0xb4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0e      	ldr	r2, [pc, #56]	; (800417c <xPortStartScheduler+0xb4>)
 8004142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <xPortStartScheduler+0xb4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0b      	ldr	r2, [pc, #44]	; (800417c <xPortStartScheduler+0xb4>)
 800414e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004154:	f000 f8b0 	bl	80042b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <xPortStartScheduler+0xb8>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800415e:	f7ff ffa3 	bl	80040a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004162:	f7ff ff6f 	bl	8004044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	e000e400 	.word	0xe000e400
 8004174:	20000164 	.word	0x20000164
 8004178:	20000168 	.word	0x20000168
 800417c:	e000ed20 	.word	0xe000ed20
 8004180:	20000008 	.word	0x20000008

08004184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <vPortEnterCritical+0x54>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <vPortEnterCritical+0x54>)
 80041a4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <vPortEnterCritical+0x54>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d10e      	bne.n	80041cc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <vPortEnterCritical+0x58>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <vPortEnterCritical+0x48>
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	e7fe      	b.n	80041ca <vPortEnterCritical+0x46>
	}
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000008 	.word	0x20000008
 80041dc:	e000ed04 	.word	0xe000ed04

080041e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <vPortExitCritical+0x48>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <vPortExitCritical+0x22>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	e7fe      	b.n	8004200 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <vPortExitCritical+0x48>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3b01      	subs	r3, #1
 8004208:	4a07      	ldr	r2, [pc, #28]	; (8004228 <vPortExitCritical+0x48>)
 800420a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <vPortExitCritical+0x48>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <vPortExitCritical+0x3e>
 8004214:	2300      	movs	r3, #0
 8004216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	20000008 	.word	0x20000008
 800422c:	00000000 	.word	0x00000000

08004230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004230:	f3ef 8009 	mrs	r0, PSP
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <pxCurrentTCBConst>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004240:	6010      	str	r0, [r2, #0]
 8004242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800424a:	f380 8811 	msr	BASEPRI, r0
 800424e:	f7ff fdab 	bl	8003da8 <vTaskSwitchContext>
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004266:	f380 8809 	msr	PSP, r0
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	4770      	bx	lr

08004270 <pxCurrentTCBConst>:
 8004270:	20000038 	.word	0x20000038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004290:	f7ff fcce 	bl	8003c30 <xTaskIncrementTick>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <SysTick_Handler+0x3c>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <vPortSetupTimerInterrupt+0x24>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <vPortSetupTimerInterrupt+0x28>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	4a06      	ldr	r2, [pc, #24]	; (80042e4 <vPortSetupTimerInterrupt+0x2c>)
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <vPortSetupTimerInterrupt+0x30>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000000 	.word	0x20000000
 80042e0:	10624dd3 	.word	0x10624dd3
 80042e4:	e000e014 	.word	0xe000e014
 80042e8:	e000e010 	.word	0xe000e010

080042ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042f8:	f7ff fbf0 	bl	8003adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042fc:	4b57      	ldr	r3, [pc, #348]	; (800445c <pvPortMalloc+0x170>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004304:	f000 f90c 	bl	8004520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004308:	4b55      	ldr	r3, [pc, #340]	; (8004460 <pvPortMalloc+0x174>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 808c 	bne.w	800442e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800431c:	2208      	movs	r2, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d013      	beq.n	8004356 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f023 0307 	bic.w	r3, r3, #7
 8004334:	3308      	adds	r3, #8
 8004336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <pvPortMalloc+0x6a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e7fe      	b.n	8004354 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d068      	beq.n	800442e <pvPortMalloc+0x142>
 800435c:	4b41      	ldr	r3, [pc, #260]	; (8004464 <pvPortMalloc+0x178>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d863      	bhi.n	800442e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004366:	4b40      	ldr	r3, [pc, #256]	; (8004468 <pvPortMalloc+0x17c>)
 8004368:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800436a:	4b3f      	ldr	r3, [pc, #252]	; (8004468 <pvPortMalloc+0x17c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004370:	e004      	b.n	800437c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d903      	bls.n	800438e <pvPortMalloc+0xa2>
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f1      	bne.n	8004372 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <pvPortMalloc+0x170>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	429a      	cmp	r2, r3
 8004396:	d04a      	beq.n	800442e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	4413      	add	r3, r2
 80043a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	1ad2      	subs	r2, r2, r3
 80043b2:	2308      	movs	r3, #8
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d91e      	bls.n	80043f8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <pvPortMalloc+0xf4>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e7fe      	b.n	80043de <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043f2:	69b8      	ldr	r0, [r7, #24]
 80043f4:	f000 f8f6 	bl	80045e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <pvPortMalloc+0x178>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <pvPortMalloc+0x178>)
 8004404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004406:	4b17      	ldr	r3, [pc, #92]	; (8004464 <pvPortMalloc+0x178>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b18      	ldr	r3, [pc, #96]	; (800446c <pvPortMalloc+0x180>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d203      	bcs.n	800441a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <pvPortMalloc+0x178>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <pvPortMalloc+0x180>)
 8004418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <pvPortMalloc+0x174>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	431a      	orrs	r2, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800442e:	f7ff fb63 	bl	8003af8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <pvPortMalloc+0x164>
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e7fe      	b.n	800444e <pvPortMalloc+0x162>
	return pvReturn;
 8004450:	69fb      	ldr	r3, [r7, #28]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3728      	adds	r7, #40	; 0x28
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000d74 	.word	0x20000d74
 8004460:	20000d80 	.word	0x20000d80
 8004464:	20000d78 	.word	0x20000d78
 8004468:	20000d6c 	.word	0x20000d6c
 800446c:	20000d7c 	.word	0x20000d7c

08004470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d046      	beq.n	8004510 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004482:	2308      	movs	r3, #8
 8004484:	425b      	negs	r3, r3
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4413      	add	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <vPortFree+0xa8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <vPortFree+0x42>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e7fe      	b.n	80044b0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <vPortFree+0x5e>
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	e7fe      	b.n	80044cc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <vPortFree+0xa8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d019      	beq.n	8004510 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d115      	bne.n	8004510 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <vPortFree+0xa8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044f4:	f7ff faf2 	bl	8003adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <vPortFree+0xac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4413      	add	r3, r2
 8004502:	4a06      	ldr	r2, [pc, #24]	; (800451c <vPortFree+0xac>)
 8004504:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004506:	6938      	ldr	r0, [r7, #16]
 8004508:	f000 f86c 	bl	80045e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800450c:	f7ff faf4 	bl	8003af8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000d80 	.word	0x20000d80
 800451c:	20000d78 	.word	0x20000d78

08004520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004526:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800452a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <prvHeapInit+0xac>)
 800452e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3307      	adds	r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <prvHeapInit+0xac>)
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <prvHeapInit+0xb0>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <prvHeapInit+0xb0>)
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800456c:	2208      	movs	r2, #8
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <prvHeapInit+0xb4>)
 8004580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <prvHeapInit+0xb4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <prvHeapInit+0xb4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <prvHeapInit+0xb4>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <prvHeapInit+0xb8>)
 80045ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a09      	ldr	r2, [pc, #36]	; (80045dc <prvHeapInit+0xbc>)
 80045b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <prvHeapInit+0xc0>)
 80045ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000016c 	.word	0x2000016c
 80045d0:	20000d6c 	.word	0x20000d6c
 80045d4:	20000d74 	.word	0x20000d74
 80045d8:	20000d7c 	.word	0x20000d7c
 80045dc:	20000d78 	.word	0x20000d78
 80045e0:	20000d80 	.word	0x20000d80

080045e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045ec:	4b27      	ldr	r3, [pc, #156]	; (800468c <prvInsertBlockIntoFreeList+0xa8>)
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e002      	b.n	80045f8 <prvInsertBlockIntoFreeList+0x14>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d8f7      	bhi.n	80045f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4413      	add	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d108      	bne.n	8004626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	441a      	add	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d118      	bne.n	800466c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <prvInsertBlockIntoFreeList+0xac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d00d      	beq.n	8004662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e008      	b.n	8004674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <prvInsertBlockIntoFreeList+0xac>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e003      	b.n	8004674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d002      	beq.n	8004682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	20000d6c 	.word	0x20000d6c
 8004690:	20000d74 	.word	0x20000d74

08004694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004696:	e003      	b.n	80046a0 <LoopCopyDataInit>

08004698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800469a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800469c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800469e:	3104      	adds	r1, #4

080046a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80046a0:	480a      	ldr	r0, [pc, #40]	; (80046cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80046a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80046a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80046a8:	d3f6      	bcc.n	8004698 <CopyDataInit>
  ldr r2, =_sbss
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80046ac:	e002      	b.n	80046b4 <LoopFillZerobss>

080046ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80046b0:	f842 3b04 	str.w	r3, [r2], #4

080046b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80046b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80046b8:	d3f9      	bcc.n	80046ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046ba:	f7fc fd91 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046be:	f000 f80f 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046c2:	f7fc fc51 	bl	8000f68 <main>
  bx lr
 80046c6:	4770      	bx	lr
  ldr r3, =_sidata
 80046c8:	0800479c 	.word	0x0800479c
  ldr r0, =_sdata
 80046cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80046d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80046d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80046d8:	20000e5c 	.word	0x20000e5c

080046dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046dc:	e7fe      	b.n	80046dc <ADC1_2_IRQHandler>
	...

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	2500      	movs	r5, #0
 80046e4:	4e0c      	ldr	r6, [pc, #48]	; (8004718 <__libc_init_array+0x38>)
 80046e6:	4c0d      	ldr	r4, [pc, #52]	; (800471c <__libc_init_array+0x3c>)
 80046e8:	1ba4      	subs	r4, r4, r6
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	42a5      	cmp	r5, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	f000 f822 	bl	8004738 <_init>
 80046f4:	2500      	movs	r5, #0
 80046f6:	4e0a      	ldr	r6, [pc, #40]	; (8004720 <__libc_init_array+0x40>)
 80046f8:	4c0a      	ldr	r4, [pc, #40]	; (8004724 <__libc_init_array+0x44>)
 80046fa:	1ba4      	subs	r4, r4, r6
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	42a5      	cmp	r5, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004708:	4798      	blx	r3
 800470a:	3501      	adds	r5, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004712:	4798      	blx	r3
 8004714:	3501      	adds	r5, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	08004794 	.word	0x08004794
 800471c:	08004794 	.word	0x08004794
 8004720:	08004794 	.word	0x08004794
 8004724:	08004798 	.word	0x08004798

08004728 <memset>:
 8004728:	4603      	mov	r3, r0
 800472a:	4402      	add	r2, r0
 800472c:	4293      	cmp	r3, r2
 800472e:	d100      	bne.n	8004732 <memset+0xa>
 8004730:	4770      	bx	lr
 8004732:	f803 1b01 	strb.w	r1, [r3], #1
 8004736:	e7f9      	b.n	800472c <memset+0x4>

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
